diff --git a/board.html b/board.html
index 6423d3f..486f9de 100644
--- a/board.html
+++ b/board.html
@@ -11,7 +11,7 @@
 
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
-    
+
   </head>
   <body>
 
@@ -95,7 +95,7 @@
                                   <div id="icon-register-msg" class="glyphicon glyphicon-chevron-right"></div>
                                   <span id="text-register-msg">Register an account.</span>
                               </div>
-  		    				<input id="register_username" class="form-control" type="text" placeholder="Username (type ERROR for error effect)" required>
+  		    				<input id="register_username" class="form-control" type="text" placeholder="Username (3)" required>
                               <input id="register_email" class="form-control" type="text" placeholder="E-Mail" required>
                               <input id="register_password" class="form-control" type="password" placeholder="Password" required>
               			</div>
diff --git a/register/app.js b/register/app.js
index 86d74b0..a9a8d8a 100644
--- a/register/app.js
+++ b/register/app.js
@@ -3,16 +3,26 @@ var cons = require('consolidate');
 var bodyParser = require('body-parser');
 var mongoose = require('mongoose');
 var crypto = require('crypto');
-
-
+var session = require('express-session');
+var cookieParser = require('cookie-parser');
 
 //환경설정
 var app = express();
-app.engine('html', cons.swig);
-app.set('view engine', 'html');
+// app.engine('html', cons.swig);
+// app.set('view engine', 'html');
+app.engine('html', require('ejs').renderFile);
+app.set('view engine', 'ejs');
 app.set('views', './views');
 app.use(express.static('public'));
 app.use(bodyParser.urlencoded({ extended: true }));
+app.use(cookieParser());
+app.use(session({
+  secret: 'keyboard cat', // 쿠키에 저장할 connect.sid값을 암호화할 키값 입력
+  resave: false,                                   //세션 아이디를 접속할때마다 새롭게 발급하지 않음
+  saveUninitialized: true                   //세션 아이디를 실제 사용하기전에는 발급하지 않음
+}));
+
+
 
 app.listen(3000, function(){
   console.log('-----Conneted 3000 Port!!!-----');
@@ -54,7 +64,11 @@ var Member = mongoose.model('Member', memberSchema);
 //메인 페이지
 app.get('/',function(req, res){
   res.status(200);
-  res.render('index');
+  res.render("index.html",{
+    loginId:req.session.id,
+    cookieId:req.cookies.loginId,
+    msg:'로그인정보를 입력해주세요'
+  });
 });
 
 
@@ -63,37 +77,99 @@ app.post('/register', function(req, res){
   res.status(200);
   console.log("post");
 
-    var register_username = req.body.register_username;
-    var register_register_email = req.body.register_email;
-    var register_password = pwHash(req.body.register_password);
+  var register_username = req.body.register_username;
+  var register_register_email = req.body.register_email;
+  var register_password = pwHash(req.body.register_password);
 
-    var curUsername = register_username;
+  var curUsername = register_username;
 
-    if(curUsername === "") {
-  		res.send('<script type="text/javascript">alert("username을 입력하세요");</script>');
-  	}
-    else {
-      Member.findOne({ username: curUsername }, function (err, member) {
-          if (err) return handleError(err); //DB에 동일한 이름이 있으면 에러 리턴
+  if(curUsername === "") {
+		res.send('<script type="text/javascript">alert("username을 입력하세요");</script>');
+	}
+  else {
+    Member.findOne({ username: curUsername }, function (err, member) {
+        if (err) return handleError(err); //DB에 동일한 이름이 있으면 에러 리턴
 
-          if(member === null) { // 새로운 이름일 경우
-console.log("no error");
+        if(member === null) { // 새로운 이름일 경우
+          console.log("no error");
           var myMember = new Member({ username: curUsername, password: register_password, email: register_register_email });
           myMember.save(function (err1, myMember) {
             if (err1) {// TODO handle the error
               console.log("merror");
-              }
-              console.log('member is inserted');
+            }
+          console.log('member is inserted');
           });
           console.log('Register Success!');
           res.redirect('/');
-          }
-          else { // in case that Username already exists
-            console.log(' Username already exists');
-            res.redirect('/');
+        } else { // in case that Username already exists
+          console.log(' Username already exists');
+          res.redirect('/');
+        }
+    });
+  }
+
+});
+
+//로그인
+//진혜림 추가
+app.post('/login', function(req, res){
+  var loginUsername = req.body.login_username;
+  var loginPassword = pwHash(req.body.login_password);
+  var loginCheckbox = req.body.login_checkbox;
 
-          }
+
+  Member.findOne({ username: loginUsername }, function (err, member) {
+    console.log('멤버값은? : ' + member);
+    if (err) {
+      console.log(err);
+    }
+
+    if(member === null){
+     console.log('가입되지 않은 사용자 입니다.');
+      res.render("index.html",{
+        loginId:null,
+        cookieId:req.cookies.loginId,
+          msg:'로그인 되었습니다.'
+      });
+    } else if (member.password == loginPassword){
+      if(loginCheckbox){
+        console.log('쿠키저장완료');
+        res.cookie('loginId', loginUsername, {
+          maxAge: 10000000
+        });
+      } else {
+        console.log('쿠키삭제완료');
+        res.cookie('loginId');
+      }
+
+      console.log('로그인이 되었습니다.');
+      req.session.id=loginUsername;
+
+      res.render("index.html",{
+        loginId:req.session.id,
+        cookieId:req.cookies.loginId,
+        msg:'로그인정보를 입력해주세요.'
+      });
+    } else if (member.password != loginPassword) {
+      res.render("index.html",{
+        loginId:null,
+        cookieId:req.cookies.loginId,
+        msg:'비밀번호를 입력해주세요.'
       });
     }
 
+  });
+});
+
+//로그아웃
+//진혜림추가
+app.get("/logout",function(req,res){
+  req.session.destroy(function(){
+    req.session;
+  });
+  res.render("index.html",{
+    loginId:null,
+    cookieId:req.cookies.loginId,
+      msg:'로그인 정보를 입력해주세요.'
+  });
 });
diff --git a/register/node_modules/cookie-parser/HISTORY.md b/register/node_modules/cookie-parser/HISTORY.md
new file mode 100644
index 0000000..4f28f50
--- /dev/null
+++ b/register/node_modules/cookie-parser/HISTORY.md
@@ -0,0 +1,85 @@
+1.4.3 / 2016-05-26
+==================
+
+  * deps: cookie@0.3.1
+    - perf: use for loop in parse
+
+1.4.2 / 2016-05-20
+==================
+
+  * deps: cookie@0.2.4
+    - perf: enable strict mode
+    - perf: use for loop in parse
+    - perf: use string concatination for serialization
+
+1.4.1 / 2016-01-11
+==================
+
+  * deps: cookie@0.2.3
+  * perf: enable strict mode
+
+1.4.0 / 2015-09-18
+==================
+
+  * Accept array of secrets in addition to a single secret
+  * Fix `JSONCookie` to return `undefined` for non-string arguments
+  * Fix `signedCookie` to return `undefined` for non-string arguments
+  * deps: cookie@0.2.2
+
+1.3.5 / 2015-05-19
+==================
+
+  * deps: cookie@0.1.3
+    - Slight optimizations
+
+1.3.4 / 2015-02-15
+==================
+
+  * deps: cookie-signature@1.0.6
+
+1.3.3 / 2014-09-05
+==================
+
+  * deps: cookie-signature@1.0.5
+
+1.3.2 / 2014-06-26
+==================
+
+  * deps: cookie-signature@1.0.4
+    - fix for timing attacks
+
+1.3.1 / 2014-06-17
+==================
+
+  * actually export `signedCookie`
+
+1.3.0 / 2014-06-17
+==================
+
+  * add `signedCookie` export for single cookie unsigning
+
+1.2.0 / 2014-06-17
+==================
+
+  * export parsing functions
+  * `req.cookies` and `req.signedCookies` are now plain objects
+  * slightly faster parsing of many cookies
+
+1.1.0 / 2014-05-12
+==================
+
+  * Support for NodeJS version 0.8
+  * deps: cookie@0.1.2
+    - Fix for maxAge == 0
+    - made compat with expires field
+    - tweak maxAge NaN error message
+
+1.0.1 / 2014-02-20
+==================
+
+  * add missing dependencies
+
+1.0.0 / 2014-02-15
+==================
+
+  * Genesis from `connect`
diff --git a/register/node_modules/cookie-parser/LICENSE b/register/node_modules/cookie-parser/LICENSE
new file mode 100644
index 0000000..343f2ad
--- /dev/null
+++ b/register/node_modules/cookie-parser/LICENSE
@@ -0,0 +1,23 @@
+(The MIT License)
+
+Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>
+Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/node_modules/cookie-parser/README.md b/register/node_modules/cookie-parser/README.md
new file mode 100644
index 0000000..05dbdc5
--- /dev/null
+++ b/register/node_modules/cookie-parser/README.md
@@ -0,0 +1,85 @@
+# cookie-parser
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+Parse `Cookie` header and populate `req.cookies` with an object keyed by the cookie
+names. Optionally you may enable signed cookie support by passing a `secret` string,
+which assigns `req.secret` so it may be used by other middleware.
+
+## Installation
+
+```sh
+$ npm install cookie-parser
+```
+
+## API
+
+```js
+var express      = require('express')
+var cookieParser = require('cookie-parser')
+
+var app = express()
+app.use(cookieParser())
+```
+
+### cookieParser(secret, options)
+
+- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.
+  - `decode` a function to decode the value of the cookie
+
+### cookieParser.JSONCookie(str)
+
+Parse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.
+
+### cookieParser.JSONCookies(cookies)
+
+Given an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.
+
+### cookieParser.signedCookie(str, secret)
+
+Parse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.
+
+The `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+
+### cookieParser.signedCookies(cookies, secret)
+
+Given an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.
+
+The `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+
+## Example
+
+```js
+var express      = require('express')
+var cookieParser = require('cookie-parser')
+
+var app = express()
+app.use(cookieParser())
+
+app.get('/', function(req, res) {
+  console.log('Cookies: ', req.cookies)
+})
+
+app.listen(8080)
+
+// curl command that sends an HTTP request with two cookies
+// curl http://127.0.0.1:8080 --cookie "Cho=Kim;Greet=Hello"
+```
+
+### [MIT Licensed](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg
+[npm-url]: https://npmjs.org/package/cookie-parser
+[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg
+[node-version-url]: https://nodejs.org/en/download
+[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg
+[travis-url]: https://travis-ci.org/expressjs/cookie-parser
+[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg
+[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg
+[downloads-url]: https://npmjs.org/package/cookie-parser
diff --git a/register/node_modules/cookie-parser/index.js b/register/node_modules/cookie-parser/index.js
new file mode 100644
index 0000000..59816a2
--- /dev/null
+++ b/register/node_modules/cookie-parser/index.js
@@ -0,0 +1,181 @@
+/*!
+ * cookie-parser
+ * Copyright(c) 2014 TJ Holowaychuk
+ * Copyright(c) 2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var cookie = require('cookie');
+var signature = require('cookie-signature');
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = cookieParser;
+module.exports.JSONCookie = JSONCookie;
+module.exports.JSONCookies = JSONCookies;
+module.exports.signedCookie = signedCookie;
+module.exports.signedCookies = signedCookies;
+
+/**
+ * Parse Cookie header and populate `req.cookies`
+ * with an object keyed by the cookie names.
+ *
+ * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).
+ * @param {Object} [options]
+ * @return {Function}
+ * @public
+ */
+
+function cookieParser(secret, options) {
+  return function cookieParser(req, res, next) {
+    if (req.cookies) {
+      return next();
+    }
+
+    var cookies = req.headers.cookie;
+    var secrets = !secret || Array.isArray(secret)
+      ? (secret || [])
+      : [secret];
+
+    req.secret = secrets[0];
+    req.cookies = Object.create(null);
+    req.signedCookies = Object.create(null);
+
+    // no cookies
+    if (!cookies) {
+      return next();
+    }
+
+    req.cookies = cookie.parse(cookies, options);
+
+    // parse signed cookies
+    if (secrets.length !== 0) {
+      req.signedCookies = signedCookies(req.cookies, secrets);
+      req.signedCookies = JSONCookies(req.signedCookies);
+    }
+
+    // parse JSON cookies
+    req.cookies = JSONCookies(req.cookies);
+
+    next();
+  };
+}
+
+/**
+ * Parse JSON cookie string.
+ *
+ * @param {String} str
+ * @return {Object} Parsed object or undefined if not json cookie
+ * @public
+ */
+
+function JSONCookie(str) {
+  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {
+    return undefined;
+  }
+
+  try {
+    return JSON.parse(str.slice(2));
+  } catch (err) {
+    return undefined;
+  }
+}
+
+/**
+ * Parse JSON cookies.
+ *
+ * @param {Object} obj
+ * @return {Object}
+ * @public
+ */
+
+function JSONCookies(obj) {
+  var cookies = Object.keys(obj);
+  var key;
+  var val;
+
+  for (var i = 0; i < cookies.length; i++) {
+    key = cookies[i];
+    val = JSONCookie(obj[key]);
+
+    if (val) {
+      obj[key] = val;
+    }
+  }
+
+  return obj;
+}
+
+/**
+ * Parse a signed cookie string, return the decoded value.
+ *
+ * @param {String} str signed cookie string
+ * @param {string|array} secret
+ * @return {String} decoded value
+ * @public
+ */
+
+function signedCookie(str, secret) {
+  if (typeof str !== 'string') {
+    return undefined;
+  }
+
+  if (str.substr(0, 2) !== 's:') {
+    return str;
+  }
+
+  var secrets = !secret || Array.isArray(secret)
+    ? (secret || [])
+    : [secret];
+
+  for (var i = 0; i < secrets.length; i++) {
+    var val = signature.unsign(str.slice(2), secrets[i]);
+
+    if (val !== false) {
+      return val;
+    }
+  }
+
+  return false;
+}
+
+/**
+ * Parse signed cookies, returning an object containing the decoded key/value
+ * pairs, while removing the signed key from obj.
+ *
+ * @param {Object} obj
+ * @param {string|array} secret
+ * @return {Object}
+ * @public
+ */
+
+function signedCookies(obj, secret) {
+  var cookies = Object.keys(obj);
+  var dec;
+  var key;
+  var ret = Object.create(null);
+  var val;
+
+  for (var i = 0; i < cookies.length; i++) {
+    key = cookies[i];
+    val = obj[key];
+    dec = signedCookie(val, secret);
+
+    if (val !== dec) {
+      ret[key] = dec;
+      delete obj[key];
+    }
+  }
+
+  return ret;
+}
diff --git a/register/node_modules/cookie-parser/package.json b/register/node_modules/cookie-parser/package.json
new file mode 100644
index 0000000..28124e9
--- /dev/null
+++ b/register/node_modules/cookie-parser/package.json
@@ -0,0 +1,57 @@
+{
+  "name": "cookie-parser",
+  "description": "cookie parsing with signatures",
+  "version": "1.4.3",
+  "author": {
+    "name": "TJ Holowaychuk",
+    "email": "tj@vision-media.ca",
+    "url": "http://tjholowaychuk.com"
+  },
+  "contributors": [
+    {
+      "name": "Douglas Christopher Wilson",
+      "email": "doug@somethingdoug.com"
+    }
+  ],
+  "license": "MIT",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/expressjs/cookie-parser"
+  },
+  "keywords": [
+    "cookie",
+    "middleware"
+  ],
+  "dependencies": {
+    "cookie": "0.3.1",
+    "cookie-signature": "1.0.6"
+  },
+  "devDependencies": {
+    "istanbul": "0.4.3",
+    "mocha": "2.5.3",
+    "supertest": "1.1.0"
+  },
+  "files": [
+    "LICENSE",
+    "HISTORY.md",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8.0"
+  },
+  "scripts": {
+    "test": "mocha --reporter spec --bail --check-leaks test/",
+    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
+    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
+  },
+  "readme": "# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log('Cookies: ', req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n",
+  "readmeFilename": "README.md",
+  "bugs": {
+    "url": "https://github.com/expressjs/cookie-parser/issues"
+  },
+  "homepage": "https://github.com/expressjs/cookie-parser",
+  "_id": "cookie-parser@1.4.3",
+  "_shasum": "0fe31fa19d000b95f4aadf1f53fdc2b8a203baa5",
+  "_from": "cookie-parser@",
+  "_resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.3.tgz"
+}
diff --git a/register/node_modules/ejs/Jakefile b/register/node_modules/ejs/Jakefile
new file mode 100644
index 0000000..ec3defd
--- /dev/null
+++ b/register/node_modules/ejs/Jakefile
@@ -0,0 +1,71 @@
+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var exec = function (cmd) {
+  execSync(cmd, {stdio: 'inherit'});
+};
+
+/* global jake, task, desc, publishTask */
+
+task('build', ['lint', 'clean', 'browserify', 'minify'], function () {
+  console.log('Build completed.');
+});
+
+desc('Cleans browerified/minified files and package files');
+task('clean', ['clobber'], function () {
+  jake.rmRf('./ejs.js');
+  jake.rmRf('./ejs.min.js');
+  console.log('Cleaned up compiled files.');
+});
+
+desc('Lints the source code');
+task('lint', function () {
+  exec('./node_modules/.bin/eslint \"**/*.js\" Jakefile');
+  console.log('Linting completed.');
+});
+
+task('browserify', function () {
+  exec('./node_modules/browserify/bin/cmd.js --standalone ejs lib/ejs.js > ejs.js');
+  console.log('Browserification completed.');
+});
+
+task('minify', function () {
+  exec('./node_modules/uglify-js/bin/uglifyjs ejs.js > ejs.min.js');
+  console.log('Minification completed.');
+});
+
+task('doc', function (dev) {
+  jake.rmRf('out');
+  var p = dev ? '-p' : '';
+  exec('./node_modules/.bin/jsdoc ' + p + ' -c jsdoc.json lib/* docs/jsdoc/*');
+  console.log('Documentation generated.');
+});
+
+task('docPublish', ['doc'], function () {
+  fs.writeFileSync('out/CNAME', 'api.ejs.co');
+  console.log('Pushing docs to gh-pages...');
+  exec('./node_modules/.bin/git-directory-deploy --directory out/');
+  console.log('Docs published to gh-pages.');
+});
+
+task('test', ['lint'], function () {
+  exec('./node_modules/.bin/mocha');
+});
+
+publishTask('ejs', ['build'], function () {
+  this.packageFiles.include([
+    'Jakefile',
+    'README.md',
+    'LICENSE',
+    'package.json',
+    'ejs.js',
+    'ejs.min.js',
+    'lib/**',
+    'test/**'
+  ]);
+});
+
+jake.Task.publish.on('complete', function () {
+  console.log('Updating hosted docs...');
+  console.log('If this fails, run jake docPublish to re-try.');
+  jake.Task.docPublish.invoke();
+});
diff --git a/register/node_modules/ejs/LICENSE b/register/node_modules/ejs/LICENSE
new file mode 100644
index 0000000..d645695
--- /dev/null
+++ b/register/node_modules/ejs/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/register/node_modules/ejs/README.md b/register/node_modules/ejs/README.md
new file mode 100644
index 0000000..1f3b9c7
--- /dev/null
+++ b/register/node_modules/ejs/README.md
@@ -0,0 +1,256 @@
+# EJS
+
+Embedded JavaScript templates
+
+[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)
+[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)
+
+## Installation
+
+```bash
+$ npm install ejs
+```
+
+## Features
+
+  * Control flow with `<% %>`
+  * Escaped output with `<%= %>` (escape function configurable)
+  * Unescaped raw output with `<%- %>`
+  * Newline-trim mode ('newline slurping') with `-%>` ending tag
+  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`
+  * Custom delimiters (e.g., use `<? ?>` instead of `<% %>`)
+  * Includes
+  * Client-side support
+  * Static caching of intermediate JavaScript
+  * Static caching of templates
+  * Complies with the [Express](http://expressjs.com) view system
+
+## Example
+
+```html
+<% if (user) { %>
+  <h2><%= user.name %></h2>
+<% } %>
+```
+
+Try EJS online at: https://ionicabizau.github.io/ejs-playground/.
+
+## Usage
+
+```javascript
+var template = ejs.compile(str, options);
+template(data);
+// => Rendered HTML string
+
+ejs.render(str, data, options);
+// => Rendered HTML string
+
+ejs.renderFile(filename, data, options, function(err, str){
+    // str => Rendered HTML string
+});
+```
+
+It is also possible to use `ejs.render(dataAndOptions);` where you pass
+everything in a single object. In that case, you'll end up with local variables
+for all the passed options. However, be aware that your code could break if we
+add an option with the same name as one of your data object's properties.
+Therefore, we do not recommend using this shortcut.
+
+## Options
+
+  - `cache`           Compiled functions are cached, requires `filename`
+  - `filename`        The name of the file being rendered. Not required if you
+    are using `renderFile()`. Used by `cache` to key caches, and for includes.
+  - `root`            Set project root for includes with an absolute path (/file.ejs).
+  - `context`         Function execution context
+  - `compileDebug`    When `false` no debug instrumentation is compiled
+  - `client`          When `true`, compiles a function that can be rendered
+    in the browser without needing to load the EJS Runtime
+    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).
+  - `delimiter`       Character to use with angle brackets for open/close
+  - `debug`           Output generated function body
+  - `strict`          When set to `true`, generated function is in strict mode
+  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object. Set to `false` in strict mode.
+  - `localsName`      Name to use for the object storing local variables when not using `with` Defaults to `locals`
+  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading
+    and trailing whitespace. It also enables a safer version of `-%>` line
+    slurping for all scriptlet tags (it does not strip new lines of tags in
+    the middle of a line).
+  - `escape`          The escaping function used with `<%=` construct. It is
+    used in rendering and is `.toString()`ed in the generation of client functions. (By default escapes XML).
+
+This project uses [JSDoc](http://usejsdoc.org/). For the full public API
+documentation, clone the repository and run `npm run doc`. This will run JSDoc
+with the proper options and output the documentation to `out/`. If you want
+the both the public & private API docs, run `npm run devdoc` instead.
+
+## Tags
+
+  - `<%`              'Scriptlet' tag, for control-flow, no output
+  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it
+  - `<%=`             Outputs the value into the template (escaped)
+  - `<%-`             Outputs the unescaped value into the template
+  - `<%#`             Comment tag, no execution, no output
+  - `<%%`             Outputs a literal '<%'
+  - `%%>`             Outputs a literal '%>'
+  - `%>`              Plain ending tag
+  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline
+  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it
+
+For the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).
+
+## Includes
+
+Includes either have to be an absolute path, or, if not, are assumed as
+relative to the template with the `include` call. For example if you are
+including `./views/user/show.ejs` from `./views/users.ejs` you would
+use `<%- include('user/show') %>`.
+
+You must specify the `filename` option for the template with the `include`
+call unless you are using `renderFile()`.
+
+You'll likely want to use the raw output tag (`<%-`) with your include to avoid
+double-escaping the HTML output.
+
+```html
+<ul>
+  <% users.forEach(function(user){ %>
+    <%- include('user/show', {user: user}) %>
+  <% }); %>
+</ul>
+```
+
+Includes are inserted at runtime, so you can use variables for the path in the
+`include` call (for example `<%- include(somePath) %>`). Variables in your
+top-level data object are available to all your includes, but local variables
+need to be passed down.
+
+NOTE: Include preprocessor directives (`<% include user/show %>`) are
+still supported.
+
+## Custom delimiters
+
+Custom delimiters can be applied on a per-template basis, or globally:
+
+```javascript
+var ejs = require('ejs'),
+    users = ['geddy', 'neil', 'alex'];
+
+// Just one template
+ejs.render('<?= users.join(" | "); ?>', {users: users}, {delimiter: '?'});
+// => 'geddy | neil | alex'
+
+// Or globally
+ejs.delimiter = '$';
+ejs.render('<$= users.join(" | "); $>', {users: users});
+// => 'geddy | neil | alex'
+```
+
+## Caching
+
+EJS ships with a basic in-process cache for caching the intermediate JavaScript
+functions used to render templates. It's easy to plug in LRU caching using
+Node's `lru-cache` library:
+
+```javascript
+var ejs = require('ejs')
+  , LRU = require('lru-cache');
+ejs.cache = LRU(100); // LRU cache with 100-item limit
+```
+
+If you want to clear the EJS cache, call `ejs.clearCache`. If you're using the
+LRU cache and need a different limit, simple reset `ejs.cache` to a new instance
+of the LRU.
+
+## Custom FileLoader
+
+The default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.
+
+```javascript
+var ejs = require('ejs');
+var myFileLoad = function (filePath) {
+  return 'myFileLoad: ' + fs.readFileSync(filePath);
+};
+
+ejs.fileLoader = myFileLoad;
+```
+
+With this feature, you can preprocess the template before reading it.
+
+## Layouts
+
+EJS does not specifically support blocks, but layouts can be implemented by
+including headers and footers, like so:
+
+
+```html
+<%- include('header') -%>
+<h1>
+  Title
+</h1>
+<p>
+  My page
+</p>
+<%- include('footer') -%>
+```
+
+## Client-side support
+
+Go to the [Latest Release](https://github.com/mde/ejs/releases/latest), download
+`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning
+the repository and running `jake build` (or `$(npm bin)/jake build` if jake is
+not installed globally).
+
+Include one of these files on your page, and `ejs` should be available globally.
+
+### Example
+
+```html
+<div id="output"></div>
+<script src="ejs.min.js"></script>
+<script>
+  var people = ['geddy', 'neil', 'alex'],
+      html = ejs.render('<%= people.join(", "); %>', {people: people});
+  // With jQuery:
+  $('#output').html(html);
+  // Vanilla JS:
+  document.getElementById('output').innerHTML = html;
+</script>
+```
+
+### Caveats
+
+Most of EJS will work as expected; however, there are a few things to note:
+
+1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.
+2. For the same reason, `include`s do not work unless you use an `IncludeCallback`. Here is an example:
+  ```javascript
+  var str = "Hello <%= include('file', {person: 'John'}); %>",
+      fn = ejs.compile(str, {client: true});
+
+  fn(data, null, function(path, d){ // IncludeCallback
+    // path -> 'file'
+    // d -> {person: 'John'}
+    // Put your code here
+    // Return the contents of file as a string
+  }); // returns rendered string
+  ```
+
+## Related projects
+
+There are a number of implementations of EJS:
+
+ * TJ's implementation, the v1 of this library: https://github.com/tj/ejs
+ * Jupiter Consulting's EJS: http://www.embeddedjs.com/
+ * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/
+ * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs
+ * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript
+
+## License
+
+Licensed under the Apache License, Version 2.0
+(<http://www.apache.org/licenses/LICENSE-2.0>)
+
+- - -
+EJS Embedded JavaScript templates copyright 2112
+mde@fleegix.org.
diff --git a/register/node_modules/ejs/ejs.js b/register/node_modules/ejs/ejs.js
new file mode 100644
index 0000000..7e6dba5
--- /dev/null
+++ b/register/node_modules/ejs/ejs.js
@@ -0,0 +1,1469 @@
+(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ejs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+'use strict';
+
+/**
+ * @file Embedded JavaScript templating engine. {@link http://ejs.co}
+ * @author Matthew Eernisse <mde@fleegix.org>
+ * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
+ * @project EJS
+ * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
+ */
+
+/**
+ * EJS internal functions.
+ *
+ * Technically this "module" lies in the same file as {@link module:ejs}, for
+ * the sake of organization all the private functions re grouped into this
+ * module.
+ *
+ * @module ejs-internal
+ * @private
+ */
+
+/**
+ * Embedded JavaScript templating engine.
+ *
+ * @module ejs
+ * @public
+ */
+
+var fs = require('fs');
+var path = require('path');
+var utils = require('./utils');
+
+var scopeOptionWarned = false;
+var _VERSION_STRING = require('../package.json').version;
+var _DEFAULT_DELIMITER = '%';
+var _DEFAULT_LOCALS_NAME = 'locals';
+var _NAME = 'ejs';
+var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
+var _OPTS = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
+  'client', '_with', 'rmWhitespace', 'strict', 'filename'];
+// We don't allow 'cache' option to be passed in the data obj
+// for the normal `render` call, but this is where Express puts it
+// so we make an exception for `renderFile`
+var _OPTS_EXPRESS = _OPTS.concat('cache');
+var _BOM = /^\uFEFF/;
+
+/**
+ * EJS template function cache. This can be a LRU object from lru-cache NPM
+ * module. By default, it is {@link module:utils.cache}, a simple in-process
+ * cache that grows continuously.
+ *
+ * @type {Cache}
+ */
+
+exports.cache = utils.cache;
+
+/**
+ * Custom file loader. Useful for template preprocessing or restricting access
+ * to a certain part of the filesystem.
+ *
+ * @type {fileLoader}
+ */
+
+exports.fileLoader = fs.readFileSync;
+
+/**
+ * Name of the object containing the locals.
+ *
+ * This variable is overridden by {@link Options}`.localsName` if it is not
+ * `undefined`.
+ *
+ * @type {String}
+ * @public
+ */
+
+exports.localsName = _DEFAULT_LOCALS_NAME;
+
+/**
+ * Get the path to the included file from the parent file path and the
+ * specified path.
+ *
+ * @param {String}  name     specified path
+ * @param {String}  filename parent file path
+ * @param {Boolean} isDir    parent file path whether is directory
+ * @return {String}
+ */
+exports.resolveInclude = function(name, filename, isDir) {
+  var dirname = path.dirname;
+  var extname = path.extname;
+  var resolve = path.resolve;
+  var includePath = resolve(isDir ? filename : dirname(filename), name);
+  var ext = extname(name);
+  if (!ext) {
+    includePath += '.ejs';
+  }
+  return includePath;
+};
+
+/**
+ * Get the path to the included file by Options
+ *
+ * @param  {String}  path    specified path
+ * @param  {Options} options compilation options
+ * @return {String}
+ */
+function getIncludePath(path, options){
+  var includePath;
+  if (path.charAt(0) == '/') {
+    includePath = exports.resolveInclude(path.replace(/^\/*/,''), options.root || '/', true);
+  }
+  else {
+    if (!options.filename) {
+      throw new Error('`include` use relative path requires the \'filename\' option.');
+    }
+    includePath = exports.resolveInclude(path, options.filename);
+  }
+  return includePath;
+}
+
+/**
+ * Get the template from a string or a file, either compiled on-the-fly or
+ * read from cache (if enabled), and cache the template if needed.
+ *
+ * If `template` is not set, the file specified in `options.filename` will be
+ * read.
+ *
+ * If `options.cache` is true, this function reads the file from
+ * `options.filename` so it must be set prior to calling this function.
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options   compilation options
+ * @param {String} [template] template source
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned.
+ * @static
+ */
+
+function handleCache(options, template) {
+  var func;
+  var filename = options.filename;
+  var hasTemplate = arguments.length > 1;
+
+  if (options.cache) {
+    if (!filename) {
+      throw new Error('cache option requires a filename');
+    }
+    func = exports.cache.get(filename);
+    if (func) {
+      return func;
+    }
+    if (!hasTemplate) {
+      template = fileLoader(filename).toString().replace(_BOM, '');
+    }
+  }
+  else if (!hasTemplate) {
+    // istanbul ignore if: should not happen at all
+    if (!filename) {
+      throw new Error('Internal EJS error: no file name or template '
+                    + 'provided');
+    }
+    template = fileLoader(filename).toString().replace(_BOM, '');
+  }
+  func = exports.compile(template, options);
+  if (options.cache) {
+    exports.cache.set(filename, func);
+  }
+  return func;
+}
+
+/**
+ * Try calling handleCache with the given options and data and call the
+ * callback with the result. If an error occurs, call the callback with
+ * the error. Used by renderFile().
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options    compilation options
+ * @param {Object} data        template data
+ * @param {RenderFileCallback} cb callback
+ * @static
+ */
+
+function tryHandleCache(options, data, cb) {
+  var result;
+  try {
+    result = handleCache(options)(data);
+  }
+  catch (err) {
+    return cb(err);
+  }
+  return cb(null, result);
+}
+
+/**
+ * fileLoader is independent
+ *
+ * @param {String} filePath ejs file path.
+ * @return {String} The contents of the specified file.
+ * @static
+ */
+
+function fileLoader(filePath){
+  return exports.fileLoader(filePath);
+}
+
+/**
+ * Get the template function.
+ *
+ * If `options.cache` is `true`, then the template is cached.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned
+ * @static
+ */
+
+function includeFile(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  opts.filename = getIncludePath(path, opts);
+  return handleCache(opts);
+}
+
+/**
+ * Get the JavaScript source of an included file.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {Object}
+ * @static
+ */
+
+function includeSource(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  var includePath;
+  var template;
+  includePath = getIncludePath(path, opts);
+  template = fileLoader(includePath).toString().replace(_BOM, '');
+  opts.filename = includePath;
+  var templ = new Template(template, opts);
+  templ.generateSource();
+  return {
+    source: templ.source,
+    filename: includePath,
+    template: template
+  };
+}
+
+/**
+ * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
+ * `lineno`.
+ *
+ * @implements RethrowCallback
+ * @memberof module:ejs-internal
+ * @param {Error}  err      Error object
+ * @param {String} str      EJS source
+ * @param {String} filename file name of the EJS file
+ * @param {String} lineno   line number of the error
+ * @static
+ */
+
+function rethrow(err, str, flnm, lineno, esc){
+  var lines = str.split('\n');
+  var start = Math.max(lineno - 3, 0);
+  var end = Math.min(lines.length, lineno + 3);
+  var filename = esc(flnm); // eslint-disable-line
+  // Error context
+  var context = lines.slice(start, end).map(function (line, i){
+    var curr = i + start + 1;
+    return (curr == lineno ? ' >> ' : '    ')
+      + curr
+      + '| '
+      + line;
+  }).join('\n');
+
+  // Alter exception message
+  err.path = filename;
+  err.message = (filename || 'ejs') + ':'
+    + lineno + '\n'
+    + context + '\n\n'
+    + err.message;
+
+  throw err;
+}
+
+function stripSemi(str){
+  return str.replace(/;(\s*$)/, '$1');
+}
+
+/**
+ * Compile the given `str` of ejs into a template function.
+ *
+ * @param {String}  template EJS template
+ *
+ * @param {Options} opts     compilation options
+ *
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `opts.client`, either type might be returned.
+ * @public
+ */
+
+exports.compile = function compile(template, opts) {
+  var templ;
+
+  // v1 compat
+  // 'scope' is 'context'
+  // FIXME: Remove this in a future version
+  if (opts && opts.scope) {
+    if (!scopeOptionWarned){
+      console.warn('`scope` option is deprecated and will be removed in EJS 3');
+      scopeOptionWarned = true;
+    }
+    if (!opts.context) {
+      opts.context = opts.scope;
+    }
+    delete opts.scope;
+  }
+  templ = new Template(template, opts);
+  return templ.compile();
+};
+
+/**
+ * Render the given `template` of ejs.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}   template EJS template
+ * @param {Object}  [data={}] template data
+ * @param {Options} [opts={}] compilation and rendering options
+ * @return {String}
+ * @public
+ */
+
+exports.render = function (template, d, o) {
+  var data = d || {};
+  var opts = o || {};
+
+  // No options object -- if there are optiony names
+  // in the data, copy them to options
+  if (arguments.length == 2) {
+    utils.shallowCopyFromList(opts, data, _OPTS);
+  }
+
+  return handleCache(opts, template)(data);
+};
+
+/**
+ * Render an EJS file at the given `path` and callback `cb(err, str)`.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}             path     path to the EJS file
+ * @param {Object}            [data={}] template data
+ * @param {Options}           [opts={}] compilation and rendering options
+ * @param {RenderFileCallback} cb callback
+ * @public
+ */
+
+exports.renderFile = function () {
+  var filename = arguments[0];
+  var cb = arguments[arguments.length - 1];
+  var opts = {filename: filename};
+  var data;
+
+  if (arguments.length > 2) {
+    data = arguments[1];
+
+    // No options object -- if there are optiony names
+    // in the data, copy them to options
+    if (arguments.length === 3) {
+      // Express 4
+      if (data.settings && data.settings['view options']) {
+        utils.shallowCopyFromList(opts, data.settings['view options'], _OPTS_EXPRESS);
+      }
+      // Express 3 and lower
+      else {
+        utils.shallowCopyFromList(opts, data, _OPTS_EXPRESS);
+      }
+    }
+    else {
+      // Use shallowCopy so we don't pollute passed in opts obj with new vals
+      utils.shallowCopy(opts, arguments[2]);
+    }
+
+    opts.filename = filename;
+  }
+  else {
+    data = {};
+  }
+
+  return tryHandleCache(opts, data, cb);
+};
+
+/**
+ * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
+ * @public
+ */
+
+exports.clearCache = function () {
+  exports.cache.reset();
+};
+
+function Template(text, opts) {
+  opts = opts || {};
+  var options = {};
+  this.templateText = text;
+  this.mode = null;
+  this.truncate = false;
+  this.currentLine = 1;
+  this.source = '';
+  this.dependencies = [];
+  options.client = opts.client || false;
+  options.escapeFunction = opts.escape || utils.escapeXML;
+  options.compileDebug = opts.compileDebug !== false;
+  options.debug = !!opts.debug;
+  options.filename = opts.filename;
+  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
+  options.strict = opts.strict || false;
+  options.context = opts.context;
+  options.cache = opts.cache || false;
+  options.rmWhitespace = opts.rmWhitespace;
+  options.root = opts.root;
+  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
+
+  if (options.strict) {
+    options._with = false;
+  }
+  else {
+    options._with = typeof opts._with != 'undefined' ? opts._with : true;
+  }
+
+  this.opts = options;
+
+  this.regex = this.createRegex();
+}
+
+Template.modes = {
+  EVAL: 'eval',
+  ESCAPED: 'escaped',
+  RAW: 'raw',
+  COMMENT: 'comment',
+  LITERAL: 'literal'
+};
+
+Template.prototype = {
+  createRegex: function () {
+    var str = _REGEX_STRING;
+    var delim = utils.escapeRegExpChars(this.opts.delimiter);
+    str = str.replace(/%/g, delim);
+    return new RegExp(str);
+  },
+
+  compile: function () {
+    var src;
+    var fn;
+    var opts = this.opts;
+    var prepended = '';
+    var appended = '';
+    var escapeFn = opts.escapeFunction;
+
+    if (!this.source) {
+      this.generateSource();
+      prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
+      if (opts._with !== false) {
+        prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
+        appended += '  }' + '\n';
+      }
+      appended += '  return __output.join("");' + '\n';
+      this.source = prepended + this.source + appended;
+    }
+
+    if (opts.compileDebug) {
+      src = 'var __line = 1' + '\n'
+          + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
+          + '  , __filename = ' + (opts.filename ?
+                JSON.stringify(opts.filename) : 'undefined') + ';' + '\n'
+          + 'try {' + '\n'
+          + this.source
+          + '} catch (e) {' + '\n'
+          + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
+          + '}' + '\n';
+    }
+    else {
+      src = this.source;
+    }
+
+    if (opts.debug) {
+      console.log(src);
+    }
+
+    if (opts.client) {
+      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
+      if (opts.compileDebug) {
+        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
+      }
+    }
+
+    if (opts.strict) {
+      src = '"use strict";\n' + src;
+    }
+
+    try {
+      fn = new Function(opts.localsName + ', escapeFn, include, rethrow', src);
+    }
+    catch(e) {
+      // istanbul ignore else
+      if (e instanceof SyntaxError) {
+        if (opts.filename) {
+          e.message += ' in ' + opts.filename;
+        }
+        e.message += ' while compiling ejs\n\n';
+        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
+        e.message += 'https://github.com/RyanZim/EJS-Lint';
+      }
+      throw e;
+    }
+
+    if (opts.client) {
+      fn.dependencies = this.dependencies;
+      return fn;
+    }
+
+    // Return a callable function which will execute the function
+    // created by the source-code, with the passed data as locals
+    // Adds a local `include` function which allows full recursive include
+    var returnedFn = function (data) {
+      var include = function (path, includeData) {
+        var d = utils.shallowCopy({}, data);
+        if (includeData) {
+          d = utils.shallowCopy(d, includeData);
+        }
+        return includeFile(path, opts)(d);
+      };
+      return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
+    };
+    returnedFn.dependencies = this.dependencies;
+    return returnedFn;
+  },
+
+  generateSource: function () {
+    var opts = this.opts;
+
+    if (opts.rmWhitespace) {
+      // Have to use two separate replace here as `^` and `$` operators don't
+      // work well with `\r`.
+      this.templateText =
+        this.templateText.replace(/\r/g, '').replace(/^\s+|\s+$/gm, '');
+    }
+
+    // Slurp spaces and tabs before <%_ and after _%>
+    this.templateText =
+      this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');
+
+    var self = this;
+    var matches = this.parseTemplateText();
+    var d = this.opts.delimiter;
+
+    if (matches && matches.length) {
+      matches.forEach(function (line, index) {
+        var opening;
+        var closing;
+        var include;
+        var includeOpts;
+        var includeObj;
+        var includeSrc;
+        // If this is an opening tag, check for closing tags
+        // FIXME: May end up with some false positives here
+        // Better to store modes as k/v with '<' + delimiter as key
+        // Then this can simply check against the map
+        if ( line.indexOf('<' + d) === 0        // If it is a tag
+          && line.indexOf('<' + d + d) !== 0) { // and is not escaped
+          closing = matches[index + 2];
+          if (!(closing == d + '>' || closing == '-' + d + '>' || closing == '_' + d + '>')) {
+            throw new Error('Could not find matching close tag for "' + line + '".');
+          }
+        }
+        // HACK: backward-compat `include` preprocessor directives
+        if ((include = line.match(/^\s*include\s+(\S+)/))) {
+          opening = matches[index - 1];
+          // Must be in EVAL or RAW mode
+          if (opening && (opening == '<' + d || opening == '<' + d + '-' || opening == '<' + d + '_')) {
+            includeOpts = utils.shallowCopy({}, self.opts);
+            includeObj = includeSource(include[1], includeOpts);
+            if (self.opts.compileDebug) {
+              includeSrc =
+                  '    ; (function(){' + '\n'
+                  + '      var __line = 1' + '\n'
+                  + '      , __lines = ' + JSON.stringify(includeObj.template) + '\n'
+                  + '      , __filename = ' + JSON.stringify(includeObj.filename) + ';' + '\n'
+                  + '      try {' + '\n'
+                  + includeObj.source
+                  + '      } catch (e) {' + '\n'
+                  + '        rethrow(e, __lines, __filename, __line);' + '\n'
+                  + '      }' + '\n'
+                  + '    ; }).call(this)' + '\n';
+            }else{
+              includeSrc = '    ; (function(){' + '\n' + includeObj.source +
+                  '    ; }).call(this)' + '\n';
+            }
+            self.source += includeSrc;
+            self.dependencies.push(exports.resolveInclude(include[1],
+                includeOpts.filename));
+            return;
+          }
+        }
+        self.scanLine(line);
+      });
+    }
+
+  },
+
+  parseTemplateText: function () {
+    var str = this.templateText;
+    var pat = this.regex;
+    var result = pat.exec(str);
+    var arr = [];
+    var firstPos;
+
+    while (result) {
+      firstPos = result.index;
+
+      if (firstPos !== 0) {
+        arr.push(str.substring(0, firstPos));
+        str = str.slice(firstPos);
+      }
+
+      arr.push(result[0]);
+      str = str.slice(result[0].length);
+      result = pat.exec(str);
+    }
+
+    if (str) {
+      arr.push(str);
+    }
+
+    return arr;
+  },
+
+  scanLine: function (line) {
+    var self = this;
+    var d = this.opts.delimiter;
+    var newLineCount = 0;
+
+    function _addOutput() {
+      if (self.truncate) {
+        // Only replace single leading linebreak in the line after
+        // -%> tag -- this is the single, trailing linebreak
+        // after the tag that the truncation mode replaces
+        // Handle Win / Unix / old Mac linebreaks -- do the \r\n
+        // combo first in the regex-or
+        line = line.replace(/^(?:\r\n|\r|\n)/, '');
+        self.truncate = false;
+      }
+      else if (self.opts.rmWhitespace) {
+        // rmWhitespace has already removed trailing spaces, just need
+        // to remove linebreaks
+        line = line.replace(/^\n/, '');
+      }
+      if (!line) {
+        return;
+      }
+
+      // Preserve literal slashes
+      line = line.replace(/\\/g, '\\\\');
+
+      // Convert linebreaks
+      line = line.replace(/\n/g, '\\n');
+      line = line.replace(/\r/g, '\\r');
+
+      // Escape double-quotes
+      // - this will be the delimiter during execution
+      line = line.replace(/"/g, '\\"');
+      self.source += '    ; __append("' + line + '")' + '\n';
+    }
+
+    newLineCount = (line.split('\n').length - 1);
+
+    switch (line) {
+    case '<' + d:
+    case '<' + d + '_':
+      this.mode = Template.modes.EVAL;
+      break;
+    case '<' + d + '=':
+      this.mode = Template.modes.ESCAPED;
+      break;
+    case '<' + d + '-':
+      this.mode = Template.modes.RAW;
+      break;
+    case '<' + d + '#':
+      this.mode = Template.modes.COMMENT;
+      break;
+    case '<' + d + d:
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace('<' + d + d, '<' + d) + '")' + '\n';
+      break;
+    case d + d + '>':
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace(d + d + '>', d + '>') + '")' + '\n';
+      break;
+    case d + '>':
+    case '-' + d + '>':
+    case '_' + d + '>':
+      if (this.mode == Template.modes.LITERAL) {
+        _addOutput();
+      }
+
+      this.mode = null;
+      this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
+      break;
+    default:
+        // In script mode, depends on type of tag
+      if (this.mode) {
+          // If '//' is found without a line break, add a line break.
+        switch (this.mode) {
+        case Template.modes.EVAL:
+        case Template.modes.ESCAPED:
+        case Template.modes.RAW:
+          if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
+            line += '\n';
+          }
+        }
+        switch (this.mode) {
+            // Just executing code
+        case Template.modes.EVAL:
+          this.source += '    ; ' + line + '\n';
+          break;
+            // Exec, esc, and output
+        case Template.modes.ESCAPED:
+          this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
+          break;
+            // Exec and output
+        case Template.modes.RAW:
+          this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
+          break;
+        case Template.modes.COMMENT:
+              // Do nothing
+          break;
+            // Literal <%% mode, append as raw output
+        case Template.modes.LITERAL:
+          _addOutput();
+          break;
+        }
+      }
+        // In string mode, just add the output
+      else {
+        _addOutput();
+      }
+    }
+
+    if (self.opts.compileDebug && newLineCount) {
+      this.currentLine += newLineCount;
+      this.source += '    ; __line = ' + this.currentLine + '\n';
+    }
+  }
+};
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * This is simply an export of {@link module:utils.escapeXML}.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @public
+ * @func
+ * */
+exports.escapeXML = utils.escapeXML;
+
+/**
+ * Express.js support.
+ *
+ * This is an alias for {@link module:ejs.renderFile}, in order to support
+ * Express.js out-of-the-box.
+ *
+ * @func
+ */
+
+exports.__express = exports.renderFile;
+
+// Add require support
+/* istanbul ignore else */
+if (require.extensions) {
+  require.extensions['.ejs'] = function (module, flnm) {
+    var filename = flnm || /* istanbul ignore next */ module.filename;
+    var options = {
+      filename: filename,
+      client: true
+    };
+    var template = fileLoader(filename).toString();
+    var fn = exports.compile(template, options);
+    module._compile('module.exports = ' + fn.toString() + ';', filename);
+  };
+}
+
+/**
+ * Version of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.VERSION = _VERSION_STRING;
+
+/**
+ * Name for detection of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.name = _NAME;
+
+/* istanbul ignore if */
+if (typeof window != 'undefined') {
+  window.ejs = exports;
+}
+
+},{"../package.json":6,"./utils":2,"fs":3,"path":4}],2:[function(require,module,exports){
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+/**
+ * Private utility functions
+ * @module utils
+ * @private
+ */
+
+'use strict';
+
+var regExpChars = /[|\\{}()[\]^$+*?.]/g;
+
+/**
+ * Escape characters reserved in regular expressions.
+ *
+ * If `string` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} string Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+exports.escapeRegExpChars = function (string) {
+  // istanbul ignore if
+  if (!string) {
+    return '';
+  }
+  return String(string).replace(regExpChars, '\\$&');
+};
+
+var _ENCODE_HTML_RULES = {
+  '&': '&amp;',
+  '<': '&lt;',
+  '>': '&gt;',
+  '"': '&#34;',
+  "'": '&#39;'
+};
+var _MATCH_HTML = /[&<>\'"]/g;
+
+function encode_char(c) {
+  return _ENCODE_HTML_RULES[c] || c;
+}
+
+/**
+ * Stringified version of constants used by {@link module:utils.escapeXML}.
+ *
+ * It is used in the process of generating {@link ClientFunction}s.
+ *
+ * @readonly
+ * @type {String}
+ */
+
+var escapeFuncStr =
+  'var _ENCODE_HTML_RULES = {\n'
++ '      "&": "&amp;"\n'
++ '    , "<": "&lt;"\n'
++ '    , ">": "&gt;"\n'
++ '    , \'"\': "&#34;"\n'
++ '    , "\'": "&#39;"\n'
++ '    }\n'
++ '  , _MATCH_HTML = /[&<>\'"]/g;\n'
++ 'function encode_char(c) {\n'
++ '  return _ENCODE_HTML_RULES[c] || c;\n'
++ '};\n';
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @implements {EscapeCallback}
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+
+exports.escapeXML = function (markup) {
+  return markup == undefined
+    ? ''
+    : String(markup)
+        .replace(_MATCH_HTML, encode_char);
+};
+exports.escapeXML.toString = function () {
+  return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
+};
+
+/**
+ * Naive copy of properties from one object to another.
+ * Does not recurse into non-scalar properties
+ * Does not check to see if the property has a value before copying
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopy = function (to, from) {
+  from = from || {};
+  for (var p in from) {
+    to[p] = from[p];
+  }
+  return to;
+};
+
+/**
+ * Naive copy of a list of key names, from one object to another.
+ * Only copies property if it is actually defined
+ * Does not recurse into non-scalar properties
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @param  {Array} list List of properties to copy
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopyFromList = function (to, from, list) {
+  for (var i = 0; i < list.length; i++) {
+    var p = list[i];
+    if (typeof from[p] != 'undefined') {
+      to[p] = from[p];
+    }
+  }
+  return to;
+};
+
+/**
+ * Simple in-process cache implementation. Does not implement limits of any
+ * sort.
+ *
+ * @implements Cache
+ * @static
+ * @private
+ */
+exports.cache = {
+  _data: {},
+  set: function (key, val) {
+    this._data[key] = val;
+  },
+  get: function (key) {
+    return this._data[key];
+  },
+  reset: function () {
+    this._data = {};
+  }
+};
+
+},{}],3:[function(require,module,exports){
+
+},{}],4:[function(require,module,exports){
+(function (process){
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+// resolves . and .. elements in a path array with directory names there
+// must be no slashes, empty elements, or device names (c:\) in the array
+// (so also no leading and trailing slashes - it does not distinguish
+// relative and absolute paths)
+function normalizeArray(parts, allowAboveRoot) {
+  // if the path tries to go above the root, `up` ends up > 0
+  var up = 0;
+  for (var i = parts.length - 1; i >= 0; i--) {
+    var last = parts[i];
+    if (last === '.') {
+      parts.splice(i, 1);
+    } else if (last === '..') {
+      parts.splice(i, 1);
+      up++;
+    } else if (up) {
+      parts.splice(i, 1);
+      up--;
+    }
+  }
+
+  // if the path is allowed to go above the root, restore leading ..s
+  if (allowAboveRoot) {
+    for (; up--; up) {
+      parts.unshift('..');
+    }
+  }
+
+  return parts;
+}
+
+// Split a filename into [root, dir, basename, ext], unix version
+// 'root' is just a slash, or nothing.
+var splitPathRe =
+    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
+var splitPath = function(filename) {
+  return splitPathRe.exec(filename).slice(1);
+};
+
+// path.resolve([from ...], to)
+// posix version
+exports.resolve = function() {
+  var resolvedPath = '',
+      resolvedAbsolute = false;
+
+  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
+    var path = (i >= 0) ? arguments[i] : process.cwd();
+
+    // Skip empty and invalid entries
+    if (typeof path !== 'string') {
+      throw new TypeError('Arguments to path.resolve must be strings');
+    } else if (!path) {
+      continue;
+    }
+
+    resolvedPath = path + '/' + resolvedPath;
+    resolvedAbsolute = path.charAt(0) === '/';
+  }
+
+  // At this point the path should be resolved to a full absolute path, but
+  // handle relative paths to be safe (might happen when process.cwd() fails)
+
+  // Normalize the path
+  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
+    return !!p;
+  }), !resolvedAbsolute).join('/');
+
+  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
+};
+
+// path.normalize(path)
+// posix version
+exports.normalize = function(path) {
+  var isAbsolute = exports.isAbsolute(path),
+      trailingSlash = substr(path, -1) === '/';
+
+  // Normalize the path
+  path = normalizeArray(filter(path.split('/'), function(p) {
+    return !!p;
+  }), !isAbsolute).join('/');
+
+  if (!path && !isAbsolute) {
+    path = '.';
+  }
+  if (path && trailingSlash) {
+    path += '/';
+  }
+
+  return (isAbsolute ? '/' : '') + path;
+};
+
+// posix version
+exports.isAbsolute = function(path) {
+  return path.charAt(0) === '/';
+};
+
+// posix version
+exports.join = function() {
+  var paths = Array.prototype.slice.call(arguments, 0);
+  return exports.normalize(filter(paths, function(p, index) {
+    if (typeof p !== 'string') {
+      throw new TypeError('Arguments to path.join must be strings');
+    }
+    return p;
+  }).join('/'));
+};
+
+
+// path.relative(from, to)
+// posix version
+exports.relative = function(from, to) {
+  from = exports.resolve(from).substr(1);
+  to = exports.resolve(to).substr(1);
+
+  function trim(arr) {
+    var start = 0;
+    for (; start < arr.length; start++) {
+      if (arr[start] !== '') break;
+    }
+
+    var end = arr.length - 1;
+    for (; end >= 0; end--) {
+      if (arr[end] !== '') break;
+    }
+
+    if (start > end) return [];
+    return arr.slice(start, end - start + 1);
+  }
+
+  var fromParts = trim(from.split('/'));
+  var toParts = trim(to.split('/'));
+
+  var length = Math.min(fromParts.length, toParts.length);
+  var samePartsLength = length;
+  for (var i = 0; i < length; i++) {
+    if (fromParts[i] !== toParts[i]) {
+      samePartsLength = i;
+      break;
+    }
+  }
+
+  var outputParts = [];
+  for (var i = samePartsLength; i < fromParts.length; i++) {
+    outputParts.push('..');
+  }
+
+  outputParts = outputParts.concat(toParts.slice(samePartsLength));
+
+  return outputParts.join('/');
+};
+
+exports.sep = '/';
+exports.delimiter = ':';
+
+exports.dirname = function(path) {
+  var result = splitPath(path),
+      root = result[0],
+      dir = result[1];
+
+  if (!root && !dir) {
+    // No dirname whatsoever
+    return '.';
+  }
+
+  if (dir) {
+    // It has a dirname, strip trailing slash
+    dir = dir.substr(0, dir.length - 1);
+  }
+
+  return root + dir;
+};
+
+
+exports.basename = function(path, ext) {
+  var f = splitPath(path)[2];
+  // TODO: make this comparison case-insensitive on windows?
+  if (ext && f.substr(-1 * ext.length) === ext) {
+    f = f.substr(0, f.length - ext.length);
+  }
+  return f;
+};
+
+
+exports.extname = function(path) {
+  return splitPath(path)[3];
+};
+
+function filter (xs, f) {
+    if (xs.filter) return xs.filter(f);
+    var res = [];
+    for (var i = 0; i < xs.length; i++) {
+        if (f(xs[i], i, xs)) res.push(xs[i]);
+    }
+    return res;
+}
+
+// String.prototype.substr - negative index don't work in IE8
+var substr = 'ab'.substr(-1) === 'b'
+    ? function (str, start, len) { return str.substr(start, len) }
+    : function (str, start, len) {
+        if (start < 0) start = str.length + start;
+        return str.substr(start, len);
+    }
+;
+
+}).call(this,require('_process'))
+},{"_process":5}],5:[function(require,module,exports){
+// shim for using process in browser
+var process = module.exports = {};
+
+// cached from whatever global is present so that test runners that stub it
+// don't break things.  But we need to wrap it in a try catch in case it is
+// wrapped in strict mode code which doesn't define any globals.  It's inside a
+// function because try/catches deoptimize in certain engines.
+
+var cachedSetTimeout;
+var cachedClearTimeout;
+
+function defaultSetTimout() {
+    throw new Error('setTimeout has not been defined');
+}
+function defaultClearTimeout () {
+    throw new Error('clearTimeout has not been defined');
+}
+(function () {
+    try {
+        if (typeof setTimeout === 'function') {
+            cachedSetTimeout = setTimeout;
+        } else {
+            cachedSetTimeout = defaultSetTimout;
+        }
+    } catch (e) {
+        cachedSetTimeout = defaultSetTimout;
+    }
+    try {
+        if (typeof clearTimeout === 'function') {
+            cachedClearTimeout = clearTimeout;
+        } else {
+            cachedClearTimeout = defaultClearTimeout;
+        }
+    } catch (e) {
+        cachedClearTimeout = defaultClearTimeout;
+    }
+} ())
+function runTimeout(fun) {
+    if (cachedSetTimeout === setTimeout) {
+        //normal enviroments in sane situations
+        return setTimeout(fun, 0);
+    }
+    // if setTimeout wasn't available but was latter defined
+    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
+        cachedSetTimeout = setTimeout;
+        return setTimeout(fun, 0);
+    }
+    try {
+        // when when somebody has screwed with setTimeout but no I.E. maddness
+        return cachedSetTimeout(fun, 0);
+    } catch(e){
+        try {
+            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
+            return cachedSetTimeout.call(null, fun, 0);
+        } catch(e){
+            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
+            return cachedSetTimeout.call(this, fun, 0);
+        }
+    }
+
+
+}
+function runClearTimeout(marker) {
+    if (cachedClearTimeout === clearTimeout) {
+        //normal enviroments in sane situations
+        return clearTimeout(marker);
+    }
+    // if clearTimeout wasn't available but was latter defined
+    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
+        cachedClearTimeout = clearTimeout;
+        return clearTimeout(marker);
+    }
+    try {
+        // when when somebody has screwed with setTimeout but no I.E. maddness
+        return cachedClearTimeout(marker);
+    } catch (e){
+        try {
+            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
+            return cachedClearTimeout.call(null, marker);
+        } catch (e){
+            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
+            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
+            return cachedClearTimeout.call(this, marker);
+        }
+    }
+
+
+
+}
+var queue = [];
+var draining = false;
+var currentQueue;
+var queueIndex = -1;
+
+function cleanUpNextTick() {
+    if (!draining || !currentQueue) {
+        return;
+    }
+    draining = false;
+    if (currentQueue.length) {
+        queue = currentQueue.concat(queue);
+    } else {
+        queueIndex = -1;
+    }
+    if (queue.length) {
+        drainQueue();
+    }
+}
+
+function drainQueue() {
+    if (draining) {
+        return;
+    }
+    var timeout = runTimeout(cleanUpNextTick);
+    draining = true;
+
+    var len = queue.length;
+    while(len) {
+        currentQueue = queue;
+        queue = [];
+        while (++queueIndex < len) {
+            if (currentQueue) {
+                currentQueue[queueIndex].run();
+            }
+        }
+        queueIndex = -1;
+        len = queue.length;
+    }
+    currentQueue = null;
+    draining = false;
+    runClearTimeout(timeout);
+}
+
+process.nextTick = function (fun) {
+    var args = new Array(arguments.length - 1);
+    if (arguments.length > 1) {
+        for (var i = 1; i < arguments.length; i++) {
+            args[i - 1] = arguments[i];
+        }
+    }
+    queue.push(new Item(fun, args));
+    if (queue.length === 1 && !draining) {
+        runTimeout(drainQueue);
+    }
+};
+
+// v8 likes predictible objects
+function Item(fun, array) {
+    this.fun = fun;
+    this.array = array;
+}
+Item.prototype.run = function () {
+    this.fun.apply(null, this.array);
+};
+process.title = 'browser';
+process.browser = true;
+process.env = {};
+process.argv = [];
+process.version = ''; // empty string to avoid regexp issues
+process.versions = {};
+
+function noop() {}
+
+process.on = noop;
+process.addListener = noop;
+process.once = noop;
+process.off = noop;
+process.removeListener = noop;
+process.removeAllListeners = noop;
+process.emit = noop;
+
+process.binding = function (name) {
+    throw new Error('process.binding is not supported');
+};
+
+process.cwd = function () { return '/' };
+process.chdir = function (dir) {
+    throw new Error('process.chdir is not supported');
+};
+process.umask = function() { return 0; };
+
+},{}],6:[function(require,module,exports){
+module.exports={
+  "name": "ejs",
+  "description": "Embedded JavaScript templates",
+  "keywords": [
+    "template",
+    "engine",
+    "ejs"
+  ],
+  "version": "2.5.5",
+  "author": "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
+  "contributors": [
+    "Timothy Gu <timothygu99@gmail.com> (https://timothygu.github.io)"
+  ],
+  "license": "Apache-2.0",
+  "main": "./lib/ejs.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/mde/ejs.git"
+  },
+  "bugs": "https://github.com/mde/ejs/issues",
+  "homepage": "https://github.com/mde/ejs",
+  "dependencies": {},
+  "devDependencies": {
+    "browserify": "^13.0.1",
+    "eslint": "^3.0.0",
+    "git-directory-deploy": "^1.5.1",
+    "istanbul": "~0.4.3",
+    "jake": "^8.0.0",
+    "jsdoc": "^3.4.0",
+    "lru-cache": "^4.0.1",
+    "mocha": "^3.0.2",
+    "uglify-js": "^2.6.2"
+  },
+  "engines": {
+    "node": ">=0.10.0"
+  },
+  "scripts": {
+    "test": "mocha",
+    "lint": "eslint \"**/*.js\" Jakefile",
+    "coverage": "istanbul cover node_modules/mocha/bin/_mocha",
+    "doc": "jake doc",
+    "devdoc": "jake doc[dev]"
+  }
+}
+
+},{}]},{},[1])(1)
+});
\ No newline at end of file
diff --git a/register/node_modules/ejs/ejs.min.js b/register/node_modules/ejs/ejs.min.js
new file mode 100644
index 0000000..559d386
--- /dev/null
+++ b/register/node_modules/ejs/ejs.min.js
@@ -0,0 +1 @@
+(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ejs=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){"use strict";var fs=require("fs");var path=require("path");var utils=require("./utils");var scopeOptionWarned=false;var _VERSION_STRING=require("../package.json").version;var _DEFAULT_DELIMITER="%";var _DEFAULT_LOCALS_NAME="locals";var _NAME="ejs";var _REGEX_STRING="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";var _OPTS=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename"];var _OPTS_EXPRESS=_OPTS.concat("cache");var _BOM=/^\uFEFF/;exports.cache=utils.cache;exports.fileLoader=fs.readFileSync;exports.localsName=_DEFAULT_LOCALS_NAME;exports.resolveInclude=function(name,filename,isDir){var dirname=path.dirname;var extname=path.extname;var resolve=path.resolve;var includePath=resolve(isDir?filename:dirname(filename),name);var ext=extname(name);if(!ext){includePath+=".ejs"}return includePath};function getIncludePath(path,options){var includePath;if(path.charAt(0)=="/"){includePath=exports.resolveInclude(path.replace(/^\/*/,""),options.root||"/",true)}else{if(!options.filename){throw new Error("`include` use relative path requires the 'filename' option.")}includePath=exports.resolveInclude(path,options.filename)}return includePath}function handleCache(options,template){var func;var filename=options.filename;var hasTemplate=arguments.length>1;if(options.cache){if(!filename){throw new Error("cache option requires a filename")}func=exports.cache.get(filename);if(func){return func}if(!hasTemplate){template=fileLoader(filename).toString().replace(_BOM,"")}}else if(!hasTemplate){if(!filename){throw new Error("Internal EJS error: no file name or template "+"provided")}template=fileLoader(filename).toString().replace(_BOM,"")}func=exports.compile(template,options);if(options.cache){exports.cache.set(filename,func)}return func}function tryHandleCache(options,data,cb){var result;try{result=handleCache(options)(data)}catch(err){return cb(err)}return cb(null,result)}function fileLoader(filePath){return exports.fileLoader(filePath)}function includeFile(path,options){var opts=utils.shallowCopy({},options);opts.filename=getIncludePath(path,opts);return handleCache(opts)}function includeSource(path,options){var opts=utils.shallowCopy({},options);var includePath;var template;includePath=getIncludePath(path,opts);template=fileLoader(includePath).toString().replace(_BOM,"");opts.filename=includePath;var templ=new Template(template,opts);templ.generateSource();return{source:templ.source,filename:includePath,template:template}}function rethrow(err,str,flnm,lineno,esc){var lines=str.split("\n");var start=Math.max(lineno-3,0);var end=Math.min(lines.length,lineno+3);var filename=esc(flnm);var context=lines.slice(start,end).map(function(line,i){var curr=i+start+1;return(curr==lineno?" >> ":"    ")+curr+"| "+line}).join("\n");err.path=filename;err.message=(filename||"ejs")+":"+lineno+"\n"+context+"\n\n"+err.message;throw err}function stripSemi(str){return str.replace(/;(\s*$)/,"$1")}exports.compile=function compile(template,opts){var templ;if(opts&&opts.scope){if(!scopeOptionWarned){console.warn("`scope` option is deprecated and will be removed in EJS 3");scopeOptionWarned=true}if(!opts.context){opts.context=opts.scope}delete opts.scope}templ=new Template(template,opts);return templ.compile()};exports.render=function(template,d,o){var data=d||{};var opts=o||{};if(arguments.length==2){utils.shallowCopyFromList(opts,data,_OPTS)}return handleCache(opts,template)(data)};exports.renderFile=function(){var filename=arguments[0];var cb=arguments[arguments.length-1];var opts={filename:filename};var data;if(arguments.length>2){data=arguments[1];if(arguments.length===3){if(data.settings&&data.settings["view options"]){utils.shallowCopyFromList(opts,data.settings["view options"],_OPTS_EXPRESS)}else{utils.shallowCopyFromList(opts,data,_OPTS_EXPRESS)}}else{utils.shallowCopy(opts,arguments[2])}opts.filename=filename}else{data={}}return tryHandleCache(opts,data,cb)};exports.clearCache=function(){exports.cache.reset()};function Template(text,opts){opts=opts||{};var options={};this.templateText=text;this.mode=null;this.truncate=false;this.currentLine=1;this.source="";this.dependencies=[];options.client=opts.client||false;options.escapeFunction=opts.escape||utils.escapeXML;options.compileDebug=opts.compileDebug!==false;options.debug=!!opts.debug;options.filename=opts.filename;options.delimiter=opts.delimiter||exports.delimiter||_DEFAULT_DELIMITER;options.strict=opts.strict||false;options.context=opts.context;options.cache=opts.cache||false;options.rmWhitespace=opts.rmWhitespace;options.root=opts.root;options.localsName=opts.localsName||exports.localsName||_DEFAULT_LOCALS_NAME;if(options.strict){options._with=false}else{options._with=typeof opts._with!="undefined"?opts._with:true}this.opts=options;this.regex=this.createRegex()}Template.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"};Template.prototype={createRegex:function(){var str=_REGEX_STRING;var delim=utils.escapeRegExpChars(this.opts.delimiter);str=str.replace(/%/g,delim);return new RegExp(str)},compile:function(){var src;var fn;var opts=this.opts;var prepended="";var appended="";var escapeFn=opts.escapeFunction;if(!this.source){this.generateSource();prepended+="  var __output = [], __append = __output.push.bind(__output);"+"\n";if(opts._with!==false){prepended+="  with ("+opts.localsName+" || {}) {"+"\n";appended+="  }"+"\n"}appended+='  return __output.join("");'+"\n";this.source=prepended+this.source+appended}if(opts.compileDebug){src="var __line = 1"+"\n"+"  , __lines = "+JSON.stringify(this.templateText)+"\n"+"  , __filename = "+(opts.filename?JSON.stringify(opts.filename):"undefined")+";"+"\n"+"try {"+"\n"+this.source+"} catch (e) {"+"\n"+"  rethrow(e, __lines, __filename, __line, escapeFn);"+"\n"+"}"+"\n"}else{src=this.source}if(opts.debug){console.log(src)}if(opts.client){src="escapeFn = escapeFn || "+escapeFn.toString()+";"+"\n"+src;if(opts.compileDebug){src="rethrow = rethrow || "+rethrow.toString()+";"+"\n"+src}}if(opts.strict){src='"use strict";\n'+src}try{fn=new Function(opts.localsName+", escapeFn, include, rethrow",src)}catch(e){if(e instanceof SyntaxError){if(opts.filename){e.message+=" in "+opts.filename}e.message+=" while compiling ejs\n\n";e.message+="If the above error is not helpful, you may want to try EJS-Lint:\n";e.message+="https://github.com/RyanZim/EJS-Lint"}throw e}if(opts.client){fn.dependencies=this.dependencies;return fn}var returnedFn=function(data){var include=function(path,includeData){var d=utils.shallowCopy({},data);if(includeData){d=utils.shallowCopy(d,includeData)}return includeFile(path,opts)(d)};return fn.apply(opts.context,[data||{},escapeFn,include,rethrow])};returnedFn.dependencies=this.dependencies;return returnedFn},generateSource:function(){var opts=this.opts;if(opts.rmWhitespace){this.templateText=this.templateText.replace(/\r/g,"").replace(/^\s+|\s+$/gm,"")}this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var self=this;var matches=this.parseTemplateText();var d=this.opts.delimiter;if(matches&&matches.length){matches.forEach(function(line,index){var opening;var closing;var include;var includeOpts;var includeObj;var includeSrc;if(line.indexOf("<"+d)===0&&line.indexOf("<"+d+d)!==0){closing=matches[index+2];if(!(closing==d+">"||closing=="-"+d+">"||closing=="_"+d+">")){throw new Error('Could not find matching close tag for "'+line+'".')}}if(include=line.match(/^\s*include\s+(\S+)/)){opening=matches[index-1];if(opening&&(opening=="<"+d||opening=="<"+d+"-"||opening=="<"+d+"_")){includeOpts=utils.shallowCopy({},self.opts);includeObj=includeSource(include[1],includeOpts);if(self.opts.compileDebug){includeSrc="    ; (function(){"+"\n"+"      var __line = 1"+"\n"+"      , __lines = "+JSON.stringify(includeObj.template)+"\n"+"      , __filename = "+JSON.stringify(includeObj.filename)+";"+"\n"+"      try {"+"\n"+includeObj.source+"      } catch (e) {"+"\n"+"        rethrow(e, __lines, __filename, __line);"+"\n"+"      }"+"\n"+"    ; }).call(this)"+"\n"}else{includeSrc="    ; (function(){"+"\n"+includeObj.source+"    ; }).call(this)"+"\n"}self.source+=includeSrc;self.dependencies.push(exports.resolveInclude(include[1],includeOpts.filename));return}}self.scanLine(line)})}},parseTemplateText:function(){var str=this.templateText;var pat=this.regex;var result=pat.exec(str);var arr=[];var firstPos;while(result){firstPos=result.index;if(firstPos!==0){arr.push(str.substring(0,firstPos));str=str.slice(firstPos)}arr.push(result[0]);str=str.slice(result[0].length);result=pat.exec(str)}if(str){arr.push(str)}return arr},scanLine:function(line){var self=this;var d=this.opts.delimiter;var newLineCount=0;function _addOutput(){if(self.truncate){line=line.replace(/^(?:\r\n|\r|\n)/,"");self.truncate=false}else if(self.opts.rmWhitespace){line=line.replace(/^\n/,"")}if(!line){return}line=line.replace(/\\/g,"\\\\");line=line.replace(/\n/g,"\\n");line=line.replace(/\r/g,"\\r");line=line.replace(/"/g,'\\"');self.source+='    ; __append("'+line+'")'+"\n"}newLineCount=line.split("\n").length-1;switch(line){case"<"+d:case"<"+d+"_":this.mode=Template.modes.EVAL;break;case"<"+d+"=":this.mode=Template.modes.ESCAPED;break;case"<"+d+"-":this.mode=Template.modes.RAW;break;case"<"+d+"#":this.mode=Template.modes.COMMENT;break;case"<"+d+d:this.mode=Template.modes.LITERAL;this.source+='    ; __append("'+line.replace("<"+d+d,"<"+d)+'")'+"\n";break;case d+d+">":this.mode=Template.modes.LITERAL;this.source+='    ; __append("'+line.replace(d+d+">",d+">")+'")'+"\n";break;case d+">":case"-"+d+">":case"_"+d+">":if(this.mode==Template.modes.LITERAL){_addOutput()}this.mode=null;this.truncate=line.indexOf("-")===0||line.indexOf("_")===0;break;default:if(this.mode){switch(this.mode){case Template.modes.EVAL:case Template.modes.ESCAPED:case Template.modes.RAW:if(line.lastIndexOf("//")>line.lastIndexOf("\n")){line+="\n"}}switch(this.mode){case Template.modes.EVAL:this.source+="    ; "+line+"\n";break;case Template.modes.ESCAPED:this.source+="    ; __append(escapeFn("+stripSemi(line)+"))"+"\n";break;case Template.modes.RAW:this.source+="    ; __append("+stripSemi(line)+")"+"\n";break;case Template.modes.COMMENT:break;case Template.modes.LITERAL:_addOutput();break}}else{_addOutput()}}if(self.opts.compileDebug&&newLineCount){this.currentLine+=newLineCount;this.source+="    ; __line = "+this.currentLine+"\n"}}};exports.escapeXML=utils.escapeXML;exports.__express=exports.renderFile;if(require.extensions){require.extensions[".ejs"]=function(module,flnm){var filename=flnm||module.filename;var options={filename:filename,client:true};var template=fileLoader(filename).toString();var fn=exports.compile(template,options);module._compile("module.exports = "+fn.toString()+";",filename)}}exports.VERSION=_VERSION_STRING;exports.name=_NAME;if(typeof window!="undefined"){window.ejs=exports}},{"../package.json":6,"./utils":2,fs:3,path:4}],2:[function(require,module,exports){"use strict";var regExpChars=/[|\\{}()[\]^$+*?.]/g;exports.escapeRegExpChars=function(string){if(!string){return""}return String(string).replace(regExpChars,"\\$&")};var _ENCODE_HTML_RULES={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"};var _MATCH_HTML=/[&<>\'"]/g;function encode_char(c){return _ENCODE_HTML_RULES[c]||c}var escapeFuncStr="var _ENCODE_HTML_RULES = {\n"+'      "&": "&amp;"\n'+'    , "<": "&lt;"\n'+'    , ">": "&gt;"\n'+'    , \'"\': "&#34;"\n'+'    , "\'": "&#39;"\n'+"    }\n"+"  , _MATCH_HTML = /[&<>'\"]/g;\n"+"function encode_char(c) {\n"+"  return _ENCODE_HTML_RULES[c] || c;\n"+"};\n";exports.escapeXML=function(markup){return markup==undefined?"":String(markup).replace(_MATCH_HTML,encode_char)};exports.escapeXML.toString=function(){return Function.prototype.toString.call(this)+";\n"+escapeFuncStr};exports.shallowCopy=function(to,from){from=from||{};for(var p in from){to[p]=from[p]}return to};exports.shallowCopyFromList=function(to,from,list){for(var i=0;i<list.length;i++){var p=list[i];if(typeof from[p]!="undefined"){to[p]=from[p]}}return to};exports.cache={_data:{},set:function(key,val){this._data[key]=val},get:function(key){return this._data[key]},reset:function(){this._data={}}}},{}],3:[function(require,module,exports){},{}],4:[function(require,module,exports){(function(process){function normalizeArray(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;var splitPath=function(filename){return splitPathRe.exec(filename).slice(1)};exports.resolve=function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){continue}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=normalizeArray(filter(resolvedPath.split("/"),function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."};exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==="/";path=normalizeArray(filter(path.split("/"),function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path};exports.isAbsolute=function(path){return path.charAt(0)==="/"};exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=="string"){throw new TypeError("Arguments to path.join must be strings")}return p}).join("/"))};exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")};exports.sep="/";exports.delimiter=":";exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir};exports.basename=function(path,ext){var f=splitPath(path)[2];if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length)}return f};exports.extname=function(path){return splitPath(path)[3]};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i])}return res}var substr="ab".substr(-1)==="b"?function(str,start,len){return str.substr(start,len)}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len)}}).call(this,require("_process"))},{_process:5}],5:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},{}],6:[function(require,module,exports){module.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"2.5.5",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",contributors:["Timothy Gu <timothygu99@gmail.com> (https://timothygu.github.io)"],license:"Apache-2.0",main:"./lib/ejs.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{},devDependencies:{browserify:"^13.0.1",eslint:"^3.0.0","git-directory-deploy":"^1.5.1",istanbul:"~0.4.3",jake:"^8.0.0",jsdoc:"^3.4.0","lru-cache":"^4.0.1",mocha:"^3.0.2","uglify-js":"^2.6.2"},engines:{node:">=0.10.0"},scripts:{test:"mocha",lint:'eslint "**/*.js" Jakefile',coverage:"istanbul cover node_modules/mocha/bin/_mocha",doc:"jake doc",devdoc:"jake doc[dev]"}}},{}]},{},[1])(1)});
diff --git a/register/node_modules/ejs/lib/ejs.js b/register/node_modules/ejs/lib/ejs.js
new file mode 100644
index 0000000..b53ee78
--- /dev/null
+++ b/register/node_modules/ejs/lib/ejs.js
@@ -0,0 +1,841 @@
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+'use strict';
+
+/**
+ * @file Embedded JavaScript templating engine. {@link http://ejs.co}
+ * @author Matthew Eernisse <mde@fleegix.org>
+ * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
+ * @project EJS
+ * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
+ */
+
+/**
+ * EJS internal functions.
+ *
+ * Technically this "module" lies in the same file as {@link module:ejs}, for
+ * the sake of organization all the private functions re grouped into this
+ * module.
+ *
+ * @module ejs-internal
+ * @private
+ */
+
+/**
+ * Embedded JavaScript templating engine.
+ *
+ * @module ejs
+ * @public
+ */
+
+var fs = require('fs');
+var path = require('path');
+var utils = require('./utils');
+
+var scopeOptionWarned = false;
+var _VERSION_STRING = require('../package.json').version;
+var _DEFAULT_DELIMITER = '%';
+var _DEFAULT_LOCALS_NAME = 'locals';
+var _NAME = 'ejs';
+var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
+var _OPTS = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
+  'client', '_with', 'rmWhitespace', 'strict', 'filename'];
+// We don't allow 'cache' option to be passed in the data obj
+// for the normal `render` call, but this is where Express puts it
+// so we make an exception for `renderFile`
+var _OPTS_EXPRESS = _OPTS.concat('cache');
+var _BOM = /^\uFEFF/;
+
+/**
+ * EJS template function cache. This can be a LRU object from lru-cache NPM
+ * module. By default, it is {@link module:utils.cache}, a simple in-process
+ * cache that grows continuously.
+ *
+ * @type {Cache}
+ */
+
+exports.cache = utils.cache;
+
+/**
+ * Custom file loader. Useful for template preprocessing or restricting access
+ * to a certain part of the filesystem.
+ *
+ * @type {fileLoader}
+ */
+
+exports.fileLoader = fs.readFileSync;
+
+/**
+ * Name of the object containing the locals.
+ *
+ * This variable is overridden by {@link Options}`.localsName` if it is not
+ * `undefined`.
+ *
+ * @type {String}
+ * @public
+ */
+
+exports.localsName = _DEFAULT_LOCALS_NAME;
+
+/**
+ * Get the path to the included file from the parent file path and the
+ * specified path.
+ *
+ * @param {String}  name     specified path
+ * @param {String}  filename parent file path
+ * @param {Boolean} isDir    parent file path whether is directory
+ * @return {String}
+ */
+exports.resolveInclude = function(name, filename, isDir) {
+  var dirname = path.dirname;
+  var extname = path.extname;
+  var resolve = path.resolve;
+  var includePath = resolve(isDir ? filename : dirname(filename), name);
+  var ext = extname(name);
+  if (!ext) {
+    includePath += '.ejs';
+  }
+  return includePath;
+};
+
+/**
+ * Get the path to the included file by Options
+ *
+ * @param  {String}  path    specified path
+ * @param  {Options} options compilation options
+ * @return {String}
+ */
+function getIncludePath(path, options){
+  var includePath;
+  if (path.charAt(0) == '/') {
+    includePath = exports.resolveInclude(path.replace(/^\/*/,''), options.root || '/', true);
+  }
+  else {
+    if (!options.filename) {
+      throw new Error('`include` use relative path requires the \'filename\' option.');
+    }
+    includePath = exports.resolveInclude(path, options.filename);
+  }
+  return includePath;
+}
+
+/**
+ * Get the template from a string or a file, either compiled on-the-fly or
+ * read from cache (if enabled), and cache the template if needed.
+ *
+ * If `template` is not set, the file specified in `options.filename` will be
+ * read.
+ *
+ * If `options.cache` is true, this function reads the file from
+ * `options.filename` so it must be set prior to calling this function.
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options   compilation options
+ * @param {String} [template] template source
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned.
+ * @static
+ */
+
+function handleCache(options, template) {
+  var func;
+  var filename = options.filename;
+  var hasTemplate = arguments.length > 1;
+
+  if (options.cache) {
+    if (!filename) {
+      throw new Error('cache option requires a filename');
+    }
+    func = exports.cache.get(filename);
+    if (func) {
+      return func;
+    }
+    if (!hasTemplate) {
+      template = fileLoader(filename).toString().replace(_BOM, '');
+    }
+  }
+  else if (!hasTemplate) {
+    // istanbul ignore if: should not happen at all
+    if (!filename) {
+      throw new Error('Internal EJS error: no file name or template '
+                    + 'provided');
+    }
+    template = fileLoader(filename).toString().replace(_BOM, '');
+  }
+  func = exports.compile(template, options);
+  if (options.cache) {
+    exports.cache.set(filename, func);
+  }
+  return func;
+}
+
+/**
+ * Try calling handleCache with the given options and data and call the
+ * callback with the result. If an error occurs, call the callback with
+ * the error. Used by renderFile().
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options    compilation options
+ * @param {Object} data        template data
+ * @param {RenderFileCallback} cb callback
+ * @static
+ */
+
+function tryHandleCache(options, data, cb) {
+  var result;
+  try {
+    result = handleCache(options)(data);
+  }
+  catch (err) {
+    return cb(err);
+  }
+  return cb(null, result);
+}
+
+/**
+ * fileLoader is independent
+ *
+ * @param {String} filePath ejs file path.
+ * @return {String} The contents of the specified file.
+ * @static
+ */
+
+function fileLoader(filePath){
+  return exports.fileLoader(filePath);
+}
+
+/**
+ * Get the template function.
+ *
+ * If `options.cache` is `true`, then the template is cached.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned
+ * @static
+ */
+
+function includeFile(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  opts.filename = getIncludePath(path, opts);
+  return handleCache(opts);
+}
+
+/**
+ * Get the JavaScript source of an included file.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {Object}
+ * @static
+ */
+
+function includeSource(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  var includePath;
+  var template;
+  includePath = getIncludePath(path, opts);
+  template = fileLoader(includePath).toString().replace(_BOM, '');
+  opts.filename = includePath;
+  var templ = new Template(template, opts);
+  templ.generateSource();
+  return {
+    source: templ.source,
+    filename: includePath,
+    template: template
+  };
+}
+
+/**
+ * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
+ * `lineno`.
+ *
+ * @implements RethrowCallback
+ * @memberof module:ejs-internal
+ * @param {Error}  err      Error object
+ * @param {String} str      EJS source
+ * @param {String} filename file name of the EJS file
+ * @param {String} lineno   line number of the error
+ * @static
+ */
+
+function rethrow(err, str, flnm, lineno, esc){
+  var lines = str.split('\n');
+  var start = Math.max(lineno - 3, 0);
+  var end = Math.min(lines.length, lineno + 3);
+  var filename = esc(flnm); // eslint-disable-line
+  // Error context
+  var context = lines.slice(start, end).map(function (line, i){
+    var curr = i + start + 1;
+    return (curr == lineno ? ' >> ' : '    ')
+      + curr
+      + '| '
+      + line;
+  }).join('\n');
+
+  // Alter exception message
+  err.path = filename;
+  err.message = (filename || 'ejs') + ':'
+    + lineno + '\n'
+    + context + '\n\n'
+    + err.message;
+
+  throw err;
+}
+
+function stripSemi(str){
+  return str.replace(/;(\s*$)/, '$1');
+}
+
+/**
+ * Compile the given `str` of ejs into a template function.
+ *
+ * @param {String}  template EJS template
+ *
+ * @param {Options} opts     compilation options
+ *
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `opts.client`, either type might be returned.
+ * @public
+ */
+
+exports.compile = function compile(template, opts) {
+  var templ;
+
+  // v1 compat
+  // 'scope' is 'context'
+  // FIXME: Remove this in a future version
+  if (opts && opts.scope) {
+    if (!scopeOptionWarned){
+      console.warn('`scope` option is deprecated and will be removed in EJS 3');
+      scopeOptionWarned = true;
+    }
+    if (!opts.context) {
+      opts.context = opts.scope;
+    }
+    delete opts.scope;
+  }
+  templ = new Template(template, opts);
+  return templ.compile();
+};
+
+/**
+ * Render the given `template` of ejs.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}   template EJS template
+ * @param {Object}  [data={}] template data
+ * @param {Options} [opts={}] compilation and rendering options
+ * @return {String}
+ * @public
+ */
+
+exports.render = function (template, d, o) {
+  var data = d || {};
+  var opts = o || {};
+
+  // No options object -- if there are optiony names
+  // in the data, copy them to options
+  if (arguments.length == 2) {
+    utils.shallowCopyFromList(opts, data, _OPTS);
+  }
+
+  return handleCache(opts, template)(data);
+};
+
+/**
+ * Render an EJS file at the given `path` and callback `cb(err, str)`.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}             path     path to the EJS file
+ * @param {Object}            [data={}] template data
+ * @param {Options}           [opts={}] compilation and rendering options
+ * @param {RenderFileCallback} cb callback
+ * @public
+ */
+
+exports.renderFile = function () {
+  var filename = arguments[0];
+  var cb = arguments[arguments.length - 1];
+  var opts = {filename: filename};
+  var data;
+
+  if (arguments.length > 2) {
+    data = arguments[1];
+
+    // No options object -- if there are optiony names
+    // in the data, copy them to options
+    if (arguments.length === 3) {
+      // Express 4
+      if (data.settings && data.settings['view options']) {
+        utils.shallowCopyFromList(opts, data.settings['view options'], _OPTS_EXPRESS);
+      }
+      // Express 3 and lower
+      else {
+        utils.shallowCopyFromList(opts, data, _OPTS_EXPRESS);
+      }
+    }
+    else {
+      // Use shallowCopy so we don't pollute passed in opts obj with new vals
+      utils.shallowCopy(opts, arguments[2]);
+    }
+
+    opts.filename = filename;
+  }
+  else {
+    data = {};
+  }
+
+  return tryHandleCache(opts, data, cb);
+};
+
+/**
+ * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
+ * @public
+ */
+
+exports.clearCache = function () {
+  exports.cache.reset();
+};
+
+function Template(text, opts) {
+  opts = opts || {};
+  var options = {};
+  this.templateText = text;
+  this.mode = null;
+  this.truncate = false;
+  this.currentLine = 1;
+  this.source = '';
+  this.dependencies = [];
+  options.client = opts.client || false;
+  options.escapeFunction = opts.escape || utils.escapeXML;
+  options.compileDebug = opts.compileDebug !== false;
+  options.debug = !!opts.debug;
+  options.filename = opts.filename;
+  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
+  options.strict = opts.strict || false;
+  options.context = opts.context;
+  options.cache = opts.cache || false;
+  options.rmWhitespace = opts.rmWhitespace;
+  options.root = opts.root;
+  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
+
+  if (options.strict) {
+    options._with = false;
+  }
+  else {
+    options._with = typeof opts._with != 'undefined' ? opts._with : true;
+  }
+
+  this.opts = options;
+
+  this.regex = this.createRegex();
+}
+
+Template.modes = {
+  EVAL: 'eval',
+  ESCAPED: 'escaped',
+  RAW: 'raw',
+  COMMENT: 'comment',
+  LITERAL: 'literal'
+};
+
+Template.prototype = {
+  createRegex: function () {
+    var str = _REGEX_STRING;
+    var delim = utils.escapeRegExpChars(this.opts.delimiter);
+    str = str.replace(/%/g, delim);
+    return new RegExp(str);
+  },
+
+  compile: function () {
+    var src;
+    var fn;
+    var opts = this.opts;
+    var prepended = '';
+    var appended = '';
+    var escapeFn = opts.escapeFunction;
+
+    if (!this.source) {
+      this.generateSource();
+      prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
+      if (opts._with !== false) {
+        prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
+        appended += '  }' + '\n';
+      }
+      appended += '  return __output.join("");' + '\n';
+      this.source = prepended + this.source + appended;
+    }
+
+    if (opts.compileDebug) {
+      src = 'var __line = 1' + '\n'
+          + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
+          + '  , __filename = ' + (opts.filename ?
+                JSON.stringify(opts.filename) : 'undefined') + ';' + '\n'
+          + 'try {' + '\n'
+          + this.source
+          + '} catch (e) {' + '\n'
+          + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
+          + '}' + '\n';
+    }
+    else {
+      src = this.source;
+    }
+
+    if (opts.debug) {
+      console.log(src);
+    }
+
+    if (opts.client) {
+      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
+      if (opts.compileDebug) {
+        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
+      }
+    }
+
+    if (opts.strict) {
+      src = '"use strict";\n' + src;
+    }
+
+    try {
+      fn = new Function(opts.localsName + ', escapeFn, include, rethrow', src);
+    }
+    catch(e) {
+      // istanbul ignore else
+      if (e instanceof SyntaxError) {
+        if (opts.filename) {
+          e.message += ' in ' + opts.filename;
+        }
+        e.message += ' while compiling ejs\n\n';
+        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
+        e.message += 'https://github.com/RyanZim/EJS-Lint';
+      }
+      throw e;
+    }
+
+    if (opts.client) {
+      fn.dependencies = this.dependencies;
+      return fn;
+    }
+
+    // Return a callable function which will execute the function
+    // created by the source-code, with the passed data as locals
+    // Adds a local `include` function which allows full recursive include
+    var returnedFn = function (data) {
+      var include = function (path, includeData) {
+        var d = utils.shallowCopy({}, data);
+        if (includeData) {
+          d = utils.shallowCopy(d, includeData);
+        }
+        return includeFile(path, opts)(d);
+      };
+      return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
+    };
+    returnedFn.dependencies = this.dependencies;
+    return returnedFn;
+  },
+
+  generateSource: function () {
+    var opts = this.opts;
+
+    if (opts.rmWhitespace) {
+      // Have to use two separate replace here as `^` and `$` operators don't
+      // work well with `\r`.
+      this.templateText =
+        this.templateText.replace(/\r/g, '').replace(/^\s+|\s+$/gm, '');
+    }
+
+    // Slurp spaces and tabs before <%_ and after _%>
+    this.templateText =
+      this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');
+
+    var self = this;
+    var matches = this.parseTemplateText();
+    var d = this.opts.delimiter;
+
+    if (matches && matches.length) {
+      matches.forEach(function (line, index) {
+        var opening;
+        var closing;
+        var include;
+        var includeOpts;
+        var includeObj;
+        var includeSrc;
+        // If this is an opening tag, check for closing tags
+        // FIXME: May end up with some false positives here
+        // Better to store modes as k/v with '<' + delimiter as key
+        // Then this can simply check against the map
+        if ( line.indexOf('<' + d) === 0        // If it is a tag
+          && line.indexOf('<' + d + d) !== 0) { // and is not escaped
+          closing = matches[index + 2];
+          if (!(closing == d + '>' || closing == '-' + d + '>' || closing == '_' + d + '>')) {
+            throw new Error('Could not find matching close tag for "' + line + '".');
+          }
+        }
+        // HACK: backward-compat `include` preprocessor directives
+        if ((include = line.match(/^\s*include\s+(\S+)/))) {
+          opening = matches[index - 1];
+          // Must be in EVAL or RAW mode
+          if (opening && (opening == '<' + d || opening == '<' + d + '-' || opening == '<' + d + '_')) {
+            includeOpts = utils.shallowCopy({}, self.opts);
+            includeObj = includeSource(include[1], includeOpts);
+            if (self.opts.compileDebug) {
+              includeSrc =
+                  '    ; (function(){' + '\n'
+                  + '      var __line = 1' + '\n'
+                  + '      , __lines = ' + JSON.stringify(includeObj.template) + '\n'
+                  + '      , __filename = ' + JSON.stringify(includeObj.filename) + ';' + '\n'
+                  + '      try {' + '\n'
+                  + includeObj.source
+                  + '      } catch (e) {' + '\n'
+                  + '        rethrow(e, __lines, __filename, __line);' + '\n'
+                  + '      }' + '\n'
+                  + '    ; }).call(this)' + '\n';
+            }else{
+              includeSrc = '    ; (function(){' + '\n' + includeObj.source +
+                  '    ; }).call(this)' + '\n';
+            }
+            self.source += includeSrc;
+            self.dependencies.push(exports.resolveInclude(include[1],
+                includeOpts.filename));
+            return;
+          }
+        }
+        self.scanLine(line);
+      });
+    }
+
+  },
+
+  parseTemplateText: function () {
+    var str = this.templateText;
+    var pat = this.regex;
+    var result = pat.exec(str);
+    var arr = [];
+    var firstPos;
+
+    while (result) {
+      firstPos = result.index;
+
+      if (firstPos !== 0) {
+        arr.push(str.substring(0, firstPos));
+        str = str.slice(firstPos);
+      }
+
+      arr.push(result[0]);
+      str = str.slice(result[0].length);
+      result = pat.exec(str);
+    }
+
+    if (str) {
+      arr.push(str);
+    }
+
+    return arr;
+  },
+
+  scanLine: function (line) {
+    var self = this;
+    var d = this.opts.delimiter;
+    var newLineCount = 0;
+
+    function _addOutput() {
+      if (self.truncate) {
+        // Only replace single leading linebreak in the line after
+        // -%> tag -- this is the single, trailing linebreak
+        // after the tag that the truncation mode replaces
+        // Handle Win / Unix / old Mac linebreaks -- do the \r\n
+        // combo first in the regex-or
+        line = line.replace(/^(?:\r\n|\r|\n)/, '');
+        self.truncate = false;
+      }
+      else if (self.opts.rmWhitespace) {
+        // rmWhitespace has already removed trailing spaces, just need
+        // to remove linebreaks
+        line = line.replace(/^\n/, '');
+      }
+      if (!line) {
+        return;
+      }
+
+      // Preserve literal slashes
+      line = line.replace(/\\/g, '\\\\');
+
+      // Convert linebreaks
+      line = line.replace(/\n/g, '\\n');
+      line = line.replace(/\r/g, '\\r');
+
+      // Escape double-quotes
+      // - this will be the delimiter during execution
+      line = line.replace(/"/g, '\\"');
+      self.source += '    ; __append("' + line + '")' + '\n';
+    }
+
+    newLineCount = (line.split('\n').length - 1);
+
+    switch (line) {
+    case '<' + d:
+    case '<' + d + '_':
+      this.mode = Template.modes.EVAL;
+      break;
+    case '<' + d + '=':
+      this.mode = Template.modes.ESCAPED;
+      break;
+    case '<' + d + '-':
+      this.mode = Template.modes.RAW;
+      break;
+    case '<' + d + '#':
+      this.mode = Template.modes.COMMENT;
+      break;
+    case '<' + d + d:
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace('<' + d + d, '<' + d) + '")' + '\n';
+      break;
+    case d + d + '>':
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace(d + d + '>', d + '>') + '")' + '\n';
+      break;
+    case d + '>':
+    case '-' + d + '>':
+    case '_' + d + '>':
+      if (this.mode == Template.modes.LITERAL) {
+        _addOutput();
+      }
+
+      this.mode = null;
+      this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
+      break;
+    default:
+        // In script mode, depends on type of tag
+      if (this.mode) {
+          // If '//' is found without a line break, add a line break.
+        switch (this.mode) {
+        case Template.modes.EVAL:
+        case Template.modes.ESCAPED:
+        case Template.modes.RAW:
+          if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
+            line += '\n';
+          }
+        }
+        switch (this.mode) {
+            // Just executing code
+        case Template.modes.EVAL:
+          this.source += '    ; ' + line + '\n';
+          break;
+            // Exec, esc, and output
+        case Template.modes.ESCAPED:
+          this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
+          break;
+            // Exec and output
+        case Template.modes.RAW:
+          this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
+          break;
+        case Template.modes.COMMENT:
+              // Do nothing
+          break;
+            // Literal <%% mode, append as raw output
+        case Template.modes.LITERAL:
+          _addOutput();
+          break;
+        }
+      }
+        // In string mode, just add the output
+      else {
+        _addOutput();
+      }
+    }
+
+    if (self.opts.compileDebug && newLineCount) {
+      this.currentLine += newLineCount;
+      this.source += '    ; __line = ' + this.currentLine + '\n';
+    }
+  }
+};
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * This is simply an export of {@link module:utils.escapeXML}.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @public
+ * @func
+ * */
+exports.escapeXML = utils.escapeXML;
+
+/**
+ * Express.js support.
+ *
+ * This is an alias for {@link module:ejs.renderFile}, in order to support
+ * Express.js out-of-the-box.
+ *
+ * @func
+ */
+
+exports.__express = exports.renderFile;
+
+// Add require support
+/* istanbul ignore else */
+if (require.extensions) {
+  require.extensions['.ejs'] = function (module, flnm) {
+    var filename = flnm || /* istanbul ignore next */ module.filename;
+    var options = {
+      filename: filename,
+      client: true
+    };
+    var template = fileLoader(filename).toString();
+    var fn = exports.compile(template, options);
+    module._compile('module.exports = ' + fn.toString() + ';', filename);
+  };
+}
+
+/**
+ * Version of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.VERSION = _VERSION_STRING;
+
+/**
+ * Name for detection of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.name = _NAME;
+
+/* istanbul ignore if */
+if (typeof window != 'undefined') {
+  window.ejs = exports;
+}
diff --git a/register/node_modules/ejs/lib/utils.js b/register/node_modules/ejs/lib/utils.js
new file mode 100644
index 0000000..1b539da
--- /dev/null
+++ b/register/node_modules/ejs/lib/utils.js
@@ -0,0 +1,164 @@
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+/**
+ * Private utility functions
+ * @module utils
+ * @private
+ */
+
+'use strict';
+
+var regExpChars = /[|\\{}()[\]^$+*?.]/g;
+
+/**
+ * Escape characters reserved in regular expressions.
+ *
+ * If `string` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} string Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+exports.escapeRegExpChars = function (string) {
+  // istanbul ignore if
+  if (!string) {
+    return '';
+  }
+  return String(string).replace(regExpChars, '\\$&');
+};
+
+var _ENCODE_HTML_RULES = {
+  '&': '&amp;',
+  '<': '&lt;',
+  '>': '&gt;',
+  '"': '&#34;',
+  "'": '&#39;'
+};
+var _MATCH_HTML = /[&<>\'"]/g;
+
+function encode_char(c) {
+  return _ENCODE_HTML_RULES[c] || c;
+}
+
+/**
+ * Stringified version of constants used by {@link module:utils.escapeXML}.
+ *
+ * It is used in the process of generating {@link ClientFunction}s.
+ *
+ * @readonly
+ * @type {String}
+ */
+
+var escapeFuncStr =
+  'var _ENCODE_HTML_RULES = {\n'
++ '      "&": "&amp;"\n'
++ '    , "<": "&lt;"\n'
++ '    , ">": "&gt;"\n'
++ '    , \'"\': "&#34;"\n'
++ '    , "\'": "&#39;"\n'
++ '    }\n'
++ '  , _MATCH_HTML = /[&<>\'"]/g;\n'
++ 'function encode_char(c) {\n'
++ '  return _ENCODE_HTML_RULES[c] || c;\n'
++ '};\n';
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @implements {EscapeCallback}
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+
+exports.escapeXML = function (markup) {
+  return markup == undefined
+    ? ''
+    : String(markup)
+        .replace(_MATCH_HTML, encode_char);
+};
+exports.escapeXML.toString = function () {
+  return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
+};
+
+/**
+ * Naive copy of properties from one object to another.
+ * Does not recurse into non-scalar properties
+ * Does not check to see if the property has a value before copying
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopy = function (to, from) {
+  from = from || {};
+  for (var p in from) {
+    to[p] = from[p];
+  }
+  return to;
+};
+
+/**
+ * Naive copy of a list of key names, from one object to another.
+ * Only copies property if it is actually defined
+ * Does not recurse into non-scalar properties
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @param  {Array} list List of properties to copy
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopyFromList = function (to, from, list) {
+  for (var i = 0; i < list.length; i++) {
+    var p = list[i];
+    if (typeof from[p] != 'undefined') {
+      to[p] = from[p];
+    }
+  }
+  return to;
+};
+
+/**
+ * Simple in-process cache implementation. Does not implement limits of any
+ * sort.
+ *
+ * @implements Cache
+ * @static
+ * @private
+ */
+exports.cache = {
+  _data: {},
+  set: function (key, val) {
+    this._data[key] = val;
+  },
+  get: function (key) {
+    return this._data[key];
+  },
+  reset: function () {
+    this._data = {};
+  }
+};
diff --git a/register/node_modules/ejs/package.json b/register/node_modules/ejs/package.json
new file mode 100644
index 0000000..cd84a23
--- /dev/null
+++ b/register/node_modules/ejs/package.json
@@ -0,0 +1,60 @@
+{
+  "name": "ejs",
+  "description": "Embedded JavaScript templates",
+  "keywords": [
+    "template",
+    "engine",
+    "ejs"
+  ],
+  "version": "2.5.6",
+  "author": {
+    "name": "Matthew Eernisse",
+    "email": "mde@fleegix.org",
+    "url": "http://fleegix.org"
+  },
+  "contributors": [
+    {
+      "name": "Timothy Gu",
+      "email": "timothygu99@gmail.com",
+      "url": "https://timothygu.github.io"
+    }
+  ],
+  "license": "Apache-2.0",
+  "main": "./lib/ejs.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/mde/ejs.git"
+  },
+  "bugs": {
+    "url": "https://github.com/mde/ejs/issues"
+  },
+  "homepage": "https://github.com/mde/ejs",
+  "dependencies": {},
+  "devDependencies": {
+    "browserify": "^13.0.1",
+    "eslint": "^3.0.0",
+    "git-directory-deploy": "^1.5.1",
+    "istanbul": "~0.4.3",
+    "jake": "^8.0.0",
+    "jsdoc": "^3.4.0",
+    "lru-cache": "^4.0.1",
+    "mocha": "^3.0.2",
+    "uglify-js": "^2.6.2"
+  },
+  "engines": {
+    "node": ">=0.10.0"
+  },
+  "scripts": {
+    "test": "mocha",
+    "lint": "eslint \"**/*.js\" Jakefile",
+    "coverage": "istanbul cover node_modules/mocha/bin/_mocha",
+    "doc": "jake doc",
+    "devdoc": "jake doc[dev]"
+  },
+  "readme": "# EJS\n\nEmbedded JavaScript templates\n\n[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)\n[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)\n\n## Installation\n\n```bash\n$ npm install ejs\n```\n\n## Features\n\n  * Control flow with `<% %>`\n  * Escaped output with `<%= %>` (escape function configurable)\n  * Unescaped raw output with `<%- %>`\n  * Newline-trim mode ('newline slurping') with `-%>` ending tag\n  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`\n  * Custom delimiters (e.g., use `<? ?>` instead of `<% %>`)\n  * Includes\n  * Client-side support\n  * Static caching of intermediate JavaScript\n  * Static caching of templates\n  * Complies with the [Express](http://expressjs.com) view system\n\n## Example\n\n```html\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n```\n\nTry EJS online at: https://ionicabizau.github.io/ejs-playground/.\n\n## Usage\n\n```javascript\nvar template = ejs.compile(str, options);\ntemplate(data);\n// => Rendered HTML string\n\nejs.render(str, data, options);\n// => Rendered HTML string\n\nejs.renderFile(filename, data, options, function(err, str){\n    // str => Rendered HTML string\n});\n```\n\nIt is also possible to use `ejs.render(dataAndOptions);` where you pass\neverything in a single object. In that case, you'll end up with local variables\nfor all the passed options. However, be aware that your code could break if we\nadd an option with the same name as one of your data object's properties.\nTherefore, we do not recommend using this shortcut.\n\n## Options\n\n  - `cache`           Compiled functions are cached, requires `filename`\n  - `filename`        The name of the file being rendered. Not required if you\n    are using `renderFile()`. Used by `cache` to key caches, and for includes.\n  - `root`            Set project root for includes with an absolute path (/file.ejs).\n  - `context`         Function execution context\n  - `compileDebug`    When `false` no debug instrumentation is compiled\n  - `client`          When `true`, compiles a function that can be rendered\n    in the browser without needing to load the EJS Runtime\n    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).\n  - `delimiter`       Character to use with angle brackets for open/close\n  - `debug`           Output generated function body\n  - `strict`          When set to `true`, generated function is in strict mode\n  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object. Set to `false` in strict mode.\n  - `localsName`      Name to use for the object storing local variables when not using `with` Defaults to `locals`\n  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading\n    and trailing whitespace. It also enables a safer version of `-%>` line\n    slurping for all scriptlet tags (it does not strip new lines of tags in\n    the middle of a line).\n  - `escape`          The escaping function used with `<%=` construct. It is\n    used in rendering and is `.toString()`ed in the generation of client functions. (By default escapes XML).\n\nThis project uses [JSDoc](http://usejsdoc.org/). For the full public API\ndocumentation, clone the repository and run `npm run doc`. This will run JSDoc\nwith the proper options and output the documentation to `out/`. If you want\nthe both the public & private API docs, run `npm run devdoc` instead.\n\n## Tags\n\n  - `<%`              'Scriptlet' tag, for control-flow, no output\n  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it\n  - `<%=`             Outputs the value into the template (escaped)\n  - `<%-`             Outputs the unescaped value into the template\n  - `<%#`             Comment tag, no execution, no output\n  - `<%%`             Outputs a literal '<%'\n  - `%%>`             Outputs a literal '%>'\n  - `%>`              Plain ending tag\n  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline\n  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it\n\nFor the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).\n\n## Includes\n\nIncludes either have to be an absolute path, or, if not, are assumed as\nrelative to the template with the `include` call. For example if you are\nincluding `./views/user/show.ejs` from `./views/users.ejs` you would\nuse `<%- include('user/show') %>`.\n\nYou must specify the `filename` option for the template with the `include`\ncall unless you are using `renderFile()`.\n\nYou'll likely want to use the raw output tag (`<%-`) with your include to avoid\ndouble-escaping the HTML output.\n\n```html\n<ul>\n  <% users.forEach(function(user){ %>\n    <%- include('user/show', {user: user}) %>\n  <% }); %>\n</ul>\n```\n\nIncludes are inserted at runtime, so you can use variables for the path in the\n`include` call (for example `<%- include(somePath) %>`). Variables in your\ntop-level data object are available to all your includes, but local variables\nneed to be passed down.\n\nNOTE: Include preprocessor directives (`<% include user/show %>`) are\nstill supported.\n\n## Custom delimiters\n\nCustom delimiters can be applied on a per-template basis, or globally:\n\n```javascript\nvar ejs = require('ejs'),\n    users = ['geddy', 'neil', 'alex'];\n\n// Just one template\nejs.render('<?= users.join(\" | \"); ?>', {users: users}, {delimiter: '?'});\n// => 'geddy | neil | alex'\n\n// Or globally\nejs.delimiter = '$';\nejs.render('<$= users.join(\" | \"); $>', {users: users});\n// => 'geddy | neil | alex'\n```\n\n## Caching\n\nEJS ships with a basic in-process cache for caching the intermediate JavaScript\nfunctions used to render templates. It's easy to plug in LRU caching using\nNode's `lru-cache` library:\n\n```javascript\nvar ejs = require('ejs')\n  , LRU = require('lru-cache');\nejs.cache = LRU(100); // LRU cache with 100-item limit\n```\n\nIf you want to clear the EJS cache, call `ejs.clearCache`. If you're using the\nLRU cache and need a different limit, simple reset `ejs.cache` to a new instance\nof the LRU.\n\n## Custom FileLoader\n\nThe default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.\n\n```javascript\nvar ejs = require('ejs');\nvar myFileLoad = function (filePath) {\n  return 'myFileLoad: ' + fs.readFileSync(filePath);\n};\n\nejs.fileLoader = myFileLoad;\n```\n\nWith this feature, you can preprocess the template before reading it.\n\n## Layouts\n\nEJS does not specifically support blocks, but layouts can be implemented by\nincluding headers and footers, like so:\n\n\n```html\n<%- include('header') -%>\n<h1>\n  Title\n</h1>\n<p>\n  My page\n</p>\n<%- include('footer') -%>\n```\n\n## Client-side support\n\nGo to the [Latest Release](https://github.com/mde/ejs/releases/latest), download\n`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning\nthe repository and running `jake build` (or `$(npm bin)/jake build` if jake is\nnot installed globally).\n\nInclude one of these files on your page, and `ejs` should be available globally.\n\n### Example\n\n```html\n<div id=\"output\"></div>\n<script src=\"ejs.min.js\"></script>\n<script>\n  var people = ['geddy', 'neil', 'alex'],\n      html = ejs.render('<%= people.join(\", \"); %>', {people: people});\n  // With jQuery:\n  $('#output').html(html);\n  // Vanilla JS:\n  document.getElementById('output').innerHTML = html;\n</script>\n```\n\n### Caveats\n\nMost of EJS will work as expected; however, there are a few things to note:\n\n1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.\n2. For the same reason, `include`s do not work unless you use an `IncludeCallback`. Here is an example:\n  ```javascript\n  var str = \"Hello <%= include('file', {person: 'John'}); %>\",\n      fn = ejs.compile(str, {client: true});\n\n  fn(data, null, function(path, d){ // IncludeCallback\n    // path -> 'file'\n    // d -> {person: 'John'}\n    // Put your code here\n    // Return the contents of file as a string\n  }); // returns rendered string\n  ```\n\n## Related projects\n\nThere are a number of implementations of EJS:\n\n * TJ's implementation, the v1 of this library: https://github.com/tj/ejs\n * Jupiter Consulting's EJS: http://www.embeddedjs.com/\n * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/\n * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs\n * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript\n\n## License\n\nLicensed under the Apache License, Version 2.0\n(<http://www.apache.org/licenses/LICENSE-2.0>)\n\n- - -\nEJS Embedded JavaScript templates copyright 2112\nmde@fleegix.org.\n",
+  "readmeFilename": "README.md",
+  "_id": "ejs@2.5.6",
+  "_shasum": "479636bfa3fe3b1debd52087f0acb204b4f19c88",
+  "_from": "ejs@^2.5.6",
+  "_resolved": "https://registry.npmjs.org/ejs/-/ejs-2.5.6.tgz"
+}
diff --git a/register/node_modules/ejs/test/ejs.js b/register/node_modules/ejs/test/ejs.js
new file mode 100644
index 0000000..8960a1e
--- /dev/null
+++ b/register/node_modules/ejs/test/ejs.js
@@ -0,0 +1,1039 @@
+/* jshint mocha: true */
+/* eslint-env node, mocha */
+
+/**
+ * Module dependencies.
+ */
+
+var ejs = require('..');
+var fs = require('fs');
+var read = fs.readFileSync;
+var assert = require('assert');
+var path = require('path');
+var LRU = require('lru-cache');
+
+try {
+  fs.mkdirSync(__dirname + '/tmp');
+} catch (ex) {
+  if (ex.code !== 'EEXIST') {
+    throw ex;
+  }
+}
+
+// From https://gist.github.com/pguillory/729616
+function hook_stdio(stream, callback) {
+  var old_write = stream.write;
+
+  stream.write = (function() {
+    return function(string, encoding, fd) {
+      callback(string, encoding, fd);
+    };
+  })(stream.write);
+
+  return function() {
+    stream.write = old_write;
+  };
+}
+
+/**
+ * Load fixture `name`.
+ */
+
+function fixture(name) {
+  return read('test/fixtures/' + name, 'utf8');
+}
+
+/**
+ * User fixtures.
+ */
+
+var users = [];
+users.push({name: 'geddy'});
+users.push({name: 'neil'});
+users.push({name: 'alex'});
+
+suite('ejs.compile(str, options)', function () {
+  test('compile to a function', function () {
+    var fn = ejs.compile('<p>yay</p>');
+    assert.equal(fn(), '<p>yay</p>');
+  });
+
+  test('empty input works', function () {
+    var fn = ejs.compile('');
+    assert.equal(fn(), '');
+  });
+
+  test('throw if there are syntax errors', function () {
+    try {
+      ejs.compile(fixture('fail.ejs'));
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('compiling ejs') > -1);
+
+      try {
+        ejs.compile(fixture('fail.ejs'), {filename: 'fail.ejs'});
+      }
+      catch (err) {
+        assert.ok(err.message.indexOf('fail.ejs') > -1);
+        return;
+      }
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('allow customizing delimiter local var', function () {
+    var fn;
+    fn = ejs.compile('<p><?= name ?></p>', {delimiter: '?'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><:= name :></p>', {delimiter: ':'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><$= name $></p>', {delimiter: '$'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+  });
+
+  test('default to using ejs.delimiter', function () {
+    var fn;
+    ejs.delimiter = '&';
+    fn = ejs.compile('<p><&= name &></p>');
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><|= name |></p>', {delimiter: '|'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+    delete ejs.delimiter;
+  });
+
+  test('support custom escape function', function () {
+    var customEscape;
+    var fn;
+    customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+    fn = ejs.compile('HELLO <%= name %>', {escape: customEscape});
+    assert.equal(fn({name: 'world'}), 'HELLO WORLD');
+  });
+
+  test('strict mode works', function () {
+    assert.equal(ejs.render(fixture('strict.ejs'), {}, {strict: true}), 'true');
+  });
+
+});
+
+suite('client mode', function () {
+
+  test('have a working client option', function () {
+    var fn;
+    var str;
+    var preFn;
+    fn = ejs.compile('<p><%= foo %></p>', {client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn({foo: 'bar'}), '<p>bar</p>');
+    }
+  });
+
+  test('support client mode without locals', function () {
+    var fn;
+    var str;
+    var preFn;
+    fn = ejs.compile('<p><%= "foo" %></p>', {client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn(), '<p>foo</p>');
+    }
+  });
+
+  test('not include rethrow() in client mode if compileDebug is false', function () {
+    var fn = ejs.compile('<p><%= "foo" %></p>', {
+      client: true,
+      compileDebug: false
+    });
+    // There could be a `rethrow` in the function declaration
+    assert((fn.toString().match(/rethrow/g) || []).length <= 1);
+  });
+
+  test('support custom escape function in client mode', function () {
+    var customEscape;
+    var fn;
+    var str;
+    customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+    fn = ejs.compile('HELLO <%= name %>', {escape: customEscape, client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn({name: 'world'}), 'HELLO WORLD'); // eslint-disable-line no-undef
+    }
+  });
+
+  test('escape filename in errors in client mode', function () {
+    assert.throws(function () {
+      var fn = ejs.compile('<% throw new Error("whoops"); %>', {client: true, filename: '<script>'});
+      fn();
+    }, /Error: &lt;script&gt;/);
+  });
+});
+
+/* Old API -- remove when this shim goes away */
+suite('ejs.render(str, dataAndOpts)', function () {
+  test('render the template with data/opts passed together', function () {
+    assert.equal(ejs.render('<p><?= foo ?></p>', {foo: 'yay', delimiter: '?'}),
+        '<p>yay</p>');
+  });
+
+  test('disallow unsafe opts passed along in data', function () {
+    assert.equal(ejs.render('<p><?= locals.foo ?></p>',
+        // localsName should not get reset because it's blacklisted
+        {_with: false, foo: 'yay', delimiter: '?', localsName: '_'}),
+        '<p>yay</p>');
+  });
+});
+
+suite('ejs.render(str, data, opts)', function () {
+  test('render the template', function () {
+    assert.equal(ejs.render('<p>yay</p>'), '<p>yay</p>');
+  });
+
+  test('empty input works', function () {
+    assert.equal(ejs.render(''), '');
+  });
+
+  test('undefined renders nothing escaped', function () {
+    assert.equal(ejs.render('<%= undefined %>'), '');
+  });
+
+  test('undefined renders nothing raw', function () {
+    assert.equal(ejs.render('<%- undefined %>'), '');
+  });
+
+  test('null renders nothing escaped', function () {
+    assert.equal(ejs.render('<%= null %>'), '');
+  });
+
+  test('null renders nothing raw', function () {
+    assert.equal(ejs.render('<%- null %>'), '');
+  });
+
+  test('zero-value data item renders something escaped', function () {
+    assert.equal(ejs.render('<%= 0 %>'), '0');
+  });
+
+  test('zero-value data object renders something raw', function () {
+    assert.equal(ejs.render('<%- 0 %>'), '0');
+  });
+
+  test('accept locals', function () {
+    assert.equal(ejs.render('<p><%= name %></p>', {name: 'geddy'}),
+        '<p>geddy</p>');
+  });
+
+  test('accept locals without using with() {}', function () {
+    assert.equal(ejs.render('<p><%= locals.name %></p>', {name: 'geddy'},
+                            {_with: false}),
+        '<p>geddy</p>');
+    assert.throws(function() {
+      ejs.render('<p><%= name %></p>', {name: 'geddy'},
+                 {_with: false});
+    }, /name is not defined/);
+  });
+
+  test('accept custom name for locals', function () {
+    ejs.localsName = 'it';
+    assert.equal(ejs.render('<p><%= it.name %></p>', {name: 'geddy'},
+                            {_with: false}),
+        '<p>geddy</p>');
+    assert.throws(function() {
+      ejs.render('<p><%= name %></p>', {name: 'geddy'},
+                 {_with: false});
+    }, /name is not defined/);
+    ejs.localsName = 'locals';
+  });
+
+  test('support caching', function () {
+    var file = __dirname + '/tmp/render.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render('<p>Old</p>', {}, options);
+    var expected = '<p>Old</p>';
+    assert.equal(out, expected);
+    // Assert no change, still in cache
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('support LRU caching', function () {
+    var oldCache = ejs.cache;
+    var file = __dirname + '/tmp/render.ejs';
+    var options = {cache: true, filename: file};
+    var out;
+    var expected = '<p>Old</p>';
+
+    // Switch to LRU
+    ejs.cache = LRU();
+
+    out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+    // Assert no change, still in cache
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+
+    // Restore system cache
+    ejs.cache = oldCache;
+  });
+
+  test('opts.context', function () {
+    var ctxt = {foo: 'FOO'};
+    var out = ejs.render('<%= this.foo %>', {}, {context: ctxt});
+    assert.equal(out, ctxt.foo);
+  });
+});
+
+suite('ejs.renderFile(path, [data], [options], fn)', function () {
+  test('render a file', function(done) {
+    ejs.renderFile('test/fixtures/para.ejs', function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, '<p>hey</p>\n');
+      done();
+    });
+  });
+
+  test('accept locals', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$'};
+    ejs.renderFile('test/fixtures/user.ejs', data, options, function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, '<h1>fonebone</h1>\n');
+      done();
+    });
+  });
+
+  test('accept locals without using with() {}', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$', _with: false};
+    var doneCount = 0;
+    ejs.renderFile('test/fixtures/user-no-with.ejs', data, options, function(err, html) {
+      if (err) {
+        if (doneCount === 2) {
+          return;
+        }
+        doneCount = 2;
+        return done(err);
+      }
+      assert.equal(html, '<h1>fonebone</h1>\n');
+      doneCount++;
+      if (doneCount === 2) {
+        done();
+      }
+    });
+    ejs.renderFile('test/fixtures/user.ejs', data, options, function(err) {
+      if (!err) {
+        if (doneCount === 2) {
+          return;
+        }
+        doneCount = 2;
+        return done(new Error('error not thrown'));
+      }
+      doneCount++;
+      if (doneCount === 2) {
+        done();
+      }
+    });
+  });
+
+  test('not catch err thrown by callback', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$'};
+    var counter = 0;
+
+    var d = require('domain').create();
+    d.on('error', function (err) {
+      assert.equal(counter, 1);
+      assert.equal(err.message, 'Exception in callback');
+      done();
+    });
+    d.run(function () {
+      // process.nextTick() needed to work around mochajs/mocha#513
+      //
+      // tl;dr: mocha doesn't support synchronous exception throwing in
+      // domains. Have to make it async. Ticket closed because: "domains are
+      // deprecated :D"
+      process.nextTick(function () {
+        ejs.renderFile('test/fixtures/user.ejs', data, options, function(err) {
+          counter++;
+          if (err) {
+            assert.notEqual(err.message, 'Exception in callback');
+            return done(err);
+          }
+          throw new Error('Exception in callback');
+        });
+      });
+    });
+  });
+
+  test('support caching', function (done) {
+    var expected = '<p>Old</p>';
+    var file = __dirname + '/tmp/renderFile.ejs';
+    var options = {cache: true};
+    fs.writeFileSync(file, '<p>Old</p>');
+
+    ejs.renderFile(file, {}, options, function (err, out) {
+      if (err) {
+        done(err);
+      }
+      fs.writeFileSync(file, '<p>New</p>');
+      assert.equal(out, expected);
+
+      ejs.renderFile(file, {}, options, function (err, out) {
+        if (err) {
+          done(err);
+        }
+        // Assert no change, still in cache
+        assert.equal(out, expected);
+        done();
+      });
+    });
+  });
+
+  test('opts.context', function (done) {
+    var ctxt = {foo: 'FOO'};
+    ejs.renderFile('test/fixtures/with-context.ejs', {}, {context: ctxt}, function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, ctxt.foo + '\n');
+      done();
+    });
+
+  });
+});
+
+suite('cache specific', function () {
+  test('`clearCache` work properly', function () {
+    var expected = '<p>Old</p>';
+    var file = __dirname + '/tmp/clearCache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+
+    ejs.clearCache();
+
+    expected = '<p>New</p>';
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('`clearCache` work properly, LRU', function () {
+    var expected = '<p>Old</p>';
+    var oldCache = ejs.cache;
+    var file = __dirname + '/tmp/clearCache.ejs';
+    var options = {cache: true, filename: file};
+    var out;
+
+    ejs.cache = LRU();
+
+    out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+    ejs.clearCache();
+    expected = '<p>New</p>';
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+
+    ejs.cache = oldCache;
+  });
+
+  test('LRU with cache-size 1', function () {
+    var oldCache = ejs.cache;
+    var options;
+    var out;
+    var expected;
+    var file;
+
+    ejs.cache = LRU(1);
+
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>File1</p>', {}, options);
+    expected = '<p>File1</p>';
+    assert.equal(out, expected);
+
+    // Same filename, different template, but output
+    // should be the same because cache
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>ChangedFile1</p>', {}, options);
+    expected = '<p>File1</p>';
+    assert.equal(out, expected);
+
+    // Different filiename -- output should be different,
+    // and previous cache-entry should be evicted
+    file = __dirname + '/tmp/render2.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>File2</p>', {}, options);
+    expected = '<p>File2</p>';
+    assert.equal(out, expected);
+
+    // Entry with first filename should now be out of cache,
+    // results should be different
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>ChangedFile1</p>', {}, options);
+    expected = '<p>ChangedFile1</p>';
+    assert.equal(out, expected);
+
+    ejs.cache = oldCache;
+  });
+});
+
+suite('<%', function () {
+  test('without semicolons', function () {
+    assert.equal(ejs.render(fixture('no.semicolons.ejs')),
+        fixture('no.semicolons.html'));
+  });
+});
+
+suite('<%=', function () {
+  test('should not throw an error with a // comment on the final line', function () {
+    assert.equal(ejs.render('<%=\n// a comment\nname\n// another comment %>', {name: '&nbsp;<script>'}),
+      '&amp;nbsp;&lt;script&gt;');
+  });
+
+  test('escape &amp;<script>', function () {
+    assert.equal(ejs.render('<%= name %>', {name: '&nbsp;<script>'}),
+        '&amp;nbsp;&lt;script&gt;');
+  });
+
+  test('should escape \'', function () {
+    assert.equal(ejs.render('<%= name %>', {name: 'The Jones\'s'}),
+      'The Jones&#39;s');
+  });
+
+  test('should escape &foo_bar;', function () {
+    assert.equal(ejs.render('<%= name %>', {name: '&foo_bar;'}),
+      '&amp;foo_bar;');
+  });
+
+  test('should accept custom function', function() {
+
+    var customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+
+    assert.equal(
+      ejs.render('<%= name %>', {name: 'The Jones\'s'}, {escape: customEscape}),
+      'THE JONES\'S'
+    );
+  });
+});
+
+suite('<%-', function () {
+  test('should not throw an error with a // comment on the final line', function () {
+    assert.equal(ejs.render('<%-\n// a comment\nname\n// another comment %>', {name: '&nbsp;<script>'}),
+        '&nbsp;<script>');
+  });
+
+  test('not escape', function () {
+    assert.equal(ejs.render('<%- name %>', {name: '<script>'}),
+        '<script>');
+  });
+
+  test('terminate gracefully if no close tag is found', function () {
+    try {
+      ejs.compile('<h1>oops</h1><%- name ->');
+      throw new Error('Expected parse failure');
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('Could not find matching close tag for') > -1);
+    }
+  });
+});
+
+suite('%>', function () {
+  test('produce newlines', function () {
+    assert.equal(ejs.render(fixture('newlines.ejs'), {users: users}),
+      fixture('newlines.html'));
+  });
+  test('works with `-%>` interspersed', function () {
+    assert.equal(ejs.render(fixture('newlines.mixed.ejs'), {users: users}),
+      fixture('newlines.mixed.html'));
+  });
+  test('consecutive tags work', function () {
+    assert.equal(ejs.render(fixture('consecutive-tags.ejs')),
+      fixture('consecutive-tags.html'));
+  });
+});
+
+suite('-%>', function () {
+  test('not produce newlines', function () {
+    assert.equal(ejs.render(fixture('no.newlines.ejs'), {users: users}),
+      fixture('no.newlines.html'));
+  });
+  test('stack traces work', function () {
+    try {
+      ejs.render(fixture('no.newlines.error.ejs'));
+    }
+    catch (e) {
+      if (e.message.indexOf('>> 4| <%= qdata %>') > -1) {
+        return;
+      }
+      throw e;
+    }
+    throw new Error('Expected ReferenceError');
+  });
+
+  test('works with unix style', function () {
+    var content = '<ul><% -%>\n'
+    + '<% users.forEach(function(user){ -%>\n'
+    + '<li><%= user.name -%></li>\n'
+    + '<% }) -%>\n'
+    + '</ul><% -%>\n';
+
+    var expectedResult = '<ul><li>geddy</li>\n<li>neil</li>\n<li>alex</li>\n</ul>';
+    var fn;
+    fn = ejs.compile(content);
+    assert.equal(fn({users: users}),
+      expectedResult);
+  });
+
+  test('works with windows style', function () {
+    var content = '<ul><% -%>\r\n'
+    + '<% users.forEach(function(user){ -%>\r\n'
+    + '<li><%= user.name -%></li>\r\n'
+    + '<% }) -%>\r\n'
+    + '</ul><% -%>\r\n';
+
+    var expectedResult = '<ul><li>geddy</li>\r\n<li>neil</li>\r\n<li>alex</li>\r\n</ul>';
+    var fn;
+    fn = ejs.compile(content);
+    assert.equal(fn({users: users}),
+      expectedResult);
+  });
+});
+
+suite('<%%', function () {
+  test('produce literals', function () {
+    assert.equal(ejs.render('<%%- "foo" %>'),
+      '<%- "foo" %>');
+  });
+  test('work without an end tag', function () {
+    assert.equal(ejs.render('<%%'), '<%');
+    assert.equal(ejs.render(fixture('literal.ejs'), {}, {delimiter: ' '}),
+      fixture('literal.html'));
+  });
+});
+
+suite('%%>', function () {
+  test('produce literal', function () {
+    assert.equal(ejs.render('%%>'),
+        '%>');
+    assert.equal(ejs.render('  >', {}, {delimiter: ' '}),
+        ' >');
+  });
+});
+
+suite('<%_ and _%>', function () {
+  test('slurps spaces and tabs', function () {
+    assert.equal(ejs.render(fixture('space-and-tab-slurp.ejs'), {users: users}),
+      fixture('space-and-tab-slurp.html'));
+  });
+});
+
+suite('single quotes', function () {
+  test('not mess up the constructed function', function () {
+    assert.equal(ejs.render(fixture('single-quote.ejs')),
+      fixture('single-quote.html'));
+  });
+});
+
+suite('double quotes', function () {
+  test('not mess up the constructed function', function () {
+    assert.equal(ejs.render(fixture('double-quote.ejs')),
+      fixture('double-quote.html'));
+  });
+});
+
+suite('backslashes', function () {
+  test('escape', function () {
+    assert.equal(ejs.render(fixture('backslash.ejs')),
+      fixture('backslash.html'));
+  });
+});
+
+suite('messed up whitespace', function () {
+  test('work', function () {
+    assert.equal(ejs.render(fixture('messed.ejs'), {users: users}),
+      fixture('messed.html'));
+  });
+});
+
+suite('exceptions', function () {
+  test('produce useful stack traces', function () {
+    try {
+      ejs.render(fixture('error.ejs'), {}, {filename: 'error.ejs'});
+    }
+    catch (err) {
+      assert.equal(err.path, 'error.ejs');
+      assert.equal(err.stack.split('\n').slice(0, 8).join('\n'), fixture('error.out'));
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('not include fancy stack info if compileDebug is false', function () {
+    try {
+      ejs.render(fixture('error.ejs'), {}, {
+        filename: 'error.ejs',
+        compileDebug: false
+      });
+    }
+    catch (err) {
+      assert.ok(!err.path);
+      assert.notEqual(err.stack.split('\n').slice(0, 8).join('\n'), fixture('error.out'));
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  var unhook = null;
+  test('log JS source when debug is set', function (done) {
+    var out = '';
+    var needToExit = false;
+    unhook = hook_stdio(process.stdout, function (str) {
+      out += str;
+      if (needToExit) {
+        return;
+      }
+      if (out.indexOf('__output')) {
+        needToExit = true;
+        unhook();
+        unhook = null;
+        return done();
+      }
+    });
+    ejs.render(fixture('hello-world.ejs'), {}, {debug: true});
+  });
+
+  test('escape filename in errors', function () {
+    assert.throws(function () {
+      ejs.render('<% throw new Error("whoops"); %>', {}, {filename: '<script>'});
+    }, /Error: &lt;script&gt;/);
+  });
+
+  test('filename in errors uses custom escape', function () {
+    assert.throws(function () {
+      ejs.render('<% throw new Error("whoops"); %>', {}, {
+        filename: '<script>',
+        escape: function () { return 'zooby'; }
+      });
+    }, /Error: zooby/);
+  });
+
+  teardown(function() {
+    if (!unhook) {
+      return;
+    }
+    unhook();
+    unhook = null;
+  });
+});
+
+suite('rmWhitespace', function () {
+  test('works', function () {
+    assert.equal(ejs.render(fixture('rmWhitespace.ejs'), {}, {rmWhitespace: true}),
+        fixture('rmWhitespace.html'));
+  });
+});
+
+suite('include()', function () {
+  test('include ejs', function () {
+    var file = 'test/fixtures/include-simple.ejs';
+    assert.equal(ejs.render(fixture('include-simple.ejs'), {}, {filename: file}),
+        fixture('include-simple.html'));
+  });
+
+  test('include ejs fails without `filename`', function () {
+    try {
+      ejs.render(fixture('include-simple.ejs'));
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('requires the \'filename\' option') > -1);
+      return;
+    }
+    throw new Error('expected inclusion error');
+  });
+
+  test('strips BOM', function () {
+    assert.equal(
+      ejs.render('<%- include("fixtures/includes/bom.ejs") %>',
+        {}, {filename: path.join(__dirname, 'f.ejs')}),
+      '<p>This is a file with BOM.</p>\n');
+  });
+
+  test('include ejs with locals', function () {
+    var file = 'test/fixtures/include.ejs';
+    assert.equal(ejs.render(fixture('include.ejs'), {pets: users}, {filename: file, delimiter: '@'}),
+        fixture('include.html'));
+  });
+
+  test('include ejs with absolute path and locals', function () {
+    var file = 'test/fixtures/include-abspath.ejs';
+    assert.equal(ejs.render(fixture('include-abspath.ejs'),
+      {dir: path.join(__dirname, 'fixtures'), pets: users, path: path},
+      {filename: file, delimiter: '@'}),
+        fixture('include.html'));
+  });
+
+  test('include ejs with set root path', function () {
+    var file = 'test/fixtures/include-root.ejs';
+    var viewsPath = path.join(__dirname, 'fixtures');
+    assert.equal(ejs.render(fixture('include-root.ejs'), {pets: users}, {filename: file, delimiter: '@',root:viewsPath}),
+      fixture('include.html'));
+  });
+
+  test('work when nested', function () {
+    var file = 'test/fixtures/menu.ejs';
+    assert.equal(ejs.render(fixture('menu.ejs'), {pets: users}, {filename: file}),
+        fixture('menu.html'));
+  });
+
+  test('work with a variable path', function () {
+    var file = 'test/fixtures/menu_var.ejs';
+    var includePath = 'includes/menu-item';
+    assert.equal(ejs.render(fixture('menu.ejs'), {pets: users, varPath:  includePath}, {filename: file}),
+      fixture('menu.html'));
+  });
+
+  test('include arbitrary files as-is', function () {
+    var file = 'test/fixtures/include.css.ejs';
+    assert.equal(ejs.render(fixture('include.css.ejs'), {pets: users}, {filename: file}),
+        fixture('include.css.html'));
+  });
+
+  test('pass compileDebug to include', function () {
+    var file = 'test/fixtures/include.ejs';
+    var fn;
+    fn = ejs.compile(fixture('include.ejs'), {
+      filename: file,
+      delimiter: '@',
+      compileDebug: false
+    });
+    try {
+      // Render without a required variable reference
+      fn({foo: 'asdf'});
+    }
+    catch(e) {
+      assert.equal(e.message, 'pets is not defined');
+      assert.ok(!e.path);
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('is dynamic', function () {
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_cache.ejs';
+    var options = {filename: file};
+    var out = ejs.compile(fixture('include_cache.ejs'), options);
+    assert.equal(out(), '<p>Old</p>\n');
+
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>New</p>');
+    assert.equal(out(), '<p>New</p>\n');
+  });
+
+  test('support caching', function () {
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_cache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    var expected = fixture('include_cache.html');
+    assert.equal(out, expected);
+    out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    // No change, still in cache
+    assert.equal(out, expected);
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>New</p>');
+    out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    assert.equal(out, expected);
+  });
+
+});
+
+suite('preprocessor include', function () {
+  test('work', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    assert.equal(ejs.render(fixture('include_preprocessor.ejs'), {pets: users}, {filename: file, delimiter: '@'}),
+        fixture('include_preprocessor.html'));
+  });
+
+  test('no false positives', function () {
+    assert.equal(ejs.render('<% %> include foo <% %>'), ' include foo ');
+  });
+
+  test('fails without `filename`', function () {
+    try {
+      ejs.render(fixture('include_preprocessor.ejs'), {pets: users}, {delimiter: '@'});
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('requires the \'filename\' option') > -1);
+      return;
+    }
+    throw new Error('expected inclusion error');
+  });
+
+  test('strips BOM', function () {
+    assert.equal(
+      ejs.render('<% include fixtures/includes/bom.ejs %>',
+        {}, {filename: path.join(__dirname, 'f.ejs')}),
+      '<p>This is a file with BOM.</p>\n');
+  });
+
+  test('work when nested', function () {
+    var file = 'test/fixtures/menu_preprocessor.ejs';
+    assert.equal(ejs.render(fixture('menu_preprocessor.ejs'), {pets: users}, {filename: file}),
+        fixture('menu_preprocessor.html'));
+  });
+
+  test('tracks dependency correctly', function () {
+    var file = 'test/fixtures/menu_preprocessor.ejs';
+    var fn = ejs.compile(fixture('menu_preprocessor.ejs'), {filename: file});
+    assert(fn.dependencies.length);
+  });
+
+  test('include arbitrary files as-is', function () {
+    var file = 'test/fixtures/include_preprocessor.css.ejs';
+    assert.equal(ejs.render(fixture('include_preprocessor.css.ejs'), {pets: users}, {filename: file}),
+        fixture('include_preprocessor.css.html'));
+  });
+
+  test('pass compileDebug to include', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    var fn;
+    fn = ejs.compile(fixture('include_preprocessor.ejs'), {
+      filename: file,
+      delimiter: '@',
+      compileDebug: false
+    });
+    try {
+      // Render without a required variable reference
+      fn({foo: 'asdf'});
+    }
+    catch(e) {
+      assert.equal(e.message, 'pets is not defined');
+      assert.ok(!e.path);
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('is static', function () {
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_preprocessor_cache.ejs';
+    var options = {filename: file};
+    var out = ejs.compile(fixture('include_preprocessor_cache.ejs'), options);
+    assert.equal(out(), '<p>Old</p>\n');
+
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>New</p>');
+    assert.equal(out(), '<p>Old</p>\n');
+  });
+
+  test('support caching', function () {
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_preprocessor_cache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render(fixture('include_preprocessor_cache.ejs'), {}, options);
+    var expected = fixture('include_preprocessor_cache.html');
+    assert.equal(out, expected);
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>New</p>');
+    out = ejs.render(fixture('include_preprocessor_cache.ejs'), {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('whitespace slurp and rmWhitespace work', function() {
+    var file = 'test/fixtures/include_preprocessor_line_slurp.ejs';
+    var template = fixture('include_preprocessor_line_slurp.ejs');
+    var expected = fixture('include_preprocessor_line_slurp.html');
+    var options = {rmWhitespace: true, filename: file};
+    assert.equal(ejs.render(template, {}, options),
+        expected);
+  });
+
+});
+
+suite('comments', function () {
+  test('fully render with comments removed', function () {
+    assert.equal(ejs.render(fixture('comments.ejs')),
+        fixture('comments.html'));
+  });
+});
+
+suite('require', function () {
+
+  // Only works with inline/preprocessor includes
+  test('allow ejs templates to be required as node modules', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    var template = require(__dirname + '/fixtures/menu_preprocessor.ejs');
+    if (!process.env.running_under_istanbul) {
+      assert.equal(template({filename: file, pets: users}),
+          fixture('menu_preprocessor.html'));
+    }
+  });
+});
+
+suite('test fileloader', function () {
+
+  var myFileLoad = function (filePath) {
+    return 'myFileLoad: ' + fs.readFileSync(filePath);
+  };
+
+  test('test custom fileload', function (done) {
+    ejs.fileLoader = myFileLoad;
+    ejs.renderFile('test/fixtures/para.ejs', function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, 'myFileLoad: <p>hey</p>\n');
+      done();
+    });
+
+  });
+});
+
+suite('examples', function () {
+  function noop () {}
+  fs.readdirSync('examples').forEach(function (f) {
+    if (!/\.js$/.test(f)) {
+      return;
+    }
+    suite(f, function () {
+      test('doesn\'t throw any errors', function () {
+        var stderr = hook_stdio(process.stderr, noop);
+        var stdout = hook_stdio(process.stdout, noop);
+        try {
+          require('../examples/' + f);
+        }
+        catch (ex) {
+          stdout();
+          stderr();
+          throw ex;
+        }
+        stdout();
+        stderr();
+      });
+    });
+  });
+});
+
+suite('meta information', function () {
+  test('has a version', function () {
+    assert.strictEqual(ejs.VERSION, require('../package.json').version);
+  });
+
+  test('had a name', function () {
+    assert.strictEqual(ejs.name, 'ejs');
+  });
+});
diff --git a/register/node_modules/ejs/test/fixtures/backslash.ejs b/register/node_modules/ejs/test/fixtures/backslash.ejs
new file mode 100644
index 0000000..2de78ae
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/backslash.ejs
@@ -0,0 +1 @@
+\foo
diff --git a/register/node_modules/ejs/test/fixtures/backslash.html b/register/node_modules/ejs/test/fixtures/backslash.html
new file mode 100644
index 0000000..2de78ae
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/backslash.html
@@ -0,0 +1 @@
+\foo
diff --git a/register/node_modules/ejs/test/fixtures/comments.ejs b/register/node_modules/ejs/test/fixtures/comments.ejs
new file mode 100644
index 0000000..48ece70
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/comments.ejs
@@ -0,0 +1,7 @@
+<li><a href="foo"><% // double-slash comment %>foo</li>
+<li><a href="bar"><% /* C-style comment */ %>bar</li>
+<li><a href="baz"><% // double-slash comment with newline
+    %>baz</li>
+<li><a href="qux"><% var x = 'qux'; // double-slash comment @ end of line %><%= x %></li>
+<li><a href="fee"><%# ERB style comment %>fee</li>
+<li><a href="bah"><%= 'not a ' + '//' + ' comment' %></a></li>
diff --git a/register/node_modules/ejs/test/fixtures/comments.html b/register/node_modules/ejs/test/fixtures/comments.html
new file mode 100644
index 0000000..63fcd25
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/comments.html
@@ -0,0 +1,6 @@
+<li><a href="foo">foo</li>
+<li><a href="bar">bar</li>
+<li><a href="baz">baz</li>
+<li><a href="qux">qux</li>
+<li><a href="fee">fee</li>
+<li><a href="bah">not a // comment</a></li>
diff --git a/register/node_modules/ejs/test/fixtures/consecutive-tags.ejs b/register/node_modules/ejs/test/fixtures/consecutive-tags.ejs
new file mode 100644
index 0000000..175f5c3
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/consecutive-tags.ejs
@@ -0,0 +1 @@
+<% var a = 'foo' %><% var b = 'bar' %><%= a %>
diff --git a/register/node_modules/ejs/test/fixtures/consecutive-tags.html b/register/node_modules/ejs/test/fixtures/consecutive-tags.html
new file mode 100644
index 0000000..257cc56
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/consecutive-tags.html
@@ -0,0 +1 @@
+foo
diff --git a/register/node_modules/ejs/test/fixtures/double-quote.ejs b/register/node_modules/ejs/test/fixtures/double-quote.ejs
new file mode 100644
index 0000000..e341be9
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/double-quote.ejs
@@ -0,0 +1 @@
+<p><%= "lo" + 'ki' %>'s "wheelchair"</p>
diff --git a/register/node_modules/ejs/test/fixtures/double-quote.html b/register/node_modules/ejs/test/fixtures/double-quote.html
new file mode 100644
index 0000000..9d94873
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/double-quote.html
@@ -0,0 +1 @@
+<p>loki's "wheelchair"</p>
diff --git a/register/node_modules/ejs/test/fixtures/error.ejs b/register/node_modules/ejs/test/fixtures/error.ejs
new file mode 100644
index 0000000..afe2d1b
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/error.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <% if (users) { %>
+    <p>Has users</p>
+  <% } %>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/error.out b/register/node_modules/ejs/test/fixtures/error.out
new file mode 100644
index 0000000..a2c9108
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/error.out
@@ -0,0 +1,8 @@
+ReferenceError: error.ejs:2
+    1| <ul>
+ >> 2|   <% if (users) { %>
+    3|     <p>Has users</p>
+    4|   <% } %>
+    5| </ul>
+
+users is not defined
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/fail.ejs b/register/node_modules/ejs/test/fixtures/fail.ejs
new file mode 100644
index 0000000..9dfb1f6
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/fail.ejs
@@ -0,0 +1 @@
+<% function foo() return 'foo'; %>
diff --git a/register/node_modules/ejs/test/fixtures/hello-world.ejs b/register/node_modules/ejs/test/fixtures/hello-world.ejs
new file mode 100644
index 0000000..e2e353e
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/hello-world.ejs
@@ -0,0 +1 @@
+<p>Hello world!</p>
diff --git a/register/node_modules/ejs/test/fixtures/include-abspath.ejs b/register/node_modules/ejs/test/fixtures/include-abspath.ejs
new file mode 100644
index 0000000..26b0522
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include-abspath.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@- include(path.join(dir, 'pet'), {pet: pet}); @>
+  <@ }); @>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include-root.ejs b/register/node_modules/ejs/test/fixtures/include-root.ejs
new file mode 100644
index 0000000..395d6a1
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include-root.ejs
@@ -0,0 +1 @@
+<@- include('/include'); @>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/include-simple.ejs b/register/node_modules/ejs/test/fixtures/include-simple.ejs
new file mode 100644
index 0000000..a874878
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include-simple.ejs
@@ -0,0 +1,3 @@
+<ul>
+  <%- include('hello-world'); %>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include-simple.html b/register/node_modules/ejs/test/fixtures/include-simple.html
new file mode 100644
index 0000000..f4522c0
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include-simple.html
@@ -0,0 +1,4 @@
+<ul>
+  <p>Hello world!</p>
+
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include.css.ejs b/register/node_modules/ejs/test/fixtures/include.css.ejs
new file mode 100644
index 0000000..cd184b4
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include.css.ejs
@@ -0,0 +1 @@
+<style><%- include('style.css', {value: 'bar'}); %></style>
diff --git a/register/node_modules/ejs/test/fixtures/include.css.html b/register/node_modules/ejs/test/fixtures/include.css.html
new file mode 100644
index 0000000..9e6e33e
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include.css.html
@@ -0,0 +1,4 @@
+<style>body {
+  foo: 'bar';
+}
+</style>
diff --git a/register/node_modules/ejs/test/fixtures/include.ejs b/register/node_modules/ejs/test/fixtures/include.ejs
new file mode 100644
index 0000000..f2295ee
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@- include('pet', {pet: pet}); @>
+  <@ }); @>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include.html b/register/node_modules/ejs/test/fixtures/include.html
new file mode 100644
index 0000000..5431d7c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include.html
@@ -0,0 +1,12 @@
+<ul>
+  
+    <li>geddy</li>
+
+  
+    <li>neil</li>
+
+  
+    <li>alex</li>
+
+  
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include_cache.ejs b/register/node_modules/ejs/test/fixtures/include_cache.ejs
new file mode 100644
index 0000000..439193c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_cache.ejs
@@ -0,0 +1 @@
+<%- include('../tmp/include') %>
diff --git a/register/node_modules/ejs/test/fixtures/include_cache.html b/register/node_modules/ejs/test/fixtures/include_cache.html
new file mode 100644
index 0000000..63bf29c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_cache.html
@@ -0,0 +1 @@
+<p>Old</p>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor.css.ejs b/register/node_modules/ejs/test/fixtures/include_preprocessor.css.ejs
new file mode 100644
index 0000000..2535b6c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor.css.ejs
@@ -0,0 +1 @@
+<style><% var value = 'bar' %><% include style.css %></style>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor.css.html b/register/node_modules/ejs/test/fixtures/include_preprocessor.css.html
new file mode 100644
index 0000000..9e6e33e
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor.css.html
@@ -0,0 +1,4 @@
+<style>body {
+  foo: 'bar';
+}
+</style>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor.ejs b/register/node_modules/ejs/test/fixtures/include_preprocessor.ejs
new file mode 100644
index 0000000..f2728c5
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@ include pet @>
+  <@ }) @>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor.html b/register/node_modules/ejs/test/fixtures/include_preprocessor.html
new file mode 100644
index 0000000..5431d7c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor.html
@@ -0,0 +1,12 @@
+<ul>
+  
+    <li>geddy</li>
+
+  
+    <li>neil</li>
+
+  
+    <li>alex</li>
+
+  
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.ejs b/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.ejs
new file mode 100644
index 0000000..ae60923
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.ejs
@@ -0,0 +1 @@
+<%- include ../tmp/include_preprocessor %>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.html b/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.html
new file mode 100644
index 0000000..63bf29c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor_cache.html
@@ -0,0 +1 @@
+<p>Old</p>
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.ejs b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.ejs
new file mode 100644
index 0000000..fd1765c
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.ejs
@@ -0,0 +1 @@
+<% include include_preprocessor_line_slurp_child %>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.html b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.html
new file mode 100644
index 0000000..7ab7998
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp.html
@@ -0,0 +1,5 @@
+<div>
+12
+3
+45
+</div>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp_child.ejs b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp_child.ejs
new file mode 100644
index 0000000..1c4a7c6
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/include_preprocessor_line_slurp_child.ejs
@@ -0,0 +1,5 @@
+<div>
+1   <%_ if (true) { _%> 2
+        3
+4   <%_ } _%> 5
+</div>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/includes/bom.ejs b/register/node_modules/ejs/test/fixtures/includes/bom.ejs
new file mode 100644
index 0000000..cc198ba
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/includes/bom.ejs
@@ -0,0 +1 @@
+﻿<p>This is a file with BOM.</p>
diff --git a/register/node_modules/ejs/test/fixtures/includes/menu-item.ejs b/register/node_modules/ejs/test/fixtures/includes/menu-item.ejs
new file mode 100644
index 0000000..5a1e2ef
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/includes/menu-item.ejs
@@ -0,0 +1 @@
+<li><% include menu/item %></li>
diff --git a/register/node_modules/ejs/test/fixtures/includes/menu/item.ejs b/register/node_modules/ejs/test/fixtures/includes/menu/item.ejs
new file mode 100644
index 0000000..cd85b3d
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/includes/menu/item.ejs
@@ -0,0 +1 @@
+<a href="/<%= url %>"><%= title %></a>
diff --git a/register/node_modules/ejs/test/fixtures/literal.ejs b/register/node_modules/ejs/test/fixtures/literal.ejs
new file mode 100644
index 0000000..9f6bf81
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/literal.ejs
@@ -0,0 +1,3 @@
+<pre>There should be a space followed by a less-than sign and then two more
+spaces in the next line:
+ <   .</pre>
diff --git a/register/node_modules/ejs/test/fixtures/literal.html b/register/node_modules/ejs/test/fixtures/literal.html
new file mode 100644
index 0000000..95acd44
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/literal.html
@@ -0,0 +1,3 @@
+<pre>There should be a space followed by a less-than sign and then two more
+spaces in the next line:
+ <  .</pre>
diff --git a/register/node_modules/ejs/test/fixtures/menu.ejs b/register/node_modules/ejs/test/fixtures/menu.ejs
new file mode 100644
index 0000000..0309990
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/menu.ejs
@@ -0,0 +1,15 @@
+<%- include('includes/menu-item', {
+  url: '/foo'
+, title: 'Foo'
+}); -%>
+
+<%- include('includes/menu-item', {
+  url: '/bar'
+, title: 'Bar'
+}); -%>
+
+<%- include('includes/menu-item', {
+  url: '/baz'
+, title: 'Baz'
+}); -%>
+
diff --git a/register/node_modules/ejs/test/fixtures/menu.html b/register/node_modules/ejs/test/fixtures/menu.html
new file mode 100644
index 0000000..eef5777
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/menu.html
@@ -0,0 +1,9 @@
+<li><a href="//foo">Foo</a>
+</li>
+
+<li><a href="//bar">Bar</a>
+</li>
+
+<li><a href="//baz">Baz</a>
+</li>
+
diff --git a/register/node_modules/ejs/test/fixtures/menu_preprocessor.ejs b/register/node_modules/ejs/test/fixtures/menu_preprocessor.ejs
new file mode 100644
index 0000000..cca1d02
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/menu_preprocessor.ejs
@@ -0,0 +1,11 @@
+<% var url = '/foo' -%>
+<% var title = 'Foo' -%>
+<% include includes/menu-item -%>
+
+<% var url = '/bar' -%>
+<% var title = 'Bar' -%>
+<% include includes/menu-item -%>
+
+<% var url = '/baz' -%>
+<% var title = 'Baz' -%>
+<% include includes/menu-item -%>
diff --git a/register/node_modules/ejs/test/fixtures/menu_preprocessor.html b/register/node_modules/ejs/test/fixtures/menu_preprocessor.html
new file mode 100644
index 0000000..651b60e
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/menu_preprocessor.html
@@ -0,0 +1,8 @@
+<li><a href="//foo">Foo</a>
+</li>
+
+<li><a href="//bar">Bar</a>
+</li>
+
+<li><a href="//baz">Baz</a>
+</li>
diff --git a/register/node_modules/ejs/test/fixtures/menu_var.ejs b/register/node_modules/ejs/test/fixtures/menu_var.ejs
new file mode 100644
index 0000000..a421dcb
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/menu_var.ejs
@@ -0,0 +1,15 @@
+<%- include(varPath, {
+  url: '/foo'
+, title: 'Foo'
+}); -%>
+
+<%- include(varPath, {
+  url: '/bar'
+, title: 'Bar'
+}); -%>
+
+<%- include(varPath, {
+  url: '/baz'
+, title: 'Baz'
+}); -%>
+
diff --git a/register/node_modules/ejs/test/fixtures/messed.ejs b/register/node_modules/ejs/test/fixtures/messed.ejs
new file mode 100644
index 0000000..37aca11
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/messed.ejs
@@ -0,0 +1 @@
+<ul><%users.forEach(function(user){%><li><%=user.name%></li><%})%></ul>
diff --git a/register/node_modules/ejs/test/fixtures/messed.html b/register/node_modules/ejs/test/fixtures/messed.html
new file mode 100644
index 0000000..52d3562
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/messed.html
@@ -0,0 +1 @@
+<ul><li>geddy</li><li>neil</li><li>alex</li></ul>
diff --git a/register/node_modules/ejs/test/fixtures/newlines.ejs b/register/node_modules/ejs/test/fixtures/newlines.ejs
new file mode 100644
index 0000000..83ffe98
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/newlines.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <% users.forEach(function(user){ %>
+    <li><%= user.name %></li>
+  <% }) %>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/newlines.html b/register/node_modules/ejs/test/fixtures/newlines.html
new file mode 100644
index 0000000..4557edb
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/newlines.html
@@ -0,0 +1,9 @@
+<ul>
+  
+    <li>geddy</li>
+  
+    <li>neil</li>
+  
+    <li>alex</li>
+  
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/newlines.mixed.ejs b/register/node_modules/ejs/test/fixtures/newlines.mixed.ejs
new file mode 100644
index 0000000..5895057
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/newlines.mixed.ejs
@@ -0,0 +1,6 @@
+<ul>
+  <% var unused1 = 'blah' -%>
+  <% var unused2 = 'bleh'  %>
+  <% var unused3 = 'bloh' -%>
+  <% var unused4 = 'bluh'  %>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/newlines.mixed.html b/register/node_modules/ejs/test/fixtures/newlines.mixed.html
new file mode 100644
index 0000000..cd88a97
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/newlines.mixed.html
@@ -0,0 +1,4 @@
+<ul>
+    
+    
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/no.newlines.ejs b/register/node_modules/ejs/test/fixtures/no.newlines.ejs
new file mode 100644
index 0000000..c7a6dc9
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/no.newlines.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <% users.forEach(function(user){ -%>
+  <li><%= user.name %></li>
+  <% }) -%>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/no.newlines.html b/register/node_modules/ejs/test/fixtures/no.newlines.html
new file mode 100644
index 0000000..2285700
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/no.newlines.html
@@ -0,0 +1,5 @@
+<ul>
+    <li>geddy</li>
+    <li>neil</li>
+    <li>alex</li>
+  </ul>
diff --git a/register/node_modules/ejs/test/fixtures/no.semicolons.ejs b/register/node_modules/ejs/test/fixtures/no.semicolons.ejs
new file mode 100644
index 0000000..d583134
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/no.semicolons.ejs
@@ -0,0 +1,8 @@
+This document does not use semicolons in scriptlets.
+<%
+  var a = 'b'
+  var b = 'c'
+  var c
+  c = b
+%>
+The value of c is: <%= c %>
diff --git a/register/node_modules/ejs/test/fixtures/no.semicolons.html b/register/node_modules/ejs/test/fixtures/no.semicolons.html
new file mode 100644
index 0000000..524f8c6
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/no.semicolons.html
@@ -0,0 +1,3 @@
+This document does not use semicolons in scriptlets.
+
+The value of c is: c
diff --git a/register/node_modules/ejs/test/fixtures/para.ejs b/register/node_modules/ejs/test/fixtures/para.ejs
new file mode 100644
index 0000000..28f5df8
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/para.ejs
@@ -0,0 +1 @@
+<p>hey</p>
diff --git a/register/node_modules/ejs/test/fixtures/pet.ejs b/register/node_modules/ejs/test/fixtures/pet.ejs
new file mode 100644
index 0000000..09dd230
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/pet.ejs
@@ -0,0 +1 @@
+<li><@= pet.name @></li>
diff --git a/register/node_modules/ejs/test/fixtures/rmWhitespace.ejs b/register/node_modules/ejs/test/fixtures/rmWhitespace.ejs
new file mode 100644
index 0000000..5da0d89
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/rmWhitespace.ejs
@@ -0,0 +1,14 @@
+   <tag1>  
+<tag2>  
+A very long piece of text very long piece of text very long piece of
+text very long piece <% var f = 'f' %>of text very long piece of
+text very long piece of<% %>text very long 
+adsffadsfadsfad<%= f %>   
+   
+piece of text.
+<% var a = 'a' %>  
+Text again.
+<% var b = 'b' %>
+<% var c = 'c'
+var d = 'd' %>
+Another text. <%= c %>  
diff --git a/register/node_modules/ejs/test/fixtures/rmWhitespace.html b/register/node_modules/ejs/test/fixtures/rmWhitespace.html
new file mode 100644
index 0000000..4beb5fa
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/rmWhitespace.html
@@ -0,0 +1,8 @@
+<tag1>
+<tag2>
+A very long piece of text very long piece of text very long piece of
+text very long piece of text very long piece of
+text very long piece oftext very long
+adsffadsfadsfadfpiece of text.
+Text again.
+Another text. c
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/fixtures/single-quote.ejs b/register/node_modules/ejs/test/fixtures/single-quote.ejs
new file mode 100644
index 0000000..b520c84
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/single-quote.ejs
@@ -0,0 +1 @@
+<p><%= 'loki' %>'s wheelchair</p>
diff --git a/register/node_modules/ejs/test/fixtures/single-quote.html b/register/node_modules/ejs/test/fixtures/single-quote.html
new file mode 100644
index 0000000..d642750
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/single-quote.html
@@ -0,0 +1 @@
+<p>loki's wheelchair</p>
diff --git a/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.ejs b/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.ejs
new file mode 100644
index 0000000..7622457
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.ejs
@@ -0,0 +1,5 @@
+<ul>
+	 <%_ users.forEach(function(user){ _%>	 
+    <li><%= user.name %></li>
+ 	<%_ }) _%> 	
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.html b/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.html
new file mode 100644
index 0000000..cfb6582
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/space-and-tab-slurp.html
@@ -0,0 +1,5 @@
+<ul>
+    <li>geddy</li>
+    <li>neil</li>
+    <li>alex</li>
+</ul>
diff --git a/register/node_modules/ejs/test/fixtures/strict.ejs b/register/node_modules/ejs/test/fixtures/strict.ejs
new file mode 100644
index 0000000..408ebcf
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/strict.ejs
@@ -0,0 +1,5 @@
+<%
+// Unspecified execution context should be `undefined` in strict mode
+var isReallyStrict = !((function () { return this; })())
+-%>
+<%= isReallyStrict -%>
diff --git a/register/node_modules/ejs/test/fixtures/style.css b/register/node_modules/ejs/test/fixtures/style.css
new file mode 100644
index 0000000..f9c16e6
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/style.css
@@ -0,0 +1,3 @@
+body {
+  foo: '<%= value %>';
+}
diff --git a/register/node_modules/ejs/test/fixtures/user-no-with.ejs b/register/node_modules/ejs/test/fixtures/user-no-with.ejs
new file mode 100644
index 0000000..1822e24
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/user-no-with.ejs
@@ -0,0 +1 @@
+<h1><$= locals.name $></h1>
diff --git a/register/node_modules/ejs/test/fixtures/user.ejs b/register/node_modules/ejs/test/fixtures/user.ejs
new file mode 100644
index 0000000..66f9adc
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/user.ejs
@@ -0,0 +1 @@
+<h1><$= name $></h1>
diff --git a/register/node_modules/ejs/test/fixtures/with-context.ejs b/register/node_modules/ejs/test/fixtures/with-context.ejs
new file mode 100644
index 0000000..412a9be
--- /dev/null
+++ b/register/node_modules/ejs/test/fixtures/with-context.ejs
@@ -0,0 +1 @@
+<%= this.foo %>
diff --git a/register/node_modules/ejs/test/mocha.opts b/register/node_modules/ejs/test/mocha.opts
new file mode 100644
index 0000000..e30264f
--- /dev/null
+++ b/register/node_modules/ejs/test/mocha.opts
@@ -0,0 +1,3 @@
+--ui tdd
+--reporter spec
+--check-leaks
diff --git a/register/node_modules/ejs/test/tmp/include.ejs b/register/node_modules/ejs/test/tmp/include.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/node_modules/ejs/test/tmp/include.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/tmp/include_preprocessor.ejs b/register/node_modules/ejs/test/tmp/include_preprocessor.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/node_modules/ejs/test/tmp/include_preprocessor.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/node_modules/ejs/test/tmp/renderFile.ejs b/register/node_modules/ejs/test/tmp/renderFile.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/node_modules/ejs/test/tmp/renderFile.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/node_modules/express-session/HISTORY.md b/register/node_modules/express-session/HISTORY.md
new file mode 100644
index 0000000..21ca5ac
--- /dev/null
+++ b/register/node_modules/express-session/HISTORY.md
@@ -0,0 +1,366 @@
+1.15.3 / 2017-05-17
+===================
+
+  * deps: debug@2.6.7
+    - deps: ms@2.0.0
+
+1.15.2 / 2017-03-26
+===================
+
+  * deps: debug@2.6.3
+    - Fix `DEBUG_MAX_ARRAY_LENGTH`
+  * deps: uid-safe@~2.1.4
+    - Remove `base64-url` dependency
+
+1.15.1 / 2017-02-10
+===================
+
+  * deps: debug@2.6.1
+    - Fix deprecation messages in WebStorm and other editors
+    - Undeprecate `DEBUG_FD` set to `1` or `2`
+
+1.15.0 / 2017-01-22
+===================
+
+  * Fix detecting modified session when session contains "cookie" property
+  * Fix resaving already-saved reloaded session at end of request
+  * deps: crc@3.4.4
+    - perf: use `Buffer.from` when available
+  * deps: debug@2.6.0
+    - Allow colors in workers
+    - Deprecated `DEBUG_FD` environment variable
+    - Use same color for same namespace
+    - Fix error when running under React Native
+    - deps: ms@0.7.2
+  * perf: remove unreachable branch in set-cookie method
+
+1.14.2 / 2016-10-30
+===================
+
+  * deps: crc@3.4.1
+    - Fix deprecation warning in Node.js 7.x
+  * deps: uid-safe@~2.1.3
+    - deps: base64-url@1.3.3
+
+1.14.1 / 2016-08-24
+===================
+
+  * Fix not always resetting session max age before session save
+  * Fix the cookie `sameSite` option to actually alter the `Set-Cookie`
+  * deps: uid-safe@~2.1.2
+    - deps: base64-url@1.3.2
+
+1.14.0 / 2016-07-01
+===================
+
+  * Correctly inherit from `EventEmitter` class in `Store` base class
+  * Fix issue where `Set-Cookie` `Expires` was not always updated
+  * Methods are no longer enumerable on `req.session` object
+  * deps: cookie@0.3.1
+    - Add `sameSite` option
+    - Improve error message when `encode` is not a function
+    - Improve error message when `expires` is not a `Date`
+    - perf: enable strict mode
+    - perf: use for loop in parse
+    - perf: use string concatination for serialization
+  * deps: parseurl@~1.3.1
+    - perf: enable strict mode
+  * deps: uid-safe@~2.1.1
+    - Use `random-bytes` for byte source
+    - deps: base64-url@1.2.2
+  * perf: enable strict mode
+  * perf: remove argument reassignment
+
+1.13.0 / 2016-01-10
+===================
+
+  * Fix `rolling: true` to not set cookie when no session exists
+    - Better `saveUninitialized: false` + `rolling: true` behavior
+  * deps: crc@3.4.0
+
+1.12.1 / 2015-10-29
+===================
+
+  * deps: cookie@0.2.3
+    - Fix cookie `Max-Age` to never be a floating point number
+
+1.12.0 / 2015-10-25
+===================
+
+  * Support the value `'auto'` in the `cookie.secure` option
+  * deps: cookie@0.2.2
+    - Throw on invalid values provided to `serialize`
+  * deps: depd@~1.1.0
+    - Enable strict mode in more places
+    - Support web browser loading
+  * deps: on-headers@~1.0.1
+    - perf: enable strict mode
+
+1.11.3 / 2015-05-22
+===================
+
+  * deps: cookie@0.1.3
+    - Slight optimizations
+  * deps: crc@3.3.0
+
+1.11.2 / 2015-05-10
+===================
+
+  * deps: debug@~2.2.0
+    - deps: ms@0.7.1
+  * deps: uid-safe@~2.0.0
+
+1.11.1 / 2015-04-08
+===================
+
+  * Fix mutating `options.secret` value
+
+1.11.0 / 2015-04-07
+===================
+
+  * Support an array in `secret` option for key rotation
+  * deps: depd@~1.0.1
+
+1.10.4 / 2015-03-15
+===================
+
+  * deps: debug@~2.1.3
+    - Fix high intensity foreground color for bold
+    - deps: ms@0.7.0
+
+1.10.3 / 2015-02-16
+===================
+
+  * deps: cookie-signature@1.0.6
+  * deps: uid-safe@1.1.0
+    - Use `crypto.randomBytes`, if available
+    - deps: base64-url@1.2.1
+
+1.10.2 / 2015-01-31
+===================
+
+  * deps: uid-safe@1.0.3
+    - Fix error branch that would throw
+    - deps: base64-url@1.2.0
+
+1.10.1 / 2015-01-08
+===================
+
+  * deps: uid-safe@1.0.2
+    - Remove dependency on `mz`
+
+1.10.0 / 2015-01-05
+===================
+
+  * Add `store.touch` interface for session stores
+  * Fix `MemoryStore` expiration with `resave: false`
+  * deps: debug@~2.1.1
+
+1.9.3 / 2014-12-02
+==================
+
+  * Fix error when `req.sessionID` contains a non-string value
+
+1.9.2 / 2014-11-22
+==================
+
+  * deps: crc@3.2.1
+    - Minor fixes
+
+1.9.1 / 2014-10-22
+==================
+
+  * Remove unnecessary empty write call
+    - Fixes Node.js 0.11.14 behavior change
+    - Helps work-around Node.js 0.10.1 zlib bug
+
+1.9.0 / 2014-09-16
+==================
+
+  * deps: debug@~2.1.0
+    - Implement `DEBUG_FD` env variable support
+  * deps: depd@~1.0.0
+
+1.8.2 / 2014-09-15
+==================
+
+  * Use `crc` instead of `buffer-crc32` for speed
+  * deps: depd@0.4.5
+
+1.8.1 / 2014-09-08
+==================
+
+  * Keep `req.session.save` non-enumerable
+  * Prevent session prototype methods from being overwritten
+
+1.8.0 / 2014-09-07
+==================
+
+  * Do not resave already-saved session at end of request
+  * deps: cookie-signature@1.0.5
+  * deps: debug@~2.0.0
+
+1.7.6 / 2014-08-18
+==================
+
+  * Fix exception on `res.end(null)` calls
+
+1.7.5 / 2014-08-10
+==================
+
+  * Fix parsing original URL
+  * deps: on-headers@~1.0.0
+  * deps: parseurl@~1.3.0
+
+1.7.4 / 2014-08-05
+==================
+
+  * Fix response end delay for non-chunked responses
+
+1.7.3 / 2014-08-05
+==================
+
+  * Fix `res.end` patch to call correct upstream `res.write`
+
+1.7.2 / 2014-07-27
+==================
+
+  * deps: depd@0.4.4
+    - Work-around v8 generating empty stack traces
+
+1.7.1 / 2014-07-26
+==================
+
+  * deps: depd@0.4.3
+    - Fix exception when global `Error.stackTraceLimit` is too low
+
+1.7.0 / 2014-07-22
+==================
+
+  * Improve session-ending error handling
+    - Errors are passed to `next(err)` instead of `console.error`
+  * deps: debug@1.0.4
+  * deps: depd@0.4.2
+    - Add `TRACE_DEPRECATION` environment variable
+    - Remove non-standard grey color from color output
+    - Support `--no-deprecation` argument
+    - Support `--trace-deprecation` argument
+
+1.6.5 / 2014-07-11
+==================
+
+  * Do not require `req.originalUrl`
+  * deps: debug@1.0.3
+    - Add support for multiple wildcards in namespaces
+
+1.6.4 / 2014-07-07
+==================
+
+  * Fix blank responses for stores with synchronous operations
+
+1.6.3 / 2014-07-04
+==================
+
+  * Fix resave deprecation message
+
+1.6.2 / 2014-07-04
+==================
+
+  * Fix confusing option deprecation messages
+
+1.6.1 / 2014-06-28
+==================
+
+  * Fix saveUninitialized deprecation message
+
+1.6.0 / 2014-06-28
+==================
+
+  * Add deprecation message to undefined `resave` option
+  * Add deprecation message to undefined `saveUninitialized` option
+  * Fix `res.end` patch to return correct value
+  * Fix `res.end` patch to handle multiple `res.end` calls
+  * Reject cookies with missing signatures
+
+1.5.2 / 2014-06-26
+==================
+
+  * deps: cookie-signature@1.0.4
+    - fix for timing attacks
+
+1.5.1 / 2014-06-21
+==================
+
+  * Move hard-to-track-down `req.secret` deprecation message
+
+1.5.0 / 2014-06-19
+==================
+
+  * Debug name is now "express-session"
+  * Deprecate integration with `cookie-parser` middleware
+  * Deprecate looking for secret in `req.secret`
+  * Directly read cookies; `cookie-parser` no longer required
+  * Directly set cookies; `res.cookie` no longer required
+  * Generate session IDs with `uid-safe`, faster and even less collisions
+
+1.4.0 / 2014-06-17
+==================
+
+  * Add `genid` option to generate custom session IDs
+  * Add `saveUninitialized` option to control saving uninitialized sessions
+  * Add `unset` option to control unsetting `req.session`
+  * Generate session IDs with `rand-token` by default; reduce collisions
+  * deps: buffer-crc32@0.2.3
+
+1.3.1 / 2014-06-14
+==================
+
+  * Add description in package for npmjs.org listing
+
+1.3.0 / 2014-06-14
+==================
+
+  * Integrate with express "trust proxy" by default
+  * deps: debug@1.0.2
+
+1.2.1 / 2014-05-27
+==================
+
+  * Fix `resave` such that `resave: true` works
+
+1.2.0 / 2014-05-19
+==================
+
+  * Add `resave` option to control saving unmodified sessions
+
+1.1.0 / 2014-05-12
+==================
+
+  * Add `name` option; replacement for `key` option
+  * Use `setImmediate` in MemoryStore for node.js >= 0.10
+
+1.0.4 / 2014-04-27
+==================
+
+  * deps: debug@0.8.1
+
+1.0.3 / 2014-04-19
+==================
+
+  *  Use `res.cookie()` instead of `res.setHeader()`
+  * deps: cookie@0.1.2
+
+1.0.2 / 2014-02-23
+==================
+
+  * Add missing dependency to `package.json`
+
+1.0.1 / 2014-02-15
+==================
+
+  * Add missing dependencies to `package.json`
+
+1.0.0 / 2014-02-15
+==================
+
+  * Genesis from `connect`
diff --git a/register/node_modules/express-session/LICENSE b/register/node_modules/express-session/LICENSE
new file mode 100644
index 0000000..9b59ff8
--- /dev/null
+++ b/register/node_modules/express-session/LICENSE
@@ -0,0 +1,24 @@
+(The MIT License)
+
+Copyright (c) 2010 Sencha Inc.
+Copyright (c) 2011 TJ Holowaychuk <tj@vision-media.ca>
+Copyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/node_modules/express-session/README.md b/register/node_modules/express-session/README.md
new file mode 100644
index 0000000..df8dc5b
--- /dev/null
+++ b/register/node_modules/express-session/README.md
@@ -0,0 +1,749 @@
+# express-session
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+[![Gratipay][gratipay-image]][gratipay-url]
+
+## Installation
+
+This is a [Node.js](https://nodejs.org/en/) module available through the
+[npm registry](https://www.npmjs.com/). Installation is done using the
+[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):
+
+```sh
+$ npm install express-session
+```
+
+## API
+
+```js
+var session = require('express-session')
+```
+
+### session(options)
+
+Create a session middleware with the given `options`.
+
+**Note** Session data is _not_ saved in the cookie itself, just the session ID.
+Session data is stored server-side.
+
+**Note** Since version 1.5.0, the [`cookie-parser` middleware](https://www.npmjs.com/package/cookie-parser)
+no longer needs to be used for this module to work. This module now directly reads
+and writes cookies on `req`/`res`. Using `cookie-parser` may result in issues
+if the `secret` is not the same between this module and `cookie-parser`.
+
+**Warning** The default server-side session storage, `MemoryStore`, is _purposely_
+not designed for a production environment. It will leak memory under most
+conditions, does not scale past a single process, and is meant for debugging and
+developing.
+
+For a list of stores, see [compatible session stores](#compatible-session-stores).
+
+#### Options
+
+`express-session` accepts these properties in the options object.
+
+##### cookie
+
+Settings object for the session ID cookie. The default value is
+`{ path: '/', httpOnly: true, secure: false, maxAge: null }`.
+
+The following are options that can be set in this object.
+
+##### cookie.domain
+
+Specifies the value for the `Domain` `Set-Cookie` attribute. By default, no domain
+is set, and most clients will consider the cookie to apply to only the current
+domain.
+
+##### cookie.expires
+
+Specifies the `Date` object to be the value for the `Expires` `Set-Cookie` attribute.
+By default, no expiration is set, and most clients will consider this a
+"non-persistent cookie" and will delete it on a condition like exiting a web browser
+application.
+
+**Note** If both `expires` and `maxAge` are set in the options, then the last one
+defined in the object is what is used.
+
+**Note** The `expires` option should not be set directly; instead only use the `maxAge`
+option.
+
+##### cookie.httpOnly
+
+Specifies the `boolean` value for the `HttpOnly` `Set-Cookie` attribute. When truthy,
+the `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly`
+attribute is set.
+
+**Note** be careful when setting this to `true`, as compliant clients will not allow
+client-side JavaScript to see the cookie in `document.cookie`.
+
+##### cookie.maxAge
+
+Specifies the `number` (in milliseconds) to use when calculating the `Expires`
+`Set-Cookie` attribute. This is done by taking the current server time and adding
+`maxAge` milliseconds to the value to calculate an `Expires` datetime. By default,
+no maximum age is set.
+
+**Note** If both `expires` and `maxAge` are set in the options, then the last one
+defined in the object is what is used.
+
+##### cookie.path
+
+Specifies the value for the `Path` `Set-Cookie`. By default, this is set to `'/'`, which
+is the root path of the domain.
+
+##### cookie.sameSite
+
+Specifies the `boolean` or `string` to be the value for the `SameSite` `Set-Cookie` attribute.
+
+  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
+  - `false` will not set the `SameSite` attribute.
+  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.
+  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
+
+More information about the different enforcement levels can be found in the specification
+https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1
+
+**Note** This is an attribute that has not yet been fully standardized, and may change in
+the future. This also means many clients may ignore this attribute until they understand it.
+
+##### cookie.secure
+
+Specifies the `boolean` value for the `Secure` `Set-Cookie` attribute. When truthy,
+the `Secure` attribute is set, otherwise it is not. By default, the `Secure`
+attribute is not set.
+
+**Note** be careful when setting this to `true`, as compliant clients will not send
+the cookie back to the server in the future if the browser does not have an HTTPS
+connection.
+
+Please note that `secure: true` is a **recommended** option. However, it requires
+an https-enabled website, i.e., HTTPS is necessary for secure cookies. If `secure`
+is set, and you access your site over HTTP, the cookie will not be set. If you
+have your node.js behind a proxy and are using `secure: true`, you need to set
+"trust proxy" in express:
+
+```js
+var app = express()
+app.set('trust proxy', 1) // trust first proxy
+app.use(session({
+  secret: 'keyboard cat',
+  resave: false,
+  saveUninitialized: true,
+  cookie: { secure: true }
+}))
+```
+
+For using secure cookies in production, but allowing for testing in development,
+the following is an example of enabling this setup based on `NODE_ENV` in express:
+
+```js
+var app = express()
+var sess = {
+  secret: 'keyboard cat',
+  cookie: {}
+}
+
+if (app.get('env') === 'production') {
+  app.set('trust proxy', 1) // trust first proxy
+  sess.cookie.secure = true // serve secure cookies
+}
+
+app.use(session(sess))
+```
+
+The `cookie.secure` option can also be set to the special value `'auto'` to have
+this setting automatically match the determined security of the connection. Be
+careful when using this setting if the site is available both as HTTP and HTTPS,
+as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This
+is useful when the Express `"trust proxy"` setting is properly setup to simplify
+development vs production configuration.
+
+##### genid
+
+Function to call to generate a new session ID. Provide a function that returns
+a string that will be used as a session ID. The function is given `req` as the
+first argument if you want to use some value attached to `req` when generating
+the ID.
+
+The default value is a function which uses the `uid-safe` library to generate IDs.
+
+**NOTE** be careful to generate unique IDs so your sessions do not conflict.
+
+```js
+app.use(session({
+  genid: function(req) {
+    return genuuid() // use UUIDs for session IDs
+  },
+  secret: 'keyboard cat'
+}))
+```
+
+##### name
+
+The name of the session ID cookie to set in the response (and read from in the
+request).
+
+The default value is `'connect.sid'`.
+
+**Note** if you have multiple apps running on the same hostname (this is just
+the name, i.e. `localhost` or `127.0.0.1`; different schemes and ports do not
+name a different hostname), then you need to separate the session cookies from
+each other. The simplest method is to simply set different `name`s per app.
+
+##### proxy
+
+Trust the reverse proxy when setting secure cookies (via the "X-Forwarded-Proto"
+header).
+
+The default value is `undefined`.
+
+  - `true` The "X-Forwarded-Proto" header will be used.
+  - `false` All headers are ignored and the connection is considered secure only
+    if there is a direct TLS/SSL connection.
+  - `undefined` Uses the "trust proxy" setting from express
+
+##### resave
+
+Forces the session to be saved back to the session store, even if the session
+was never modified during the request. Depending on your store this may be
+necessary, but it can also create race conditions where a client makes two
+parallel requests to your server and changes made to the session in one
+request may get overwritten when the other request ends, even if it made no
+changes (this behavior also depends on what store you're using).
+
+The default value is `true`, but using the default has been deprecated,
+as the default will change in the future. Please research into this setting
+and choose what is appropriate to your use-case. Typically, you'll want
+`false`.
+
+How do I know if this is necessary for my store? The best way to know is to
+check with your store if it implements the `touch` method. If it does, then
+you can safely set `resave: false`. If it does not implement the `touch`
+method and your store sets an expiration date on stored sessions, then you
+likely need `resave: true`.
+
+##### rolling
+
+Force a session identifier cookie to be set on every response. The expiration
+is reset to the original [`maxAge`](#cookiemaxage), resetting the expiration
+countdown.
+
+The default value is `false`.
+
+**Note** When this option is set to `true` but the `saveUninitialized` option is
+set to `false`, the cookie will not be set on a response with an uninitialized
+session.
+
+##### saveUninitialized
+
+Forces a session that is "uninitialized" to be saved to the store. A session is
+uninitialized when it is new but not modified. Choosing `false` is useful for
+implementing login sessions, reducing server storage usage, or complying with
+laws that require permission before setting a cookie. Choosing `false` will also
+help with race conditions where a client makes multiple parallel requests
+without a session.
+
+The default value is `true`, but using the default has been deprecated, as the
+default will change in the future. Please research into this setting and
+choose what is appropriate to your use-case.
+
+**Note** if you are using Session in conjunction with PassportJS, Passport
+will add an empty Passport object to the session for use after a user is
+authenticated, which will be treated as a modification to the session, causing
+it to be saved. *This has been fixed in PassportJS 0.3.0*
+
+##### secret
+
+**Required option**
+
+This is the secret used to sign the session ID cookie. This can be either a string
+for a single secret, or an array of multiple secrets. If an array of secrets is
+provided, only the first element will be used to sign the session ID cookie, while
+all the elements will be considered when verifying the signature in requests.
+
+##### store
+
+The session store instance, defaults to a new `MemoryStore` instance.
+
+##### unset
+
+Control the result of unsetting `req.session` (through `delete`, setting to `null`,
+etc.).
+
+The default value is `'keep'`.
+
+  - `'destroy'` The session will be destroyed (deleted) when the response ends.
+  - `'keep'` The session in the store will be kept, but modifications made during
+    the request are ignored and not saved.
+
+### req.session
+
+To store or access session data, simply use the request property `req.session`,
+which is (generally) serialized as JSON by the store, so nested objects
+are typically fine. For example below is a user-specific view counter:
+
+```js
+// Use the session middleware
+app.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))
+
+// Access the session as req.session
+app.get('/', function(req, res, next) {
+  var sess = req.session
+  if (sess.views) {
+    sess.views++
+    res.setHeader('Content-Type', 'text/html')
+    res.write('<p>views: ' + sess.views + '</p>')
+    res.write('<p>expires in: ' + (sess.cookie.maxAge / 1000) + 's</p>')
+    res.end()
+  } else {
+    sess.views = 1
+    res.end('welcome to the session demo. refresh!')
+  }
+})
+```
+
+#### Session.regenerate(callback)
+
+To regenerate the session simply invoke the method. Once complete,
+a new SID and `Session` instance will be initialized at `req.session`
+and the `callback` will be invoked.
+
+```js
+req.session.regenerate(function(err) {
+  // will have a new session here
+})
+```
+
+#### Session.destroy(callback)
+
+Destroys the session and will unset the `req.session` property.
+Once complete, the `callback` will be invoked.
+
+```js
+req.session.destroy(function(err) {
+  // cannot access session here
+})
+```
+
+#### Session.reload(callback)
+
+Reloads the session data from the store and re-populates the
+`req.session` object. Once complete, the `callback` will be invoked.
+
+```js
+req.session.reload(function(err) {
+  // session updated
+})
+```
+
+#### Session.save(callback)
+
+Save the session back to the store, replacing the contents on the store with the
+contents in memory (though a store may do something else--consult the store's
+documentation for exact behavior).
+
+This method is automatically called at the end of the HTTP response if the
+session data has been altered (though this behavior can be altered with various
+options in the middleware constructor). Because of this, typically this method
+does not need to be called.
+
+There are some cases where it is useful to call this method, for example, long-
+lived requests or in WebSockets.
+
+```js
+req.session.save(function(err) {
+  // session saved
+})
+```
+
+#### Session.touch()
+
+Updates the `.maxAge` property. Typically this is
+not necessary to call, as the session middleware does this for you.
+
+### req.session.id
+
+Each session has a unique ID associated with it. This property is an
+alias of [`req.sessionID`](#reqsessionid-1) and cannot be modified.
+It has been added to make the session ID accessible from the `session`
+object.
+
+### req.session.cookie
+
+Each session has a unique cookie object accompany it. This allows
+you to alter the session cookie per visitor. For example we can
+set `req.session.cookie.expires` to `false` to enable the cookie
+to remain for only the duration of the user-agent.
+
+#### Cookie.maxAge
+
+Alternatively `req.session.cookie.maxAge` will return the time
+remaining in milliseconds, which we may also re-assign a new value
+to adjust the `.expires` property appropriately. The following
+are essentially equivalent
+
+```js
+var hour = 3600000
+req.session.cookie.expires = new Date(Date.now() + hour)
+req.session.cookie.maxAge = hour
+```
+
+For example when `maxAge` is set to `60000` (one minute), and 30 seconds
+has elapsed it will return `30000` until the current request has completed,
+at which time `req.session.touch()` is called to reset `req.session.maxAge`
+to its original value.
+
+```js
+req.session.cookie.maxAge // => 30000
+```
+
+### req.sessionID
+
+To get the ID of the loaded session, access the request property
+`req.sessionID`. This is simply a read-only value set when a session
+is loaded/created.
+
+## Session Store Implementation
+
+Every session store _must_ be an `EventEmitter` and implement specific
+methods. The following methods are the list of **required**, **recommended**,
+and **optional**.
+
+  * Required methods are ones that this module will always call on the store.
+  * Recommended methods are ones that this module will call on the store if
+    available.
+  * Optional methods are ones this module does not call at all, but helps
+    present uniform stores to users.
+
+For an example implementation view the [connect-redis](http://github.com/visionmedia/connect-redis) repo.
+
+### store.all(callback)
+
+**Optional**
+
+This optional method is used to get all sessions in the store as an array. The
+`callback` should be called as `callback(error, sessions)`.
+
+### store.destroy(sid, callback)
+
+**Required**
+
+This required method is used to destroy/delete a session from the store given
+a session ID (`sid`). The `callback` should be called as `callback(error)` once
+the session is destroyed.
+
+### store.clear(callback)
+
+**Optional**
+
+This optional method is used to delete all sessions from the store. The
+`callback` should be called as `callback(error)` once the store is cleared.
+
+### store.length(callback)
+
+**Optional**
+
+This optional method is used to get the count of all sessions in the store.
+The `callback` should be called as `callback(error, len)`.
+
+### store.get(sid, callback)
+
+**Required**
+
+This required method is used to get a session from the store given a session
+ID (`sid`). The `callback` should be called as `callback(error, session)`.
+
+The `session` argument should be a session if found, otherwise `null` or
+`undefined` if the session was not found (and there was no error). A special
+case is made when `error.code === 'ENOENT'` to act like `callback(null, null)`.
+
+### store.set(sid, session, callback)
+
+**Required**
+
+This required method is used to upsert a session into the store given a
+session ID (`sid`) and session (`session`) object. The callback should be
+called as `callback(error)` once the session has been set in the store.
+
+### store.touch(sid, session, callback)
+
+**Recommended**
+
+This recommended method is used to "touch" a given session given a
+session ID (`sid`) and session (`session`) object. The `callback` should be
+called as `callback(error)` once the session has been touched.
+
+This is primarily used when the store will automatically delete idle sessions
+and this method is used to signal to the store the given session is active,
+potentially resetting the idle timer.
+
+## Compatible Session Stores
+
+The following modules implement a session store that is compatible with this
+module. Please make a PR to add additional modules :)
+
+[![★][aerospike-session-store-image] aerospike-session-store][aerospike-session-store-url] A session store using [Aerospike](http://www.aerospike.com/).
+
+[aerospike-session-store-url]: https://www.npmjs.com/package/aerospike-session-store
+[aerospike-session-store-image]: https://img.shields.io/github/stars/aerospike/aerospike-session-store-expressjs.svg?label=%E2%98%85
+
+[![★][cassandra-store-image] cassandra-store][cassandra-store-url] An Apache Cassandra-based session store.
+
+[cassandra-store-url]: https://www.npmjs.com/package/cassandra-store
+[cassandra-store-image]: https://img.shields.io/github/stars/webcc/cassandra-store.svg?label=%E2%98%85
+
+[![★][cluster-store-image] cluster-store][cluster-store-url] A wrapper for using in-process / embedded
+stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2
+and other multi-core embedded devices).
+
+[cluster-store-url]: https://www.npmjs.com/package/cluster-store
+[cluster-store-image]: https://img.shields.io/github/stars/coolaj86/cluster-store.svg?label=%E2%98%85
+
+[![★][connect-azuretables-image] connect-azuretables][connect-azuretables-url] An [Azure Table Storage](https://azure.microsoft.com/en-gb/services/storage/tables/)-based session store.
+
+[connect-azuretables-url]: https://www.npmjs.com/package/connect-azuretables
+[connect-azuretables-image]: https://img.shields.io/github/stars/mike-goodwin/connect-azuretables.svg?label=%E2%98%85
+
+[![★][connect-cloudant-store-image] connect-cloudant-store][connect-cloudant-store-url] An [IBM Cloudant](https://cloudant.com/)-based session store.
+
+[connect-cloudant-store-url]: https://www.npmjs.com/package/connect-cloudant-store
+[connect-cloudant-store-image]: https://img.shields.io/github/stars/adriantanasa/connect-cloudant-store.svg?label=%E2%98%85
+
+[![★][connect-couchbase-image] connect-couchbase][connect-couchbase-url] A [couchbase](http://www.couchbase.com/)-based session store.
+
+[connect-couchbase-url]: https://www.npmjs.com/package/connect-couchbase
+[connect-couchbase-image]: https://img.shields.io/github/stars/christophermina/connect-couchbase.svg?label=%E2%98%85
+
+[![★][connect-datacache-image] connect-datacache][connect-datacache-url] An [IBM Bluemix Data Cache](http://www.ibm.com/cloud-computing/bluemix/)-based session store.
+
+[connect-datacache-url]: https://www.npmjs.com/package/connect-datacache
+[connect-datacache-image]: https://img.shields.io/github/stars/adriantanasa/connect-datacache.svg?label=%E2%98%85
+
+[![★][connect-db2-image] connect-db2][connect-db2-url] An IBM DB2-based session store built using [ibm_db](https://www.npmjs.com/package/ibm_db) module.
+
+[connect-db2-url]: https://www.npmjs.com/package/connect-db2
+[connect-db2-image]: https://img.shields.io/github/stars/wallali/connect-db2.svg?label=%E2%98%85
+
+[![★][connect-dynamodb-image] connect-dynamodb][connect-dynamodb-url] A DynamoDB-based session store.
+
+[connect-dynamodb-url]: https://github.com/ca98am79/connect-dynamodb
+[connect-dynamodb-image]: https://img.shields.io/github/stars/ca98am79/connect-dynamodb.svg?label=%E2%98%85
+
+[![★][connect-loki-image] connect-loki][connect-loki-url] A Loki.js-based session store.
+
+[connect-loki-url]: https://www.npmjs.com/package/connect-loki
+[connect-loki-image]: https://img.shields.io/github/stars/Requarks/connect-loki.svg?label=%E2%98%85
+
+[![★][connect-ml-image] connect-ml][connect-ml-url] A MarkLogic Server-based session store.
+
+[connect-ml-url]: https://www.npmjs.com/package/connect-ml
+[connect-ml-image]: https://img.shields.io/github/stars/bluetorch/connect-ml.svg?label=%E2%98%85
+
+[![★][connect-mssql-image] connect-mssql][connect-mssql-url] A SQL Server-based session store.
+
+[connect-mssql-url]: https://www.npmjs.com/package/connect-mssql
+[connect-mssql-image]: https://img.shields.io/github/stars/patriksimek/connect-mssql.svg?label=%E2%98%85
+
+[![★][connect-monetdb-image] connect-monetdb][connect-monetdb-url] A MonetDB-based session store.
+
+[connect-monetdb-url]: https://www.npmjs.com/package/connect-monetdb
+[connect-monetdb-image]: https://img.shields.io/github/stars/MonetDB/npm-connect-monetdb.svg?label=%E2%98%85
+
+[![★][connect-mongo-image] connect-mongo][connect-mongo-url] A MongoDB-based session store.
+
+[connect-mongo-url]: https://www.npmjs.com/package/connect-mongo
+[connect-mongo-image]: https://img.shields.io/github/stars/kcbanner/connect-mongo.svg?label=%E2%98%85
+
+[![★][connect-mongodb-session-image] connect-mongodb-session][connect-mongodb-session-url] Lightweight MongoDB-based session store built and maintained by MongoDB.
+
+[connect-mongodb-session-url]: https://www.npmjs.com/package/connect-mongodb-session
+[connect-mongodb-session-image]: https://img.shields.io/github/stars/mongodb-js/connect-mongodb-session.svg?label=%E2%98%85
+
+[![★][connect-pg-simple-image] connect-pg-simple][connect-pg-simple-url] A PostgreSQL-based session store.
+
+[connect-pg-simple-url]: https://www.npmjs.com/package/connect-pg-simple
+[connect-pg-simple-image]: https://img.shields.io/github/stars/voxpelli/node-connect-pg-simple.svg?label=%E2%98%85
+
+[![★][connect-redis-image] connect-redis][connect-redis-url] A Redis-based session store.
+
+[connect-redis-url]: https://www.npmjs.com/package/connect-redis
+[connect-redis-image]: https://img.shields.io/github/stars/tj/connect-redis.svg?label=%E2%98%85
+
+[![★][connect-memcached-image] connect-memcached][connect-memcached-url] A memcached-based session store.
+
+[connect-memcached-url]: https://www.npmjs.com/package/connect-memcached
+[connect-memcached-image]: https://img.shields.io/github/stars/balor/connect-memcached.svg?label=%E2%98%85
+
+[![★][connect-memjs-image] connect-memjs][connect-memjs-url] A memcached-based session store using
+[memjs](https://www.npmjs.com/package/memjs) as the memcached client.
+
+[connect-memjs-url]: https://www.npmjs.com/package/connect-memjs
+[connect-memjs-image]: https://img.shields.io/github/stars/liamdon/connect-memjs.svg?label=%E2%98%85
+
+[![★][connect-session-knex-image] connect-session-knex][connect-session-knex-url] A session store using
+[Knex.js](http://knexjs.org/), which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.
+
+[connect-session-knex-url]: https://www.npmjs.com/package/connect-session-knex
+[connect-session-knex-image]: https://img.shields.io/github/stars/llambda/connect-session-knex.svg?label=%E2%98%85
+
+[![★][connect-session-sequelize-image] connect-session-sequelize][connect-session-sequelize-url] A session store using
+[Sequelize.js](http://sequelizejs.com/), which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.
+
+[connect-session-sequelize-url]: https://www.npmjs.com/package/connect-session-sequelize
+[connect-session-sequelize-image]: https://img.shields.io/github/stars/mweibel/connect-session-sequelize.svg?label=%E2%98%85
+
+[![★][express-mysql-session-image] express-mysql-session][express-mysql-session-url] A session store using native
+[MySQL](https://www.mysql.com/) via the [node-mysql](https://github.com/felixge/node-mysql) module.
+
+[express-mysql-session-url]: https://www.npmjs.com/package/express-mysql-session
+[express-mysql-session-image]: https://img.shields.io/github/stars/chill117/express-mysql-session.svg?label=%E2%98%85
+
+[![★][express-oracle-session-image] express-oracle-session][express-oracle-session-url] A session store using native
+[oracle](https://www.oracle.com/) via the [node-oracledb](https://www.npmjs.com/package/oracledb) module.
+
+[express-oracle-session-url]: https://www.npmjs.com/package/express-oracle-session
+[express-oracle-session-image]: https://img.shields.io/github/stars/slumber86/express-oracle-session.svg?label=%E2%98%85
+
+[![★][express-sessions-image] express-sessions][express-sessions-url]: A session store supporting both MongoDB and Redis.
+
+[express-sessions-url]: https://www.npmjs.com/package/express-sessions
+[express-sessions-image]: https://img.shields.io/github/stars/konteck/express-sessions.svg?label=%E2%98%85
+
+[![★][connect-sqlite3-image] connect-sqlite3][connect-sqlite3-url] A [SQLite3](https://github.com/mapbox/node-sqlite3) session store modeled after the TJ's `connect-redis` store.
+
+[connect-sqlite3-url]: https://www.npmjs.com/package/connect-sqlite3
+[connect-sqlite3-image]: https://img.shields.io/github/stars/rawberg/connect-sqlite3.svg?label=%E2%98%85
+
+[![★][documentdb-session-image] documentdb-session][documentdb-session-url] A session store for Microsoft Azure's [DocumentDB](https://azure.microsoft.com/en-us/services/documentdb/) NoSQL database service.
+
+[documentdb-session-url]: https://www.npmjs.com/package/documentdb-session
+[documentdb-session-image]: https://img.shields.io/github/stars/dwhieb/documentdb-session.svg?label=%E2%98%85
+
+[![★][express-nedb-session-image] express-nedb-session][express-nedb-session-url] A NeDB-based session store.
+
+[express-nedb-session-url]: https://www.npmjs.com/package/express-nedb-session
+[express-nedb-session-image]: https://img.shields.io/github/stars/louischatriot/express-nedb-session.svg?label=%E2%98%85
+
+[![★][express-session-cache-manager-image] express-session-cache-manager][express-session-cache-manager-url] 
+A store that implements [cache-manager](https://www.npmjs.com/package/cache-manager), which supports
+a [variety of storage types](https://www.npmjs.com/package/cache-manager#store-engines).
+
+[express-session-cache-manager-url]: https://www.npmjs.com/package/express-session-cache-manager
+[express-session-cache-manager-image]: https://img.shields.io/github/stars/theogravity/express-session-cache-manager.svg?label=%E2%98%85
+
+[![★][express-session-level-image] express-session-level][express-session-level-url] A [LevelDB](https://github.com/Level/levelup) based session store.
+
+[express-session-level-url]: https://www.npmjs.com/package/express-session-level
+[express-session-level-image]: https://img.shields.io/github/stars/tgohn/express-session-level.svg?label=%E2%98%85
+
+[![★][express-etcd-image] express-etcd][express-etcd-url] An [etcd](https://github.com/stianeikeland/node-etcd) based session store.
+
+[express-etcd-url]: https://www.npmjs.com/package/express-etcd
+[express-etcd-image]: https://img.shields.io/github/stars/gildean/express-etcd.svg?label=%E2%98%85
+
+[![★][fortune-session-image] fortune-session][fortune-session-url] A [Fortune.js](https://github.com/fortunejs/fortune)
+based session store. Supports all backends supported by Fortune (MongoDB, Redis, Postgres, NeDB).
+
+[fortune-session-url]: https://www.npmjs.com/package/fortune-session
+[fortune-session-image]: https://img.shields.io/github/stars/aliceklipper/fortune-session.svg?label=%E2%98%85
+
+[![★][hazelcast-store-image] hazelcast-store][hazelcast-store-url] A Hazelcast-based session store built on the [Hazelcast Node Client](https://www.npmjs.com/package/hazelcast-client).
+
+[hazelcast-store-url]: https://www.npmjs.com/package/hazelcast-store
+[hazelcast-store-image]: https://img.shields.io/github/stars/jackspaniel/hazelcast-store.svg?label=%E2%98%85
+
+[![★][level-session-store-image] level-session-store][level-session-store-url] A LevelDB-based session store.
+
+[level-session-store-url]: https://www.npmjs.com/package/level-session-store
+[level-session-store-image]: https://img.shields.io/github/stars/scriptollc/level-session-store.svg?label=%E2%98%85
+
+[![★][medea-session-store-image] medea-session-store][medea-session-store-url] A Medea-based session store.
+
+[medea-session-store-url]: https://www.npmjs.com/package/medea-session-store
+[medea-session-store-image]: https://img.shields.io/github/stars/BenjaminVadant/medea-session-store.svg?label=%E2%98%85
+
+[![★][mssql-session-store-image] mssql-session-store][mssql-session-store-url] A SQL Server-based session store.
+
+[mssql-session-store-url]: https://www.npmjs.com/package/mssql-session-store
+[mssql-session-store-image]: https://img.shields.io/github/stars/jwathen/mssql-session-store.svg?label=%E2%98%85
+
+[![★][nedb-session-store-image] nedb-session-store][nedb-session-store-url] An alternate NeDB-based (either in-memory or file-persisted) session store.
+
+[nedb-session-store-url]: https://www.npmjs.com/package/nedb-session-store
+[nedb-session-store-image]: https://img.shields.io/github/stars/JamesMGreene/nedb-session-store.svg?label=%E2%98%85
+
+[![★][sequelstore-connect-image] sequelstore-connect][sequelstore-connect-url] A session store using [Sequelize.js](http://sequelizejs.com/).
+
+[sequelstore-connect-url]: https://www.npmjs.com/package/sequelstore-connect
+[sequelstore-connect-image]: https://img.shields.io/github/stars/MattMcFarland/sequelstore-connect.svg?label=%E2%98%85
+
+[![★][session-file-store-image] session-file-store][session-file-store-url] A file system-based session store.
+
+[session-file-store-url]: https://www.npmjs.com/package/session-file-store
+[session-file-store-image]: https://img.shields.io/github/stars/valery-barysok/session-file-store.svg?label=%E2%98%85
+
+[![★][session-rethinkdb-image] session-rethinkdb][session-rethinkdb-url] A [RethinkDB](http://rethinkdb.com/)-based session store.
+
+[session-rethinkdb-url]: https://www.npmjs.com/package/session-rethinkdb
+[session-rethinkdb-image]: https://img.shields.io/github/stars/llambda/session-rethinkdb.svg?label=%E2%98%85
+
+## Example
+
+A simple example using `express-session` to store page views for a user.
+
+```js
+var express = require('express')
+var parseurl = require('parseurl')
+var session = require('express-session')
+
+var app = express()
+
+app.use(session({
+  secret: 'keyboard cat',
+  resave: false,
+  saveUninitialized: true
+}))
+
+app.use(function (req, res, next) {
+  var views = req.session.views
+
+  if (!views) {
+    views = req.session.views = {}
+  }
+
+  // get the url pathname
+  var pathname = parseurl(req).pathname
+
+  // count the views
+  views[pathname] = (views[pathname] || 0) + 1
+
+  next()
+})
+
+app.get('/foo', function (req, res, next) {
+  res.send('you viewed this page ' + req.session.views['/foo'] + ' times')
+})
+
+app.get('/bar', function (req, res, next) {
+  res.send('you viewed this page ' + req.session.views['/bar'] + ' times')
+})
+```
+
+## License
+
+[MIT](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/express-session.svg
+[npm-url]: https://npmjs.org/package/express-session
+[travis-image]: https://img.shields.io/travis/expressjs/session/master.svg
+[travis-url]: https://travis-ci.org/expressjs/session
+[coveralls-image]: https://img.shields.io/coveralls/expressjs/session/master.svg
+[coveralls-url]: https://coveralls.io/r/expressjs/session?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/express-session.svg
+[downloads-url]: https://npmjs.org/package/express-session
+[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg
+[gratipay-url]: https://gratipay.com/dougwilson/
diff --git a/register/node_modules/express-session/index.js b/register/node_modules/express-session/index.js
new file mode 100644
index 0000000..8db4eca
--- /dev/null
+++ b/register/node_modules/express-session/index.js
@@ -0,0 +1,664 @@
+/*!
+ * express-session
+ * Copyright(c) 2010 Sencha Inc.
+ * Copyright(c) 2011 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var cookie = require('cookie');
+var crc = require('crc').crc32;
+var debug = require('debug')('express-session');
+var deprecate = require('depd')('express-session');
+var parseUrl = require('parseurl');
+var uid = require('uid-safe').sync
+  , onHeaders = require('on-headers')
+  , signature = require('cookie-signature')
+
+var Session = require('./session/session')
+  , MemoryStore = require('./session/memory')
+  , Cookie = require('./session/cookie')
+  , Store = require('./session/store')
+
+// environment
+
+var env = process.env.NODE_ENV;
+
+/**
+ * Expose the middleware.
+ */
+
+exports = module.exports = session;
+
+/**
+ * Expose constructors.
+ */
+
+exports.Store = Store;
+exports.Cookie = Cookie;
+exports.Session = Session;
+exports.MemoryStore = MemoryStore;
+
+/**
+ * Warning message for `MemoryStore` usage in production.
+ * @private
+ */
+
+var warning = 'Warning: connect.session() MemoryStore is not\n'
+  + 'designed for a production environment, as it will leak\n'
+  + 'memory, and will not scale past a single process.';
+
+/**
+ * Node.js 0.8+ async implementation.
+ * @private
+ */
+
+/* istanbul ignore next */
+var defer = typeof setImmediate === 'function'
+  ? setImmediate
+  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
+
+/**
+ * Setup session store with the given `options`.
+ *
+ * @param {Object} [options]
+ * @param {Object} [options.cookie] Options for cookie
+ * @param {Function} [options.genid]
+ * @param {String} [options.name=connect.sid] Session ID cookie name
+ * @param {Boolean} [options.proxy]
+ * @param {Boolean} [options.resave] Resave unmodified sessions back to the store
+ * @param {Boolean} [options.rolling] Enable/disable rolling session expiration
+ * @param {Boolean} [options.saveUninitialized] Save uninitialized sessions to the store
+ * @param {String|Array} [options.secret] Secret for signing session ID
+ * @param {Object} [options.store=MemoryStore] Session store
+ * @param {String} [options.unset]
+ * @return {Function} middleware
+ * @public
+ */
+
+function session(options) {
+  var opts = options || {}
+
+  // get the cookie options
+  var cookieOptions = opts.cookie || {}
+
+  // get the session id generate function
+  var generateId = opts.genid || generateSessionId
+
+  // get the session cookie name
+  var name = opts.name || opts.key || 'connect.sid'
+
+  // get the session store
+  var store = opts.store || new MemoryStore()
+
+  // get the trust proxy setting
+  var trustProxy = opts.proxy
+
+  // get the resave session option
+  var resaveSession = opts.resave;
+
+  // get the rolling session option
+  var rollingSessions = Boolean(opts.rolling)
+
+  // get the save uninitialized session option
+  var saveUninitializedSession = opts.saveUninitialized
+
+  // get the cookie signing secret
+  var secret = opts.secret
+
+  if (typeof generateId !== 'function') {
+    throw new TypeError('genid option must be a function');
+  }
+
+  if (resaveSession === undefined) {
+    deprecate('undefined resave option; provide resave option');
+    resaveSession = true;
+  }
+
+  if (saveUninitializedSession === undefined) {
+    deprecate('undefined saveUninitialized option; provide saveUninitialized option');
+    saveUninitializedSession = true;
+  }
+
+  if (opts.unset && opts.unset !== 'destroy' && opts.unset !== 'keep') {
+    throw new TypeError('unset option must be "destroy" or "keep"');
+  }
+
+  // TODO: switch to "destroy" on next major
+  var unsetDestroy = opts.unset === 'destroy'
+
+  if (Array.isArray(secret) && secret.length === 0) {
+    throw new TypeError('secret option array must contain one or more strings');
+  }
+
+  if (secret && !Array.isArray(secret)) {
+    secret = [secret];
+  }
+
+  if (!secret) {
+    deprecate('req.secret; provide secret option');
+  }
+
+  // notify user that this store is not
+  // meant for a production environment
+  /* istanbul ignore next: not tested */
+  if ('production' == env && store instanceof MemoryStore) {
+    console.warn(warning);
+  }
+
+  // generates the new session
+  store.generate = function(req){
+    req.sessionID = generateId(req);
+    req.session = new Session(req);
+    req.session.cookie = new Cookie(cookieOptions);
+
+    if (cookieOptions.secure === 'auto') {
+      req.session.cookie.secure = issecure(req, trustProxy);
+    }
+  };
+
+  var storeImplementsTouch = typeof store.touch === 'function';
+
+  // register event listeners for the store to track readiness
+  var storeReady = true
+  store.on('disconnect', function ondisconnect() {
+    storeReady = false
+  })
+  store.on('connect', function onconnect() {
+    storeReady = true
+  })
+
+  return function session(req, res, next) {
+    // self-awareness
+    if (req.session) {
+      next()
+      return
+    }
+
+    // Handle connection as if there is no session if
+    // the store has temporarily disconnected etc
+    if (!storeReady) {
+      debug('store is disconnected')
+      next()
+      return
+    }
+
+    // pathname mismatch
+    var originalPath = parseUrl.original(req).pathname;
+    if (originalPath.indexOf(cookieOptions.path || '/') !== 0) return next();
+
+    // ensure a secret is available or bail
+    if (!secret && !req.secret) {
+      next(new Error('secret option required for sessions'));
+      return;
+    }
+
+    // backwards compatibility for signed cookies
+    // req.secret is passed from the cookie parser middleware
+    var secrets = secret || [req.secret];
+
+    var originalHash;
+    var originalId;
+    var savedHash;
+    var touched = false
+
+    // expose store
+    req.sessionStore = store;
+
+    // get the session ID from the cookie
+    var cookieId = req.sessionID = getcookie(req, name, secrets);
+
+    // set-cookie
+    onHeaders(res, function(){
+      if (!req.session) {
+        debug('no session');
+        return;
+      }
+
+      if (!shouldSetCookie(req)) {
+        return;
+      }
+
+      // only send secure cookies via https
+      if (req.session.cookie.secure && !issecure(req, trustProxy)) {
+        debug('not secured');
+        return;
+      }
+
+      if (!touched) {
+        // touch session
+        req.session.touch()
+        touched = true
+      }
+
+      // set cookie
+      setcookie(res, name, req.sessionID, secrets[0], req.session.cookie.data);
+    });
+
+    // proxy end() to commit the session
+    var _end = res.end;
+    var _write = res.write;
+    var ended = false;
+    res.end = function end(chunk, encoding) {
+      if (ended) {
+        return false;
+      }
+
+      ended = true;
+
+      var ret;
+      var sync = true;
+
+      function writeend() {
+        if (sync) {
+          ret = _end.call(res, chunk, encoding);
+          sync = false;
+          return;
+        }
+
+        _end.call(res);
+      }
+
+      function writetop() {
+        if (!sync) {
+          return ret;
+        }
+
+        if (chunk == null) {
+          ret = true;
+          return ret;
+        }
+
+        var contentLength = Number(res.getHeader('Content-Length'));
+
+        if (!isNaN(contentLength) && contentLength > 0) {
+          // measure chunk
+          chunk = !Buffer.isBuffer(chunk)
+            ? new Buffer(chunk, encoding)
+            : chunk;
+          encoding = undefined;
+
+          if (chunk.length !== 0) {
+            debug('split response');
+            ret = _write.call(res, chunk.slice(0, chunk.length - 1));
+            chunk = chunk.slice(chunk.length - 1, chunk.length);
+            return ret;
+          }
+        }
+
+        ret = _write.call(res, chunk, encoding);
+        sync = false;
+
+        return ret;
+      }
+
+      if (shouldDestroy(req)) {
+        // destroy session
+        debug('destroying');
+        store.destroy(req.sessionID, function ondestroy(err) {
+          if (err) {
+            defer(next, err);
+          }
+
+          debug('destroyed');
+          writeend();
+        });
+
+        return writetop();
+      }
+
+      // no session to save
+      if (!req.session) {
+        debug('no session');
+        return _end.call(res, chunk, encoding);
+      }
+
+      if (!touched) {
+        // touch session
+        req.session.touch()
+        touched = true
+      }
+
+      if (shouldSave(req)) {
+        req.session.save(function onsave(err) {
+          if (err) {
+            defer(next, err);
+          }
+
+          writeend();
+        });
+
+        return writetop();
+      } else if (storeImplementsTouch && shouldTouch(req)) {
+        // store implements touch method
+        debug('touching');
+        store.touch(req.sessionID, req.session, function ontouch(err) {
+          if (err) {
+            defer(next, err);
+          }
+
+          debug('touched');
+          writeend();
+        });
+
+        return writetop();
+      }
+
+      return _end.call(res, chunk, encoding);
+    };
+
+    // generate the session
+    function generate() {
+      store.generate(req);
+      originalId = req.sessionID;
+      originalHash = hash(req.session);
+      wrapmethods(req.session);
+    }
+
+    // wrap session methods
+    function wrapmethods(sess) {
+      var _reload = sess.reload
+      var _save = sess.save;
+
+      function reload(callback) {
+        debug('reloading %s', this.id)
+        _reload.call(this, function () {
+          wrapmethods(req.session)
+          callback.apply(this, arguments)
+        })
+      }
+
+      function save() {
+        debug('saving %s', this.id);
+        savedHash = hash(this);
+        _save.apply(this, arguments);
+      }
+
+      Object.defineProperty(sess, 'reload', {
+        configurable: true,
+        enumerable: false,
+        value: reload,
+        writable: true
+      })
+
+      Object.defineProperty(sess, 'save', {
+        configurable: true,
+        enumerable: false,
+        value: save,
+        writable: true
+      });
+    }
+
+    // check if session has been modified
+    function isModified(sess) {
+      return originalId !== sess.id || originalHash !== hash(sess);
+    }
+
+    // check if session has been saved
+    function isSaved(sess) {
+      return originalId === sess.id && savedHash === hash(sess);
+    }
+
+    // determine if session should be destroyed
+    function shouldDestroy(req) {
+      return req.sessionID && unsetDestroy && req.session == null;
+    }
+
+    // determine if session should be saved to store
+    function shouldSave(req) {
+      // cannot set cookie without a session ID
+      if (typeof req.sessionID !== 'string') {
+        debug('session ignored because of bogus req.sessionID %o', req.sessionID);
+        return false;
+      }
+
+      return !saveUninitializedSession && cookieId !== req.sessionID
+        ? isModified(req.session)
+        : !isSaved(req.session)
+    }
+
+    // determine if session should be touched
+    function shouldTouch(req) {
+      // cannot set cookie without a session ID
+      if (typeof req.sessionID !== 'string') {
+        debug('session ignored because of bogus req.sessionID %o', req.sessionID);
+        return false;
+      }
+
+      return cookieId === req.sessionID && !shouldSave(req);
+    }
+
+    // determine if cookie should be set on response
+    function shouldSetCookie(req) {
+      // cannot set cookie without a session ID
+      if (typeof req.sessionID !== 'string') {
+        return false;
+      }
+
+      return cookieId != req.sessionID
+        ? saveUninitializedSession || isModified(req.session)
+        : rollingSessions || req.session.cookie.expires != null && isModified(req.session);
+    }
+
+    // generate a session if the browser doesn't send a sessionID
+    if (!req.sessionID) {
+      debug('no SID sent, generating session');
+      generate();
+      next();
+      return;
+    }
+
+    // generate the session object
+    debug('fetching %s', req.sessionID);
+    store.get(req.sessionID, function(err, sess){
+      // error handling
+      if (err) {
+        debug('error %j', err);
+
+        if (err.code !== 'ENOENT') {
+          next(err);
+          return;
+        }
+
+        generate();
+      // no session
+      } else if (!sess) {
+        debug('no session found');
+        generate();
+      // populate req.session
+      } else {
+        debug('session found');
+        store.createSession(req, sess);
+        originalId = req.sessionID;
+        originalHash = hash(sess);
+
+        if (!resaveSession) {
+          savedHash = originalHash
+        }
+
+        wrapmethods(req.session);
+      }
+
+      next();
+    });
+  };
+};
+
+/**
+ * Generate a session ID for a new session.
+ *
+ * @return {String}
+ * @private
+ */
+
+function generateSessionId(sess) {
+  return uid(24);
+}
+
+/**
+ * Get the session ID cookie from request.
+ *
+ * @return {string}
+ * @private
+ */
+
+function getcookie(req, name, secrets) {
+  var header = req.headers.cookie;
+  var raw;
+  var val;
+
+  // read from cookie header
+  if (header) {
+    var cookies = cookie.parse(header);
+
+    raw = cookies[name];
+
+    if (raw) {
+      if (raw.substr(0, 2) === 's:') {
+        val = unsigncookie(raw.slice(2), secrets);
+
+        if (val === false) {
+          debug('cookie signature invalid');
+          val = undefined;
+        }
+      } else {
+        debug('cookie unsigned')
+      }
+    }
+  }
+
+  // back-compat read from cookieParser() signedCookies data
+  if (!val && req.signedCookies) {
+    val = req.signedCookies[name];
+
+    if (val) {
+      deprecate('cookie should be available in req.headers.cookie');
+    }
+  }
+
+  // back-compat read from cookieParser() cookies data
+  if (!val && req.cookies) {
+    raw = req.cookies[name];
+
+    if (raw) {
+      if (raw.substr(0, 2) === 's:') {
+        val = unsigncookie(raw.slice(2), secrets);
+
+        if (val) {
+          deprecate('cookie should be available in req.headers.cookie');
+        }
+
+        if (val === false) {
+          debug('cookie signature invalid');
+          val = undefined;
+        }
+      } else {
+        debug('cookie unsigned')
+      }
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Hash the given `sess` object omitting changes to `.cookie`.
+ *
+ * @param {Object} sess
+ * @return {String}
+ * @private
+ */
+
+function hash(sess) {
+  return crc(JSON.stringify(sess, function (key, val) {
+    // ignore sess.cookie property
+    if (this === sess && key === 'cookie') {
+      return
+    }
+
+    return val
+  }))
+}
+
+/**
+ * Determine if request is secure.
+ *
+ * @param {Object} req
+ * @param {Boolean} [trustProxy]
+ * @return {Boolean}
+ * @private
+ */
+
+function issecure(req, trustProxy) {
+  // socket is https server
+  if (req.connection && req.connection.encrypted) {
+    return true;
+  }
+
+  // do not trust proxy
+  if (trustProxy === false) {
+    return false;
+  }
+
+  // no explicit trust; try req.secure from express
+  if (trustProxy !== true) {
+    var secure = req.secure;
+    return typeof secure === 'boolean'
+      ? secure
+      : false;
+  }
+
+  // read the proto from x-forwarded-proto header
+  var header = req.headers['x-forwarded-proto'] || '';
+  var index = header.indexOf(',');
+  var proto = index !== -1
+    ? header.substr(0, index).toLowerCase().trim()
+    : header.toLowerCase().trim()
+
+  return proto === 'https';
+}
+
+/**
+ * Set cookie on response.
+ *
+ * @private
+ */
+
+function setcookie(res, name, val, secret, options) {
+  var signed = 's:' + signature.sign(val, secret);
+  var data = cookie.serialize(name, signed, options);
+
+  debug('set-cookie %s', data);
+
+  var prev = res.getHeader('set-cookie') || [];
+  var header = Array.isArray(prev) ? prev.concat(data) : [prev, data];
+
+  res.setHeader('set-cookie', header)
+}
+
+/**
+ * Verify and decode the given `val` with `secrets`.
+ *
+ * @param {String} val
+ * @param {Array} secrets
+ * @returns {String|Boolean}
+ * @private
+ */
+function unsigncookie(val, secrets) {
+  for (var i = 0; i < secrets.length; i++) {
+    var result = signature.unsign(val, secrets[i]);
+
+    if (result !== false) {
+      return result;
+    }
+  }
+
+  return false;
+}
diff --git a/register/node_modules/express-session/node_modules/crc/LICENSE b/register/node_modules/express-session/node_modules/crc/LICENSE
new file mode 100644
index 0000000..c49097c
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/LICENSE
@@ -0,0 +1,22 @@
+The MIT License (MIT)
+
+Copyright 2014 Alex Gorbatchev
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/crc/README.md b/register/node_modules/express-session/node_modules/crc/README.md
new file mode 100644
index 0000000..ca501f6
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/README.md
@@ -0,0 +1,106 @@
+# crc
+
+[![GitTip](http://img.shields.io/gittip/alexgorbatchev.svg?style=flat)](https://www.gittip.com/alexgorbatchev/)
+[![Dependency status](http://img.shields.io/david/alexgorbatchev/node-crc.svg?style=flat)](https://david-dm.org/alexgorbatchev/node-crc)
+[![devDependency Status](http://img.shields.io/david/dev/alexgorbatchev/node-crc.svg?style=flat)](https://david-dm.org/alexgorbatchev/node-crc?type=dev)
+[![Build Status](http://img.shields.io/travis/alexgorbatchev/node-crc.svg?style=flat&branch=master)](https://travis-ci.org/alexgorbatchev/node-crc)
+
+[![NPM](https://nodei.co/npm/crc.svg?style=flat)](https://npmjs.org/package/crc)
+
+Module for calculating Cyclic Redundancy Check (CRC) for Node.js and the Browser.
+
+# Important: Node >= 6.3.0 < 6.9.2
+
+There's was a bug in Node [#9342](https://github.com/nodejs/node/issues/9342) that affected CRC calculation if `Buffer.split()` is used (see issue discussion for details). This affected all version starting from `6.3.0` up to but not including `6.9.2`. The patch [#9341](https://github.com/nodejs/node/pull/9341) was released in `6.9.2`. If you are upgrading and seeing odd CRC calculation mismatches, this might be the reason.
+
+## Features
+
+* Full test suite comparing values against reference `pycrc` implementation.
+* Pure JavaScript implementation, no dependencies.
+* Provides CRC tables for optimized calculations.
+* Provides support for the following CRC algorithms:
+  * CRC1 `crc.crc1(…)`
+  * CRC8 `crc.crc8(…)`
+  * CRC8 1-Wire `crc.crc81wire(…)`
+  * CRC16 `crc.crc16(…)`
+  * CRC16 CCITT `crc.crc16ccitt(…)`
+  * CRC16 Modbus `crc.crc16modbus(…)`
+  * CRC16 Kermit `crc.crc16kermit(…)`
+  * CRC16 XModem `crc.crc16xmodem(…)`
+  * CRC24 `crc.crc24(…)`
+  * CRC32 `crc.crc32(…)`
+
+## Installation
+
+```
+npm install crc
+```
+
+## Usage
+
+Calculate a CRC32:
+
+```js
+var crc = require('crc');
+
+crc.crc32('hello').toString(16);
+// "3610a686"
+```
+
+Calculate a CRC32 of a file:
+
+```js
+crc.crc32(fs.readFileSync('README.md', 'utf8')).toString(16);
+// "127ad531"
+```
+
+Or using a `Buffer`:
+
+```js
+crc.crc32(fs.readFileSync('README.md')).toString(16);
+// "127ad531"
+```
+
+Incrementally calculate a CRC32:
+
+```js
+value = crc.crc32('one');
+value = crc.crc32('two', value);
+value = crc.crc32('three', value);
+value.toString(16);
+// "9e1c092"
+```
+
+## Running tests
+
+```
+npm test
+```
+
+## Thanks!
+
+[pycrc](http://www.tty1.net/pycrc/) library is which the source of all of the CRC tables.
+
+# License
+
+The MIT License (MIT)
+
+Copyright (c) 2014 Alex Gorbatchev
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc1.js b/register/node_modules/express-session/node_modules/crc/lib/crc1.js
new file mode 100644
index 0000000..dd72bb2
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc1.js
@@ -0,0 +1,28 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+module.exports = (0, _define_crc2.default)('crc1', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = ~~previous;
+  var accum = 0;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    accum += byte;
+  }
+
+  crc += accum % 256;
+  return crc % 256;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc16.js b/register/node_modules/express-session/node_modules/crc/lib/crc16.js
new file mode 100644
index 0000000..a4436f3
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc16.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`
+var TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('crc-16', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = ~~previous;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc16_ccitt.js b/register/node_modules/express-session/node_modules/crc/lib/crc16_ccitt.js
new file mode 100644
index 0000000..bc0a930
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc16_ccitt.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`
+var TABLE = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('ccitt', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc16_kermit.js b/register/node_modules/express-session/node_modules/crc/lib/crc16_kermit.js
new file mode 100644
index 0000000..09af8e8
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc16_kermit.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`
+var TABLE = [0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('kermit', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0000;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc16_modbus.js b/register/node_modules/express-session/node_modules/crc/lib/crc16_modbus.js
new file mode 100644
index 0000000..d12e89b
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc16_modbus.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`
+var TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('crc-16-modbus', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc16_xmodem.js b/register/node_modules/express-session/node_modules/crc/lib/crc16_xmodem.js
new file mode 100644
index 0000000..03bf560
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc16_xmodem.js
@@ -0,0 +1,35 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+module.exports = (0, _define_crc2.default)('xmodem', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    var code = crc >>> 8 & 0xFF;
+
+    code ^= byte & 0xFF;
+    code ^= code >>> 4;
+    crc = crc << 8 & 0xFFFF;
+    crc ^= code;
+    code = code << 5 & 0xFFFF;
+    crc ^= code;
+    code = code << 7 & 0xFFFF;
+    crc ^= code;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc24.js b/register/node_modules/express-session/node_modules/crc/lib/crc24.js
new file mode 100644
index 0000000..a1f9f30
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc24.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`
+var TABLE = [0x000000, 0x864cfb, 0x8ad50d, 0x0c99f6, 0x93e6e1, 0x15aa1a, 0x1933ec, 0x9f7f17, 0xa18139, 0x27cdc2, 0x2b5434, 0xad18cf, 0x3267d8, 0xb42b23, 0xb8b2d5, 0x3efe2e, 0xc54e89, 0x430272, 0x4f9b84, 0xc9d77f, 0x56a868, 0xd0e493, 0xdc7d65, 0x5a319e, 0x64cfb0, 0xe2834b, 0xee1abd, 0x685646, 0xf72951, 0x7165aa, 0x7dfc5c, 0xfbb0a7, 0x0cd1e9, 0x8a9d12, 0x8604e4, 0x00481f, 0x9f3708, 0x197bf3, 0x15e205, 0x93aefe, 0xad50d0, 0x2b1c2b, 0x2785dd, 0xa1c926, 0x3eb631, 0xb8faca, 0xb4633c, 0x322fc7, 0xc99f60, 0x4fd39b, 0x434a6d, 0xc50696, 0x5a7981, 0xdc357a, 0xd0ac8c, 0x56e077, 0x681e59, 0xee52a2, 0xe2cb54, 0x6487af, 0xfbf8b8, 0x7db443, 0x712db5, 0xf7614e, 0x19a3d2, 0x9fef29, 0x9376df, 0x153a24, 0x8a4533, 0x0c09c8, 0x00903e, 0x86dcc5, 0xb822eb, 0x3e6e10, 0x32f7e6, 0xb4bb1d, 0x2bc40a, 0xad88f1, 0xa11107, 0x275dfc, 0xdced5b, 0x5aa1a0, 0x563856, 0xd074ad, 0x4f0bba, 0xc94741, 0xc5deb7, 0x43924c, 0x7d6c62, 0xfb2099, 0xf7b96f, 0x71f594, 0xee8a83, 0x68c678, 0x645f8e, 0xe21375, 0x15723b, 0x933ec0, 0x9fa736, 0x19ebcd, 0x8694da, 0x00d821, 0x0c41d7, 0x8a0d2c, 0xb4f302, 0x32bff9, 0x3e260f, 0xb86af4, 0x2715e3, 0xa15918, 0xadc0ee, 0x2b8c15, 0xd03cb2, 0x567049, 0x5ae9bf, 0xdca544, 0x43da53, 0xc596a8, 0xc90f5e, 0x4f43a5, 0x71bd8b, 0xf7f170, 0xfb6886, 0x7d247d, 0xe25b6a, 0x641791, 0x688e67, 0xeec29c, 0x3347a4, 0xb50b5f, 0xb992a9, 0x3fde52, 0xa0a145, 0x26edbe, 0x2a7448, 0xac38b3, 0x92c69d, 0x148a66, 0x181390, 0x9e5f6b, 0x01207c, 0x876c87, 0x8bf571, 0x0db98a, 0xf6092d, 0x7045d6, 0x7cdc20, 0xfa90db, 0x65efcc, 0xe3a337, 0xef3ac1, 0x69763a, 0x578814, 0xd1c4ef, 0xdd5d19, 0x5b11e2, 0xc46ef5, 0x42220e, 0x4ebbf8, 0xc8f703, 0x3f964d, 0xb9dab6, 0xb54340, 0x330fbb, 0xac70ac, 0x2a3c57, 0x26a5a1, 0xa0e95a, 0x9e1774, 0x185b8f, 0x14c279, 0x928e82, 0x0df195, 0x8bbd6e, 0x872498, 0x016863, 0xfad8c4, 0x7c943f, 0x700dc9, 0xf64132, 0x693e25, 0xef72de, 0xe3eb28, 0x65a7d3, 0x5b59fd, 0xdd1506, 0xd18cf0, 0x57c00b, 0xc8bf1c, 0x4ef3e7, 0x426a11, 0xc426ea, 0x2ae476, 0xaca88d, 0xa0317b, 0x267d80, 0xb90297, 0x3f4e6c, 0x33d79a, 0xb59b61, 0x8b654f, 0x0d29b4, 0x01b042, 0x87fcb9, 0x1883ae, 0x9ecf55, 0x9256a3, 0x141a58, 0xefaaff, 0x69e604, 0x657ff2, 0xe33309, 0x7c4c1e, 0xfa00e5, 0xf69913, 0x70d5e8, 0x4e2bc6, 0xc8673d, 0xc4fecb, 0x42b230, 0xddcd27, 0x5b81dc, 0x57182a, 0xd154d1, 0x26359f, 0xa07964, 0xace092, 0x2aac69, 0xb5d37e, 0x339f85, 0x3f0673, 0xb94a88, 0x87b4a6, 0x01f85d, 0x0d61ab, 0x8b2d50, 0x145247, 0x921ebc, 0x9e874a, 0x18cbb1, 0xe37b16, 0x6537ed, 0x69ae1b, 0xefe2e0, 0x709df7, 0xf6d10c, 0xfa48fa, 0x7c0401, 0x42fa2f, 0xc4b6d4, 0xc82f22, 0x4e63d9, 0xd11cce, 0x575035, 0x5bc9c3, 0xdd8538];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('crc-24', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = typeof previous !== 'undefined' ? ~~previous : 0xb704ce;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = (TABLE[(crc >> 16 ^ byte) & 0xff] ^ crc << 8) & 0xffffff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc32.js b/register/node_modules/express-session/node_modules/crc/lib/crc32.js
new file mode 100644
index 0000000..f2aa8ca
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc32.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`
+var TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('crc-32', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = previous === 0 ? 0 : ~~previous ^ -1;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;
+  }
+
+  return crc ^ -1;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc8.js b/register/node_modules/express-session/node_modules/crc/lib/crc8.js
new file mode 100644
index 0000000..735927f
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc8.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`
+var TABLE = [0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a, 0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4, 0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('crc-8', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = ~~previous;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/crc8_1wire.js b/register/node_modules/express-session/node_modules/crc/lib/crc8_1wire.js
new file mode 100644
index 0000000..5eb4f5d
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/crc8_1wire.js
@@ -0,0 +1,31 @@
+'use strict';
+
+var _buffer = require('buffer');
+
+var _create_buffer = require('./create_buffer');
+
+var _create_buffer2 = _interopRequireDefault(_create_buffer);
+
+var _define_crc = require('./define_crc');
+
+var _define_crc2 = _interopRequireDefault(_define_crc);
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`
+var TABLE = [0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62, 0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a, 0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd, 0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50, 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b, 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8, 0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35];
+
+if (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);
+
+module.exports = (0, _define_crc2.default)('dallas-1-wire', function (buf, previous) {
+  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);
+
+  var crc = ~~previous;
+
+  for (var index = 0; index < buf.length; index++) {
+    var byte = buf[index];
+    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
+  }
+
+  return crc;
+});
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/create_buffer.js b/register/node_modules/express-session/node_modules/crc/lib/create_buffer.js
new file mode 100644
index 0000000..eabd6ac
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/create_buffer.js
@@ -0,0 +1,16 @@
+'use strict';
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+
+var _buffer = require('buffer');
+
+var createBuffer = _buffer.Buffer.from && _buffer.Buffer.alloc && _buffer.Buffer.allocUnsafe && _buffer.Buffer.allocUnsafeSlow ? _buffer.Buffer.from
+
+// support for Node < 5.10
+: function (val) {
+  return new _buffer.Buffer(val);
+};
+
+exports.default = createBuffer;
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/define_crc.js b/register/node_modules/express-session/node_modules/crc/lib/define_crc.js
new file mode 100644
index 0000000..70c3bdc
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/define_crc.js
@@ -0,0 +1,16 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+
+exports.default = function (model, calc) {
+  var fn = function fn(buf, previous) {
+    return calc(buf, previous) >>> 0;
+  };
+  fn.signed = calc;
+  fn.unsigned = fn;
+  fn.model = model;
+
+  return fn;
+};
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/lib/index.js b/register/node_modules/express-session/node_modules/crc/lib/index.js
new file mode 100644
index 0000000..d25d8df
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/lib/index.js
@@ -0,0 +1,14 @@
+'use strict';
+
+module.exports = {
+  crc1: require('./crc1'),
+  crc8: require('./crc8'),
+  crc81wire: require('./crc8_1wire'),
+  crc16: require('./crc16'),
+  crc16ccitt: require('./crc16_ccitt'),
+  crc16modbus: require('./crc16_modbus'),
+  crc16xmodem: require('./crc16_xmodem'),
+  crc16kermit: require('./crc16_kermit'),
+  crc24: require('./crc24'),
+  crc32: require('./crc32')
+};
\ No newline at end of file
diff --git a/register/node_modules/express-session/node_modules/crc/package.json b/register/node_modules/express-session/node_modules/crc/package.json
new file mode 100644
index 0000000..9f4f3ce
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/crc/package.json
@@ -0,0 +1,46 @@
+{
+  "name": "crc",
+  "version": "3.4.4",
+  "description": "Module for calculating Cyclic Redundancy Check (CRC) for Node.js and the Browser.",
+  "keywords": [
+    "crc"
+  ],
+  "files": [
+    "lib"
+  ],
+  "main": "./lib/index.js",
+  "scripts": {
+    "test": "mocha test/*.test.js",
+    "pretest": "cd src && babel --out-dir ../lib *.js"
+  },
+  "author": {
+    "name": "Alex Gorbatchev",
+    "url": "https://github.com/alexgorbatchev"
+  },
+  "devDependencies": {
+    "babel-cli": "^6.3.15",
+    "babel-core": "^6.1.21",
+    "babel-preset-es2015": "^6.1.18",
+    "beautify-benchmark": "^0.2.4",
+    "benchmark": "^1.0.0",
+    "buffer-crc32": "^0.2.3",
+    "chai": "^3.4.1",
+    "mocha": "*",
+    "seedrandom": "^2.3.6"
+  },
+  "homepage": "https://github.com/alexgorbatchev/node-crc",
+  "bugs": {
+    "url": "https://github.com/alexgorbatchev/node-crc/issues"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/alexgorbatchev/node-crc.git"
+  },
+  "license": "MIT",
+  "readme": "# crc\n\n[![GitTip](http://img.shields.io/gittip/alexgorbatchev.svg?style=flat)](https://www.gittip.com/alexgorbatchev/)\n[![Dependency status](http://img.shields.io/david/alexgorbatchev/node-crc.svg?style=flat)](https://david-dm.org/alexgorbatchev/node-crc)\n[![devDependency Status](http://img.shields.io/david/dev/alexgorbatchev/node-crc.svg?style=flat)](https://david-dm.org/alexgorbatchev/node-crc?type=dev)\n[![Build Status](http://img.shields.io/travis/alexgorbatchev/node-crc.svg?style=flat&branch=master)](https://travis-ci.org/alexgorbatchev/node-crc)\n\n[![NPM](https://nodei.co/npm/crc.svg?style=flat)](https://npmjs.org/package/crc)\n\nModule for calculating Cyclic Redundancy Check (CRC) for Node.js and the Browser.\n\n# Important: Node >= 6.3.0 < 6.9.2\n\nThere's was a bug in Node [#9342](https://github.com/nodejs/node/issues/9342) that affected CRC calculation if `Buffer.split()` is used (see issue discussion for details). This affected all version starting from `6.3.0` up to but not including `6.9.2`. The patch [#9341](https://github.com/nodejs/node/pull/9341) was released in `6.9.2`. If you are upgrading and seeing odd CRC calculation mismatches, this might be the reason.\n\n## Features\n\n* Full test suite comparing values against reference `pycrc` implementation.\n* Pure JavaScript implementation, no dependencies.\n* Provides CRC tables for optimized calculations.\n* Provides support for the following CRC algorithms:\n  * CRC1 `crc.crc1(…)`\n  * CRC8 `crc.crc8(…)`\n  * CRC8 1-Wire `crc.crc81wire(…)`\n  * CRC16 `crc.crc16(…)`\n  * CRC16 CCITT `crc.crc16ccitt(…)`\n  * CRC16 Modbus `crc.crc16modbus(…)`\n  * CRC16 Kermit `crc.crc16kermit(…)`\n  * CRC16 XModem `crc.crc16xmodem(…)`\n  * CRC24 `crc.crc24(…)`\n  * CRC32 `crc.crc32(…)`\n\n## Installation\n\n```\nnpm install crc\n```\n\n## Usage\n\nCalculate a CRC32:\n\n```js\nvar crc = require('crc');\n\ncrc.crc32('hello').toString(16);\n// \"3610a686\"\n```\n\nCalculate a CRC32 of a file:\n\n```js\ncrc.crc32(fs.readFileSync('README.md', 'utf8')).toString(16);\n// \"127ad531\"\n```\n\nOr using a `Buffer`:\n\n```js\ncrc.crc32(fs.readFileSync('README.md')).toString(16);\n// \"127ad531\"\n```\n\nIncrementally calculate a CRC32:\n\n```js\nvalue = crc.crc32('one');\nvalue = crc.crc32('two', value);\nvalue = crc.crc32('three', value);\nvalue.toString(16);\n// \"9e1c092\"\n```\n\n## Running tests\n\n```\nnpm test\n```\n\n## Thanks!\n\n[pycrc](http://www.tty1.net/pycrc/) library is which the source of all of the CRC tables.\n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Alex Gorbatchev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
+  "readmeFilename": "README.md",
+  "_id": "crc@3.4.4",
+  "_shasum": "9da1e980e3bd44fc5c93bf5ab3da3378d85e466b",
+  "_from": "crc@3.4.4",
+  "_resolved": "https://registry.npmjs.org/crc/-/crc-3.4.4.tgz"
+}
diff --git a/register/node_modules/express-session/node_modules/debug/.coveralls.yml b/register/node_modules/express-session/node_modules/debug/.coveralls.yml
new file mode 100644
index 0000000..20a7068
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/.coveralls.yml
@@ -0,0 +1 @@
+repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve
diff --git a/register/node_modules/express-session/node_modules/debug/.eslintrc b/register/node_modules/express-session/node_modules/debug/.eslintrc
new file mode 100644
index 0000000..8a37ae2
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/.eslintrc
@@ -0,0 +1,11 @@
+{
+  "env": {
+    "browser": true,
+    "node": true
+  },
+  "rules": {
+    "no-console": 0,
+    "no-empty": [1, { "allowEmptyCatch": true }]
+  },
+  "extends": "eslint:recommended"
+}
diff --git a/register/node_modules/express-session/node_modules/debug/.npmignore b/register/node_modules/express-session/node_modules/debug/.npmignore
new file mode 100644
index 0000000..5f60eec
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/.npmignore
@@ -0,0 +1,9 @@
+support
+test
+examples
+example
+*.sock
+dist
+yarn.lock
+coverage
+bower.json
diff --git a/register/node_modules/express-session/node_modules/debug/.travis.yml b/register/node_modules/express-session/node_modules/debug/.travis.yml
new file mode 100644
index 0000000..6c6090c
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/.travis.yml
@@ -0,0 +1,14 @@
+
+language: node_js
+node_js:
+  - "6"
+  - "5"
+  - "4"
+
+install:
+  - make node_modules
+
+script:
+  - make lint
+  - make test
+  - make coveralls
diff --git a/register/node_modules/express-session/node_modules/debug/CHANGELOG.md b/register/node_modules/express-session/node_modules/debug/CHANGELOG.md
new file mode 100644
index 0000000..189dbc8
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/CHANGELOG.md
@@ -0,0 +1,352 @@
+
+2.6.7 / 2017-05-16
+==================
+
+  * Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom)
+  * Fix: Inline extend function in node implementation (#452, @dougwilson)
+  * Docs: Fix typo (#455, @msasad)
+
+2.6.5 / 2017-04-27
+==================
+  
+  * Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek)
+  * Misc: clean up browser reference checks (#447, @thebigredgeek)
+  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
+
+
+2.6.4 / 2017-04-20
+==================
+
+  * Fix: bug that would occure if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo)
+  * Chore: ignore bower.json in npm installations. (#437, @joaovieira)
+  * Misc: update "ms" to v0.7.3 (@tootallnate)
+
+2.6.3 / 2017-03-13
+==================
+
+  * Fix: Electron reference to `process.env.DEBUG` (#431, @paulcbetts)
+  * Docs: Changelog fix (@thebigredgeek)
+
+2.6.2 / 2017-03-10
+==================
+
+  * Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin)
+  * Docs: Add backers and sponsors from Open Collective (#422, @piamancini)
+  * Docs: Add Slackin invite badge (@tootallnate)
+
+2.6.1 / 2017-02-10
+==================
+
+  * Fix: Module's `export default` syntax fix for IE8 `Expected identifier` error
+  * Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0)
+  * Fix: IE8 "Expected identifier" error (#414, @vgoma)
+  * Fix: Namespaces would not disable once enabled (#409, @musikov)
+
+2.6.0 / 2016-12-28
+==================
+
+  * Fix: added better null pointer checks for browser useColors (@thebigredgeek)
+  * Improvement: removed explicit `window.debug` export (#404, @tootallnate)
+  * Improvement: deprecated `DEBUG_FD` environment variable (#405, @tootallnate)
+
+2.5.2 / 2016-12-25
+==================
+
+  * Fix: reference error on window within webworkers (#393, @KlausTrainer)
+  * Docs: fixed README typo (#391, @lurch)
+  * Docs: added notice about v3 api discussion (@thebigredgeek)
+
+2.5.1 / 2016-12-20
+==================
+
+  * Fix: babel-core compatibility
+
+2.5.0 / 2016-12-20
+==================
+
+  * Fix: wrong reference in bower file (@thebigredgeek)
+  * Fix: webworker compatibility (@thebigredgeek)
+  * Fix: output formatting issue (#388, @kribblo)
+  * Fix: babel-loader compatibility (#383, @escwald)
+  * Misc: removed built asset from repo and publications (@thebigredgeek)
+  * Misc: moved source files to /src (#378, @yamikuronue)
+  * Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue)
+  * Test: coveralls integration (#378, @yamikuronue)
+  * Docs: simplified language in the opening paragraph (#373, @yamikuronue)
+
+2.4.5 / 2016-12-17
+==================
+
+  * Fix: `navigator` undefined in Rhino (#376, @jochenberger)
+  * Fix: custom log function (#379, @hsiliev)
+  * Improvement: bit of cleanup + linting fixes (@thebigredgeek)
+  * Improvement: rm non-maintainted `dist/` dir (#375, @freewil)
+  * Docs: simplified language in the opening paragraph. (#373, @yamikuronue)
+
+2.4.4 / 2016-12-14
+==================
+
+  * Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts)
+
+2.4.3 / 2016-12-14
+==================
+
+  * Fix: navigation.userAgent error for react native (#364, @escwald)
+
+2.4.2 / 2016-12-14
+==================
+
+  * Fix: browser colors (#367, @tootallnate)
+  * Misc: travis ci integration (@thebigredgeek)
+  * Misc: added linting and testing boilerplate with sanity check (@thebigredgeek)
+
+2.4.1 / 2016-12-13
+==================
+
+  * Fix: typo that broke the package (#356)
+
+2.4.0 / 2016-12-13
+==================
+
+  * Fix: bower.json references unbuilt src entry point (#342, @justmatt)
+  * Fix: revert "handle regex special characters" (@tootallnate)
+  * Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate)
+  * Feature: %O`(big O) pretty-prints objects (#322, @tootallnate)
+  * Improvement: allow colors in workers (#335, @botverse)
+  * Improvement: use same color for same namespace. (#338, @lchenay)
+
+2.3.3 / 2016-11-09
+==================
+
+  * Fix: Catch `JSON.stringify()` errors (#195, Jovan Alleyne)
+  * Fix: Returning `localStorage` saved values (#331, Levi Thomason)
+  * Improvement: Don't create an empty object when no `process` (Nathan Rajlich)
+
+2.3.2 / 2016-11-09
+==================
+
+  * Fix: be super-safe in index.js as well (@TooTallNate)
+  * Fix: should check whether process exists (Tom Newby)
+
+2.3.1 / 2016-11-09
+==================
+
+  * Fix: Added electron compatibility (#324, @paulcbetts)
+  * Improvement: Added performance optimizations (@tootallnate)
+  * Readme: Corrected PowerShell environment variable example (#252, @gimre)
+  * Misc: Removed yarn lock file from source control (#321, @fengmk2)
+
+2.3.0 / 2016-11-07
+==================
+
+  * Fix: Consistent placement of ms diff at end of output (#215, @gorangajic)
+  * Fix: Escaping of regex special characters in namespace strings (#250, @zacronos)
+  * Fix: Fixed bug causing crash on react-native (#282, @vkarpov15)
+  * Feature: Enabled ES6+ compatible import via default export (#212 @bucaran)
+  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
+  * Package: Update "ms" to 0.7.2 (#315, @DevSide)
+  * Package: removed superfluous version property from bower.json (#207 @kkirsche)
+  * Readme: fix USE_COLORS to DEBUG_COLORS
+  * Readme: Doc fixes for format string sugar (#269, @mlucool)
+  * Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0)
+  * Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable)
+  * Readme: better docs for browser support (#224, @matthewmueller)
+  * Tooling: Added yarn integration for development (#317, @thebigredgeek)
+  * Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek)
+  * Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman)
+  * Misc: Updated contributors (@thebigredgeek)
+
+2.2.0 / 2015-05-09
+==================
+
+  * package: update "ms" to v0.7.1 (#202, @dougwilson)
+  * README: add logging to file example (#193, @DanielOchoa)
+  * README: fixed a typo (#191, @amir-s)
+  * browser: expose `storage` (#190, @stephenmathieson)
+  * Makefile: add a `distclean` target (#189, @stephenmathieson)
+
+2.1.3 / 2015-03-13
+==================
+
+  * Updated stdout/stderr example (#186)
+  * Updated example/stdout.js to match debug current behaviour
+  * Renamed example/stderr.js to stdout.js
+  * Update Readme.md (#184)
+  * replace high intensity foreground color for bold (#182, #183)
+
+2.1.2 / 2015-03-01
+==================
+
+  * dist: recompile
+  * update "ms" to v0.7.0
+  * package: update "browserify" to v9.0.3
+  * component: fix "ms.js" repo location
+  * changed bower package name
+  * updated documentation about using debug in a browser
+  * fix: security error on safari (#167, #168, @yields)
+
+2.1.1 / 2014-12-29
+==================
+
+  * browser: use `typeof` to check for `console` existence
+  * browser: check for `console.log` truthiness (fix IE 8/9)
+  * browser: add support for Chrome apps
+  * Readme: added Windows usage remarks
+  * Add `bower.json` to properly support bower install
+
+2.1.0 / 2014-10-15
+==================
+
+  * node: implement `DEBUG_FD` env variable support
+  * package: update "browserify" to v6.1.0
+  * package: add "license" field to package.json (#135, @panuhorsmalahti)
+
+2.0.0 / 2014-09-01
+==================
+
+  * package: update "browserify" to v5.11.0
+  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
+
+1.0.4 / 2014-07-15
+==================
+
+  * dist: recompile
+  * example: remove `console.info()` log usage
+  * example: add "Content-Type" UTF-8 header to browser example
+  * browser: place %c marker after the space character
+  * browser: reset the "content" color via `color: inherit`
+  * browser: add colors support for Firefox >= v31
+  * debug: prefer an instance `log()` function over the global one (#119)
+  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
+
+1.0.3 / 2014-07-09
+==================
+
+  * Add support for multiple wildcards in namespaces (#122, @seegno)
+  * browser: fix lint
+
+1.0.2 / 2014-06-10
+==================
+
+  * browser: update color palette (#113, @gscottolson)
+  * common: make console logging function configurable (#108, @timoxley)
+  * node: fix %o colors on old node <= 0.8.x
+  * Makefile: find node path using shell/which (#109, @timoxley)
+
+1.0.1 / 2014-06-06
+==================
+
+  * browser: use `removeItem()` to clear localStorage
+  * browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777)
+  * package: add "contributors" section
+  * node: fix comment typo
+  * README: list authors
+
+1.0.0 / 2014-06-04
+==================
+
+  * make ms diff be global, not be scope
+  * debug: ignore empty strings in enable()
+  * node: make DEBUG_COLORS able to disable coloring
+  * *: export the `colors` array
+  * npmignore: don't publish the `dist` dir
+  * Makefile: refactor to use browserify
+  * package: add "browserify" as a dev dependency
+  * Readme: add Web Inspector Colors section
+  * node: reset terminal color for the debug content
+  * node: map "%o" to `util.inspect()`
+  * browser: map "%j" to `JSON.stringify()`
+  * debug: add custom "formatters"
+  * debug: use "ms" module for humanizing the diff
+  * Readme: add "bash" syntax highlighting
+  * browser: add Firebug color support
+  * browser: add colors for WebKit browsers
+  * node: apply log to `console`
+  * rewrite: abstract common logic for Node & browsers
+  * add .jshintrc file
+
+0.8.1 / 2014-04-14
+==================
+
+  * package: re-add the "component" section
+
+0.8.0 / 2014-03-30
+==================
+
+  * add `enable()` method for nodejs. Closes #27
+  * change from stderr to stdout
+  * remove unnecessary index.js file
+
+0.7.4 / 2013-11-13
+==================
+
+  * remove "browserify" key from package.json (fixes something in browserify)
+
+0.7.3 / 2013-10-30
+==================
+
+  * fix: catch localStorage security error when cookies are blocked (Chrome)
+  * add debug(err) support. Closes #46
+  * add .browser prop to package.json. Closes #42
+
+0.7.2 / 2013-02-06
+==================
+
+  * fix package.json
+  * fix: Mobile Safari (private mode) is broken with debug
+  * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript
+
+0.7.1 / 2013-02-05
+==================
+
+  * add repository URL to package.json
+  * add DEBUG_COLORED to force colored output
+  * add browserify support
+  * fix component. Closes #24
+
+0.7.0 / 2012-05-04
+==================
+
+  * Added .component to package.json
+  * Added debug.component.js build
+
+0.6.0 / 2012-03-16
+==================
+
+  * Added support for "-" prefix in DEBUG [Vinay Pulim]
+  * Added `.enabled` flag to the node version [TooTallNate]
+
+0.5.0 / 2012-02-02
+==================
+
+  * Added: humanize diffs. Closes #8
+  * Added `debug.disable()` to the CS variant
+  * Removed padding. Closes #10
+  * Fixed: persist client-side variant again. Closes #9
+
+0.4.0 / 2012-02-01
+==================
+
+  * Added browser variant support for older browsers [TooTallNate]
+  * Added `debug.enable('project:*')` to browser variant [TooTallNate]
+  * Added padding to diff (moved it to the right)
+
+0.3.0 / 2012-01-26
+==================
+
+  * Added millisecond diff when isatty, otherwise UTC string
+
+0.2.0 / 2012-01-22
+==================
+
+  * Added wildcard support
+
+0.1.0 / 2011-12-02
+==================
+
+  * Added: remove colors unless stderr isatty [TooTallNate]
+
+0.0.1 / 2010-01-03
+==================
+
+  * Initial release
diff --git a/register/node_modules/express-session/node_modules/debug/LICENSE b/register/node_modules/express-session/node_modules/debug/LICENSE
new file mode 100644
index 0000000..658c933
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/LICENSE
@@ -0,0 +1,19 @@
+(The MIT License)
+
+Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
+and associated documentation files (the 'Software'), to deal in the Software without restriction, 
+including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
+and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all copies or substantial 
+portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
+LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
+WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
diff --git a/register/node_modules/express-session/node_modules/debug/Makefile b/register/node_modules/express-session/node_modules/debug/Makefile
new file mode 100644
index 0000000..584da8b
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/Makefile
@@ -0,0 +1,50 @@
+# get Makefile directory name: http://stackoverflow.com/a/5982798/376773
+THIS_MAKEFILE_PATH:=$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
+THIS_DIR:=$(shell cd $(dir $(THIS_MAKEFILE_PATH));pwd)
+
+# BIN directory
+BIN := $(THIS_DIR)/node_modules/.bin
+
+# Path
+PATH := node_modules/.bin:$(PATH)
+SHELL := /bin/bash
+
+# applications
+NODE ?= $(shell which node)
+YARN ?= $(shell which yarn)
+PKG ?= $(if $(YARN),$(YARN),$(NODE) $(shell which npm))
+BROWSERIFY ?= $(NODE) $(BIN)/browserify
+
+.FORCE:
+
+install: node_modules
+
+node_modules: package.json
+	@NODE_ENV= $(PKG) install
+	@touch node_modules
+
+lint: .FORCE
+	eslint browser.js debug.js index.js node.js
+
+test-node: .FORCE
+	istanbul cover node_modules/mocha/bin/_mocha -- test/**.js
+
+test-browser: .FORCE
+	mkdir -p dist
+
+	@$(BROWSERIFY) \
+		--standalone debug \
+		. > dist/debug.js
+
+	karma start --single-run
+	rimraf dist
+
+test: .FORCE
+	concurrently \
+		"make test-node" \
+		"make test-browser"
+
+coveralls:
+	cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js
+
+.PHONY: all install clean distclean
diff --git a/register/node_modules/express-session/node_modules/debug/README.md b/register/node_modules/express-session/node_modules/debug/README.md
new file mode 100644
index 0000000..f67be6b
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/README.md
@@ -0,0 +1,312 @@
+# debug
+[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) 
+[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)
+
+
+
+A tiny node.js debugging utility modelled after node core's debugging technique.
+
+**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**
+
+## Installation
+
+```bash
+$ npm install debug
+```
+
+## Usage
+
+`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.
+
+Example _app.js_:
+
+```js
+var debug = require('debug')('http')
+  , http = require('http')
+  , name = 'My App';
+
+// fake app
+
+debug('booting %s', name);
+
+http.createServer(function(req, res){
+  debug(req.method + ' ' + req.url);
+  res.end('hello\n');
+}).listen(3000, function(){
+  debug('listening');
+});
+
+// fake worker of some kind
+
+require('./worker');
+```
+
+Example _worker.js_:
+
+```js
+var debug = require('debug')('worker');
+
+setInterval(function(){
+  debug('doing some work');
+}, 1000);
+```
+
+ The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:
+
+  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)
+
+  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)
+
+#### Windows note
+
+ On Windows the environment variable is set using the `set` command.
+
+ ```cmd
+ set DEBUG=*,-not_this
+ ```
+
+ Note that PowerShell uses different syntax to set environment variables.
+
+ ```cmd
+ $env:DEBUG = "*,-not_this"
+  ```
+
+Then, run the program to be debugged as usual.
+
+## Millisecond diff
+
+  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.
+
+  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)
+
+  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
+
+  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)
+
+## Conventions
+
+  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
+
+## Wildcards
+
+  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named "connect:bodyParser", "connect:compress", "connect:session", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.
+
+  You can also exclude specific debuggers by prefixing them with a "-" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with "connect:".
+
+## Environment Variables
+
+  When running through Node.js, you can set a few environment variables that will
+  change the behavior of the debug logging:
+
+| Name      | Purpose                                         |
+|-----------|-------------------------------------------------|
+| `DEBUG`   | Enables/disables specific debugging namespaces. |
+| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |
+| `DEBUG_DEPTH` | Object inspection depth. |
+| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |
+
+
+  __Note:__ The environment variables beginning with `DEBUG_` end up being
+  converted into an Options object that gets used with `%o`/`%O` formatters.
+  See the Node.js documentation for
+  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)
+  for the complete list.
+
+## Formatters
+
+
+  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:
+
+| Formatter | Representation |
+|-----------|----------------|
+| `%O`      | Pretty-print an Object on multiple lines. |
+| `%o`      | Pretty-print an Object all on a single line. |
+| `%s`      | String. |
+| `%d`      | Number (both integer and float). |
+| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |
+| `%%`      | Single percent sign ('%'). This does not consume an argument. |
+
+### Custom formatters
+
+  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:
+
+```js
+const createDebug = require('debug')
+createDebug.formatters.h = (v) => {
+  return v.toString('hex')
+}
+
+// …elsewhere
+const debug = createDebug('foo')
+debug('this is hex: %h', new Buffer('hello world'))
+//   foo this is hex: 68656c6c6f20776f726c6421 +0ms
+```
+
+## Browser support
+  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),
+  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),
+  if you don't want to build it yourself.
+
+  Debug's enable state is currently persisted by `localStorage`.
+  Consider the situation shown below where you have `worker:a` and `worker:b`,
+  and wish to debug both. You can enable this using `localStorage.debug`:
+
+```js
+localStorage.debug = 'worker:*'
+```
+
+And then refresh the page.
+
+```js
+a = debug('worker:a');
+b = debug('worker:b');
+
+setInterval(function(){
+  a('doing some work');
+}, 1000);
+
+setInterval(function(){
+  b('doing some work');
+}, 1200);
+```
+
+#### Web Inspector Colors
+
+  Colors are also enabled on "Web Inspectors" that understand the `%c` formatting
+  option. These are WebKit web inspectors, Firefox ([since version
+  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))
+  and the Firebug plugin for Firefox (any version).
+
+  Colored output looks something like:
+
+  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)
+
+
+## Output streams
+
+  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
+
+Example _stdout.js_:
+
+```js
+var debug = require('debug');
+var error = debug('app:error');
+
+// by default stderr is used
+error('goes to stderr!');
+
+var log = debug('app:log');
+// set this namespace to log via console.log
+log.log = console.log.bind(console); // don't forget to bind to console!
+log('goes to stdout');
+error('still goes to stderr!');
+
+// set all output to go via console.info
+// overrides all per-namespace log settings
+debug.log = console.info.bind(console);
+error('now goes to stdout via console.info');
+log('still goes to stdout, but via console.info now');
+```
+
+
+## Authors
+
+ - TJ Holowaychuk
+ - Nathan Rajlich
+ - Andrew Rhyne
+ 
+## Backers
+
+Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]
+
+<a href="https://opencollective.com/debug/backer/0/website" target="_blank"><img src="https://opencollective.com/debug/backer/0/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/1/website" target="_blank"><img src="https://opencollective.com/debug/backer/1/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/2/website" target="_blank"><img src="https://opencollective.com/debug/backer/2/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/3/website" target="_blank"><img src="https://opencollective.com/debug/backer/3/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/4/website" target="_blank"><img src="https://opencollective.com/debug/backer/4/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/5/website" target="_blank"><img src="https://opencollective.com/debug/backer/5/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/6/website" target="_blank"><img src="https://opencollective.com/debug/backer/6/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/7/website" target="_blank"><img src="https://opencollective.com/debug/backer/7/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/8/website" target="_blank"><img src="https://opencollective.com/debug/backer/8/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/9/website" target="_blank"><img src="https://opencollective.com/debug/backer/9/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/10/website" target="_blank"><img src="https://opencollective.com/debug/backer/10/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/11/website" target="_blank"><img src="https://opencollective.com/debug/backer/11/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/12/website" target="_blank"><img src="https://opencollective.com/debug/backer/12/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/13/website" target="_blank"><img src="https://opencollective.com/debug/backer/13/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/14/website" target="_blank"><img src="https://opencollective.com/debug/backer/14/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/15/website" target="_blank"><img src="https://opencollective.com/debug/backer/15/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/16/website" target="_blank"><img src="https://opencollective.com/debug/backer/16/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/17/website" target="_blank"><img src="https://opencollective.com/debug/backer/17/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/18/website" target="_blank"><img src="https://opencollective.com/debug/backer/18/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/19/website" target="_blank"><img src="https://opencollective.com/debug/backer/19/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/20/website" target="_blank"><img src="https://opencollective.com/debug/backer/20/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/21/website" target="_blank"><img src="https://opencollective.com/debug/backer/21/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/22/website" target="_blank"><img src="https://opencollective.com/debug/backer/22/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/23/website" target="_blank"><img src="https://opencollective.com/debug/backer/23/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/24/website" target="_blank"><img src="https://opencollective.com/debug/backer/24/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/25/website" target="_blank"><img src="https://opencollective.com/debug/backer/25/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/26/website" target="_blank"><img src="https://opencollective.com/debug/backer/26/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/27/website" target="_blank"><img src="https://opencollective.com/debug/backer/27/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/28/website" target="_blank"><img src="https://opencollective.com/debug/backer/28/avatar.svg"></a>
+<a href="https://opencollective.com/debug/backer/29/website" target="_blank"><img src="https://opencollective.com/debug/backer/29/avatar.svg"></a>
+
+
+## Sponsors
+
+Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
+
+<a href="https://opencollective.com/debug/sponsor/0/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/0/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/1/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/1/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/2/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/2/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/3/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/3/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/4/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/4/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/5/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/5/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/6/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/6/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/7/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/7/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/8/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/8/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/9/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/9/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/10/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/10/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/11/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/11/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/12/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/12/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/13/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/13/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/14/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/14/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/15/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/15/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/16/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/16/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/17/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/17/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/18/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/18/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/19/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/19/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/20/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/20/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/21/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/21/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/22/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/22/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/23/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/23/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/24/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/24/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/25/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/25/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/26/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/26/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/27/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/27/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/28/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/28/avatar.svg"></a>
+<a href="https://opencollective.com/debug/sponsor/29/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/29/avatar.svg"></a>
+
+## License
+
+(The MIT License)
+
+Copyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/debug/component.json b/register/node_modules/express-session/node_modules/debug/component.json
new file mode 100644
index 0000000..d7118d2
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/component.json
@@ -0,0 +1,19 @@
+{
+  "name": "debug",
+  "repo": "visionmedia/debug",
+  "description": "small debugging utility",
+  "version": "2.6.7",
+  "keywords": [
+    "debug",
+    "log",
+    "debugger"
+  ],
+  "main": "src/browser.js",
+  "scripts": [
+    "src/browser.js",
+    "src/debug.js"
+  ],
+  "dependencies": {
+    "rauchg/ms.js": "0.7.1"
+  }
+}
diff --git a/register/node_modules/express-session/node_modules/debug/karma.conf.js b/register/node_modules/express-session/node_modules/debug/karma.conf.js
new file mode 100644
index 0000000..103a82d
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/karma.conf.js
@@ -0,0 +1,70 @@
+// Karma configuration
+// Generated on Fri Dec 16 2016 13:09:51 GMT+0000 (UTC)
+
+module.exports = function(config) {
+  config.set({
+
+    // base path that will be used to resolve all patterns (eg. files, exclude)
+    basePath: '',
+
+
+    // frameworks to use
+    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
+    frameworks: ['mocha', 'chai', 'sinon'],
+
+
+    // list of files / patterns to load in the browser
+    files: [
+      'dist/debug.js',
+      'test/*spec.js'
+    ],
+
+
+    // list of files to exclude
+    exclude: [
+      'src/node.js'
+    ],
+
+
+    // preprocess matching files before serving them to the browser
+    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
+    preprocessors: {
+    },
+
+    // test results reporter to use
+    // possible values: 'dots', 'progress'
+    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
+    reporters: ['progress'],
+
+
+    // web server port
+    port: 9876,
+
+
+    // enable / disable colors in the output (reporters and logs)
+    colors: true,
+
+
+    // level of logging
+    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
+    logLevel: config.LOG_INFO,
+
+
+    // enable / disable watching file and executing tests whenever any file changes
+    autoWatch: true,
+
+
+    // start these browsers
+    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
+    browsers: ['PhantomJS'],
+
+
+    // Continuous Integration mode
+    // if true, Karma captures browsers, runs the tests and exits
+    singleRun: false,
+
+    // Concurrency level
+    // how many browser should be started simultaneous
+    concurrency: Infinity
+  })
+}
diff --git a/register/node_modules/express-session/node_modules/debug/node.js b/register/node_modules/express-session/node_modules/debug/node.js
new file mode 100644
index 0000000..7fc36fe
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/node.js
@@ -0,0 +1 @@
+module.exports = require('./src/node');
diff --git a/register/node_modules/express-session/node_modules/debug/package.json b/register/node_modules/express-session/node_modules/debug/package.json
new file mode 100644
index 0000000..9031bba
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/package.json
@@ -0,0 +1,69 @@
+{
+  "name": "debug",
+  "version": "2.6.7",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/visionmedia/debug.git"
+  },
+  "description": "small debugging utility",
+  "keywords": [
+    "debug",
+    "log",
+    "debugger"
+  ],
+  "author": {
+    "name": "TJ Holowaychuk",
+    "email": "tj@vision-media.ca"
+  },
+  "contributors": [
+    {
+      "name": "Nathan Rajlich",
+      "email": "nathan@tootallnate.net",
+      "url": "http://n8.io"
+    },
+    {
+      "name": "Andrew Rhyne",
+      "email": "rhyneandrew@gmail.com"
+    }
+  ],
+  "license": "MIT",
+  "dependencies": {
+    "ms": "2.0.0"
+  },
+  "devDependencies": {
+    "browserify": "9.0.3",
+    "chai": "^3.5.0",
+    "concurrently": "^3.1.0",
+    "coveralls": "^2.11.15",
+    "eslint": "^3.12.1",
+    "istanbul": "^0.4.5",
+    "karma": "^1.3.0",
+    "karma-chai": "^0.1.0",
+    "karma-mocha": "^1.3.0",
+    "karma-phantomjs-launcher": "^1.0.2",
+    "karma-sinon": "^1.0.5",
+    "mocha": "^3.2.0",
+    "mocha-lcov-reporter": "^1.2.0",
+    "rimraf": "^2.5.4",
+    "sinon": "^1.17.6",
+    "sinon-chai": "^2.8.0"
+  },
+  "main": "./src/index.js",
+  "browser": "./src/browser.js",
+  "component": {
+    "scripts": {
+      "debug/index.js": "browser.js",
+      "debug/debug.js": "debug.js"
+    }
+  },
+  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
+  "readmeFilename": "README.md",
+  "bugs": {
+    "url": "https://github.com/visionmedia/debug/issues"
+  },
+  "homepage": "https://github.com/visionmedia/debug",
+  "_id": "debug@2.6.7",
+  "_shasum": "92bad1f6d05bbb6bba22cca88bcd0ec894c2861e",
+  "_from": "debug@2.6.7",
+  "_resolved": "https://registry.npmjs.org/debug/-/debug-2.6.7.tgz"
+}
diff --git a/register/node_modules/express-session/node_modules/debug/src/browser.js b/register/node_modules/express-session/node_modules/debug/src/browser.js
new file mode 100644
index 0000000..7978ce7
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/src/browser.js
@@ -0,0 +1,185 @@
+/**
+ * This is the web browser implementation of `debug()`.
+ *
+ * Expose `debug()` as the module.
+ */
+
+exports = module.exports = require('./debug');
+exports.log = log;
+exports.formatArgs = formatArgs;
+exports.save = save;
+exports.load = load;
+exports.useColors = useColors;
+exports.storage = 'undefined' != typeof chrome
+               && 'undefined' != typeof chrome.storage
+                  ? chrome.storage.local
+                  : localstorage();
+
+/**
+ * Colors.
+ */
+
+exports.colors = [
+  'lightseagreen',
+  'forestgreen',
+  'goldenrod',
+  'dodgerblue',
+  'darkorchid',
+  'crimson'
+];
+
+/**
+ * Currently only WebKit-based Web Inspectors, Firefox >= v31,
+ * and the Firebug extension (any Firefox version) are known
+ * to support "%c" CSS customizations.
+ *
+ * TODO: add a `localStorage` variable to explicitly enable/disable colors
+ */
+
+function useColors() {
+  // NB: In an Electron preload script, document will be defined but not fully
+  // initialized. Since we know we're in Chrome, we'll just detect this case
+  // explicitly
+  if (window && window.process && window.process.type === 'renderer') {
+    return true;
+  }
+
+  // is webkit? http://stackoverflow.com/a/16459606/376773
+  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
+  return (document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
+    // is firebug? http://stackoverflow.com/a/398120/376773
+    (window && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
+    // is firefox >= v31?
+    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
+    (navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
+    // double check webkit in userAgent just in case we are in a worker
+    (navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
+}
+
+/**
+ * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
+ */
+
+exports.formatters.j = function(v) {
+  try {
+    return JSON.stringify(v);
+  } catch (err) {
+    return '[UnexpectedJSONParseError]: ' + err.message;
+  }
+};
+
+
+/**
+ * Colorize log arguments if enabled.
+ *
+ * @api public
+ */
+
+function formatArgs(args) {
+  var useColors = this.useColors;
+
+  args[0] = (useColors ? '%c' : '')
+    + this.namespace
+    + (useColors ? ' %c' : ' ')
+    + args[0]
+    + (useColors ? '%c ' : ' ')
+    + '+' + exports.humanize(this.diff);
+
+  if (!useColors) return;
+
+  var c = 'color: ' + this.color;
+  args.splice(1, 0, c, 'color: inherit')
+
+  // the final "%c" is somewhat tricky, because there could be other
+  // arguments passed either before or after the %c, so we need to
+  // figure out the correct index to insert the CSS into
+  var index = 0;
+  var lastC = 0;
+  args[0].replace(/%[a-zA-Z%]/g, function(match) {
+    if ('%%' === match) return;
+    index++;
+    if ('%c' === match) {
+      // we only are interested in the *last* %c
+      // (the user may have provided their own)
+      lastC = index;
+    }
+  });
+
+  args.splice(lastC, 0, c);
+}
+
+/**
+ * Invokes `console.log()` when available.
+ * No-op when `console.log` is not a "function".
+ *
+ * @api public
+ */
+
+function log() {
+  // this hackery is required for IE8/9, where
+  // the `console.log` function doesn't have 'apply'
+  return 'object' === typeof console
+    && console.log
+    && Function.prototype.apply.call(console.log, console, arguments);
+}
+
+/**
+ * Save `namespaces`.
+ *
+ * @param {String} namespaces
+ * @api private
+ */
+
+function save(namespaces) {
+  try {
+    if (null == namespaces) {
+      exports.storage.removeItem('debug');
+    } else {
+      exports.storage.debug = namespaces;
+    }
+  } catch(e) {}
+}
+
+/**
+ * Load `namespaces`.
+ *
+ * @return {String} returns the previously persisted debug modes
+ * @api private
+ */
+
+function load() {
+  var r;
+  try {
+    r = exports.storage.debug;
+  } catch(e) {}
+
+  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
+  if (!r && typeof process !== 'undefined' && 'env' in process) {
+    r = process.env.DEBUG;
+  }
+
+  return r;
+}
+
+/**
+ * Enable namespaces listed in `localStorage.debug` initially.
+ */
+
+exports.enable(load());
+
+/**
+ * Localstorage attempts to return the localstorage.
+ *
+ * This is necessary because safari throws
+ * when a user disables cookies/localstorage
+ * and you attempt to access it.
+ *
+ * @return {LocalStorage}
+ * @api private
+ */
+
+function localstorage() {
+  try {
+    return window.localStorage;
+  } catch (e) {}
+}
diff --git a/register/node_modules/express-session/node_modules/debug/src/debug.js b/register/node_modules/express-session/node_modules/debug/src/debug.js
new file mode 100644
index 0000000..6a5e3fc
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/src/debug.js
@@ -0,0 +1,202 @@
+
+/**
+ * This is the common logic for both the Node.js and web browser
+ * implementations of `debug()`.
+ *
+ * Expose `debug()` as the module.
+ */
+
+exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
+exports.coerce = coerce;
+exports.disable = disable;
+exports.enable = enable;
+exports.enabled = enabled;
+exports.humanize = require('ms');
+
+/**
+ * The currently active debug mode names, and names to skip.
+ */
+
+exports.names = [];
+exports.skips = [];
+
+/**
+ * Map of special "%n" handling functions, for the debug "format" argument.
+ *
+ * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
+ */
+
+exports.formatters = {};
+
+/**
+ * Previous log timestamp.
+ */
+
+var prevTime;
+
+/**
+ * Select a color.
+ * @param {String} namespace
+ * @return {Number}
+ * @api private
+ */
+
+function selectColor(namespace) {
+  var hash = 0, i;
+
+  for (i in namespace) {
+    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
+    hash |= 0; // Convert to 32bit integer
+  }
+
+  return exports.colors[Math.abs(hash) % exports.colors.length];
+}
+
+/**
+ * Create a debugger with the given `namespace`.
+ *
+ * @param {String} namespace
+ * @return {Function}
+ * @api public
+ */
+
+function createDebug(namespace) {
+
+  function debug() {
+    // disabled?
+    if (!debug.enabled) return;
+
+    var self = debug;
+
+    // set `diff` timestamp
+    var curr = +new Date();
+    var ms = curr - (prevTime || curr);
+    self.diff = ms;
+    self.prev = prevTime;
+    self.curr = curr;
+    prevTime = curr;
+
+    // turn the `arguments` into a proper Array
+    var args = new Array(arguments.length);
+    for (var i = 0; i < args.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    args[0] = exports.coerce(args[0]);
+
+    if ('string' !== typeof args[0]) {
+      // anything else let's inspect with %O
+      args.unshift('%O');
+    }
+
+    // apply any `formatters` transformations
+    var index = 0;
+    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
+      // if we encounter an escaped % then don't increase the array index
+      if (match === '%%') return match;
+      index++;
+      var formatter = exports.formatters[format];
+      if ('function' === typeof formatter) {
+        var val = args[index];
+        match = formatter.call(self, val);
+
+        // now we need to remove `args[index]` since it's inlined in the `format`
+        args.splice(index, 1);
+        index--;
+      }
+      return match;
+    });
+
+    // apply env-specific formatting (colors, etc.)
+    exports.formatArgs.call(self, args);
+
+    var logFn = debug.log || exports.log || console.log.bind(console);
+    logFn.apply(self, args);
+  }
+
+  debug.namespace = namespace;
+  debug.enabled = exports.enabled(namespace);
+  debug.useColors = exports.useColors();
+  debug.color = selectColor(namespace);
+
+  // env-specific initialization logic for debug instances
+  if ('function' === typeof exports.init) {
+    exports.init(debug);
+  }
+
+  return debug;
+}
+
+/**
+ * Enables a debug mode by namespaces. This can include modes
+ * separated by a colon and wildcards.
+ *
+ * @param {String} namespaces
+ * @api public
+ */
+
+function enable(namespaces) {
+  exports.save(namespaces);
+
+  exports.names = [];
+  exports.skips = [];
+
+  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
+  var len = split.length;
+
+  for (var i = 0; i < len; i++) {
+    if (!split[i]) continue; // ignore empty strings
+    namespaces = split[i].replace(/\*/g, '.*?');
+    if (namespaces[0] === '-') {
+      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
+    } else {
+      exports.names.push(new RegExp('^' + namespaces + '$'));
+    }
+  }
+}
+
+/**
+ * Disable debug output.
+ *
+ * @api public
+ */
+
+function disable() {
+  exports.enable('');
+}
+
+/**
+ * Returns true if the given mode name is enabled, false otherwise.
+ *
+ * @param {String} name
+ * @return {Boolean}
+ * @api public
+ */
+
+function enabled(name) {
+  var i, len;
+  for (i = 0, len = exports.skips.length; i < len; i++) {
+    if (exports.skips[i].test(name)) {
+      return false;
+    }
+  }
+  for (i = 0, len = exports.names.length; i < len; i++) {
+    if (exports.names[i].test(name)) {
+      return true;
+    }
+  }
+  return false;
+}
+
+/**
+ * Coerce `val`.
+ *
+ * @param {Mixed} val
+ * @return {Mixed}
+ * @api private
+ */
+
+function coerce(val) {
+  if (val instanceof Error) return val.stack || val.message;
+  return val;
+}
diff --git a/register/node_modules/express-session/node_modules/debug/src/index.js b/register/node_modules/express-session/node_modules/debug/src/index.js
new file mode 100644
index 0000000..e12cf4d
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/debug/src/index.js
@@ -0,0 +1,10 @@
+/**
+ * Detect Electron renderer process, which is node, but we should
+ * treat as a browser.
+ */
+
+if (typeof process !== 'undefined' && process.type === 'renderer') {
+  module.exports = require('./browser.js');
+} else {
+  module.exports = require('./node.js');
+}
diff --git a/register/node_modules/express-session/node_modules/on-headers/HISTORY.md b/register/node_modules/express-session/node_modules/on-headers/HISTORY.md
new file mode 100644
index 0000000..e51ff01
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/on-headers/HISTORY.md
@@ -0,0 +1,16 @@
+1.0.1 / 2015-09-29
+==================
+
+  * perf: enable strict mode
+
+1.0.0 / 2014-08-10
+==================
+
+  * Honor `res.statusCode` change in `listener`
+  * Move to `jshttp` orgainzation
+  * Prevent `arguments`-related de-opt
+
+0.0.0 / 2014-05-13
+==================
+
+  * Initial implementation
diff --git a/register/node_modules/express-session/node_modules/on-headers/LICENSE b/register/node_modules/express-session/node_modules/on-headers/LICENSE
new file mode 100644
index 0000000..b7dce6c
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/on-headers/LICENSE
@@ -0,0 +1,22 @@
+(The MIT License)
+
+Copyright (c) 2014 Douglas Christopher Wilson
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/on-headers/README.md b/register/node_modules/express-session/node_modules/on-headers/README.md
new file mode 100644
index 0000000..48ed9ae
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/on-headers/README.md
@@ -0,0 +1,76 @@
+# on-headers
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+Execute a listener when a response is about to write headers.
+
+## Installation
+
+```sh
+$ npm install on-headers
+```
+
+## API
+
+```js
+var onHeaders = require('on-headers')
+```
+
+### onHeaders(res, listener)
+
+This will add the listener `listener` to fire when headers are emitted for `res`.
+The listener is passed the `response` object as it's context (`this`). Headers are
+considered to be emitted only once, right before they are sent to the client.
+
+When this is called multiple times on the same `res`, the `listener`s are fired
+in the reverse order they were added.
+
+## Examples
+
+```js
+var http = require('http')
+var onHeaders = require('on-headers')
+
+http
+.createServer(onRequest)
+.listen(3000)
+
+function addPoweredBy() {
+  // set if not set by end of request
+  if (!this.getHeader('X-Powered-By')) {
+    this.setHeader('X-Powered-By', 'Node.js')
+  }
+}
+
+function onRequest(req, res) {
+  onHeaders(res, addPoweredBy)
+
+  res.setHeader('Content-Type', 'text/plain')
+  res.end('hello!')
+}
+```
+
+## Testing
+
+```sh
+$ npm test
+```
+
+## License
+
+[MIT](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/on-headers.svg
+[npm-url]: https://npmjs.org/package/on-headers
+[node-version-image]: https://img.shields.io/node/v/on-headers.svg
+[node-version-url]: http://nodejs.org/download/
+[travis-image]: https://img.shields.io/travis/jshttp/on-headers/master.svg
+[travis-url]: https://travis-ci.org/jshttp/on-headers
+[coveralls-image]: https://img.shields.io/coveralls/jshttp/on-headers/master.svg
+[coveralls-url]: https://coveralls.io/r/jshttp/on-headers?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/on-headers.svg
+[downloads-url]: https://npmjs.org/package/on-headers
diff --git a/register/node_modules/express-session/node_modules/on-headers/package.json b/register/node_modules/express-session/node_modules/on-headers/package.json
new file mode 100644
index 0000000..484faee
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/on-headers/package.json
@@ -0,0 +1,70 @@
+{
+  "name": "on-headers",
+  "description": "Execute a listener when a response is about to write headers",
+  "version": "1.0.1",
+  "author": {
+    "name": "Douglas Christopher Wilson",
+    "email": "doug@somethingdoug.com"
+  },
+  "license": "MIT",
+  "keywords": [
+    "event",
+    "headers",
+    "http",
+    "onheaders"
+  ],
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/jshttp/on-headers.git"
+  },
+  "dependencies": {},
+  "devDependencies": {
+    "istanbul": "0.3.21",
+    "mocha": "2.3.3",
+    "supertest": "1.1.0"
+  },
+  "files": [
+    "LICENSE",
+    "HISTORY.md",
+    "README.md",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8"
+  },
+  "scripts": {
+    "test": "mocha --reporter spec --bail --check-leaks test/",
+    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
+    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
+  },
+  "gitHead": "ab0156a979d72353cfe666cccb3639e016b00280",
+  "bugs": {
+    "url": "https://github.com/jshttp/on-headers/issues"
+  },
+  "homepage": "https://github.com/jshttp/on-headers",
+  "_id": "on-headers@1.0.1",
+  "_shasum": "928f5d0f470d49342651ea6794b0857c100693f7",
+  "_from": "on-headers@~1.0.1",
+  "_npmVersion": "1.4.28",
+  "_npmUser": {
+    "name": "dougwilson",
+    "email": "doug@somethingdoug.com"
+  },
+  "maintainers": [
+    {
+      "name": "dougwilson",
+      "email": "doug@somethingdoug.com"
+    },
+    {
+      "name": "jongleberry",
+      "email": "jonathanrichardong@gmail.com"
+    }
+  ],
+  "dist": {
+    "shasum": "928f5d0f470d49342651ea6794b0857c100693f7",
+    "tarball": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz",
+  "readme": "ERROR: No README data found!"
+}
diff --git a/register/node_modules/express-session/node_modules/uid-safe/HISTORY.md b/register/node_modules/express-session/node_modules/uid-safe/HISTORY.md
new file mode 100644
index 0000000..f61a49e
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/HISTORY.md
@@ -0,0 +1,56 @@
+2.1.4 / 2017-03-02
+==================
+
+  * Remove `base64-url` dependency
+
+2.1.3 / 2016-10-30
+==================
+
+  * deps: base64-url@1.3.3
+
+2.1.2 / 2016-08-15
+==================
+
+  * deps: base64-url@1.3.2
+
+2.1.1 / 2016-05-04
+==================
+
+  * deps: base64-url@1.2.2
+
+2.1.0 / 2016-01-17
+==================
+
+  * Use `random-bytes` for byte source
+
+2.0.0 / 2015-05-08
+==================
+
+  * Use global `Promise` when returning a promise
+
+1.1.0 / 2015-02-01
+==================
+
+  * Use `crypto.randomBytes`, if available
+  * deps: base64-url@1.2.1
+
+1.0.3 / 2015-01-31
+==================
+
+  * Fix error branch that would throw
+  * deps: base64-url@1.2.0
+
+1.0.2 / 2015-01-08
+==================
+
+  * Remove dependency on `mz`
+
+1.0.1 / 2014-06-18
+==================
+
+  * Remove direct `bluebird` dependency
+
+1.0.0 / 2014-06-18
+==================
+
+  * Initial release
diff --git a/register/node_modules/express-session/node_modules/uid-safe/LICENSE b/register/node_modules/express-session/node_modules/uid-safe/LICENSE
new file mode 100644
index 0000000..c4b8a49
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/LICENSE
@@ -0,0 +1,22 @@
+The MIT License (MIT)
+
+Copyright (c) 2014 Jonathan Ong <me@jongleberry.com>
+Copyright (c) 2015-2017 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/uid-safe/README.md b/register/node_modules/express-session/node_modules/uid-safe/README.md
new file mode 100644
index 0000000..fa02be8
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/README.md
@@ -0,0 +1,77 @@
+# uid-safe
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+URL and cookie safe UIDs
+
+Create cryptographically secure UIDs safe for both cookie and URL usage.
+This is in contrast to modules such as [rand-token](https://www.npmjs.com/package/rand-token)
+and [uid2](https://www.npmjs.com/package/uid2) whose UIDs are actually skewed
+due to the use of `%` and unnecessarily truncate the UID.
+Use this if you could still use UIDs with `-` and `_` in them.
+
+## Installation
+
+```sh
+$ npm install uid-safe
+```
+
+## API
+
+```js
+var uid = require('uid-safe')
+```
+
+### uid(byteLength, callback)
+
+Asynchronously create a UID with a specific byte length. Because `base64`
+encoding is used underneath, this is not the string length. For example,
+to create a UID of length 24, you want a byte length of 18.
+
+```js
+uid(18, function (err, string) {
+  if (err) throw err
+  // do something with the string
+})
+```
+
+### uid(byteLength)
+
+Asynchronously create a UID with a specific byte length and return a
+`Promise`.
+
+**Note**: To use promises in Node.js _prior to 0.12_, promises must be
+"polyfilled" using `global.Promise = require('bluebird')`.
+
+```js
+uid(18).then(function (string) {
+  // do something with the string
+})
+```
+
+### uid.sync(byteLength)
+
+A synchronous version of above.
+
+```js
+var string = uid.sync(18)
+```
+
+## License
+
+[MIT](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/uid-safe.svg
+[npm-url]: https://npmjs.org/package/uid-safe
+[node-version-image]: https://img.shields.io/node/v/uid-safe.svg
+[node-version-url]: https://nodejs.org/en/download/
+[travis-image]: https://img.shields.io/travis/crypto-utils/uid-safe/master.svg
+[travis-url]: https://travis-ci.org/crypto-utils/uid-safe
+[coveralls-image]: https://img.shields.io/coveralls/crypto-utils/uid-safe/master.svg
+[coveralls-url]: https://coveralls.io/r/crypto-utils/uid-safe?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/uid-safe.svg
+[downloads-url]: https://npmjs.org/package/uid-safe
diff --git a/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/HISTORY.md b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/HISTORY.md
new file mode 100644
index 0000000..8cabd9d
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/HISTORY.md
@@ -0,0 +1,4 @@
+1.0.0 / 2016-01-17
+==================
+
+  * Initial release
diff --git a/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/LICENSE b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/LICENSE
new file mode 100644
index 0000000..c24dbe3
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/LICENSE
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2016 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/README.md b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/README.md
new file mode 100644
index 0000000..df5aacc
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/README.md
@@ -0,0 +1,77 @@
+# random-bytes
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+Generate strong pseudo-random bytes.
+
+This module is a simple wrapper around the Node.js core `crypto.randomBytes` API,
+with the following additions:
+
+  * A `Promise` interface for environments with promises.
+  * For Node.js versions that do not wait for the PRNG to be seeded, this module
+    will wait a bit.
+
+## Installation
+
+```sh
+$ npm install random-bytes
+```
+
+## API
+
+```js
+var randomBytes = require('random-bytes')
+```
+
+### randomBytes(size, callback)
+
+Generates strong pseudo-random bytes. The `size` argument is a number indicating
+the number of bytes to generate.
+
+```js
+randomBytes(12, function (error, bytes) {
+  if (error) throw error
+  // do something with the bytes
+})
+```
+
+### randomBytes(size)
+
+Generates strong pseudo-random bytes and return a `Promise`. The `size` argument is
+a number indicating the number of bytes to generate.
+
+**Note**: To use promises in Node.js _prior to 0.12_, promises must be
+"polyfilled" using `global.Promise = require('bluebird')`.
+
+```js
+randomBytes(18).then(function (string) {
+  // do something with the string
+})
+```
+
+### randomBytes.sync(size)
+
+A synchronous version of above.
+
+```js
+var bytes = randomBytes.sync(18)
+```
+
+## License
+
+[MIT](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/random-bytes.svg
+[npm-url]: https://npmjs.org/package/random-bytes
+[node-version-image]: https://img.shields.io/node/v/random-bytes.svg
+[node-version-url]: http://nodejs.org/download/
+[travis-image]: https://img.shields.io/travis/crypto-utils/random-bytes/master.svg
+[travis-url]: https://travis-ci.org/crypto-utils/random-bytes
+[coveralls-image]: https://img.shields.io/coveralls/crypto-utils/random-bytes/master.svg
+[coveralls-url]: https://coveralls.io/r/crypto-utils/random-bytes?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/random-bytes.svg
+[downloads-url]: https://npmjs.org/package/random-bytes
diff --git a/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/index.js b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/index.js
new file mode 100644
index 0000000..9ad930f
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/index.js
@@ -0,0 +1,101 @@
+/*!
+ * random-bytes
+ * Copyright(c) 2016 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict'
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var crypto = require('crypto')
+
+/**
+ * Module variables.
+ * @private
+ */
+
+var generateAttempts = crypto.randomBytes === crypto.pseudoRandomBytes ? 1 : 3
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = randomBytes
+module.exports.sync = randomBytesSync
+
+/**
+ * Generates strong pseudo-random bytes.
+ *
+ * @param {number} size
+ * @param {function} [callback]
+ * @return {Promise}
+ * @public
+ */
+
+function randomBytes(size, callback) {
+  // validate callback is a function, if provided
+  if (callback !== undefined && typeof callback !== 'function') {
+    throw new TypeError('argument callback must be a function')
+  }
+
+  // require the callback without promises
+  if (!callback && !global.Promise) {
+    throw new TypeError('argument callback is required')
+  }
+
+  if (callback) {
+    // classic callback style
+    return generateRandomBytes(size, generateAttempts, callback)
+  }
+
+  return new Promise(function executor(resolve, reject) {
+    generateRandomBytes(size, generateAttempts, function onRandomBytes(err, str) {
+      if (err) return reject(err)
+      resolve(str)
+    })
+  })
+}
+
+/**
+ * Generates strong pseudo-random bytes sync.
+ *
+ * @param {number} size
+ * @return {Buffer}
+ * @public
+ */
+
+function randomBytesSync(size) {
+  var err = null
+
+  for (var i = 0; i < generateAttempts; i++) {
+    try {
+      return crypto.randomBytes(size)
+    } catch (e) {
+      err = e
+    }
+  }
+
+  throw err
+}
+
+/**
+ * Generates strong pseudo-random bytes.
+ *
+ * @param {number} size
+ * @param {number} attempts
+ * @param {function} callback
+ * @private
+ */
+
+function generateRandomBytes(size, attempts, callback) {
+  crypto.randomBytes(size, function onRandomBytes(err, buf) {
+    if (!err) return callback(null, buf)
+    if (!--attempts) return callback(err)
+    setTimeout(generateRandomBytes.bind(null, size, attempts, callback), 10)
+  })
+}
diff --git a/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/package.json b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/package.json
new file mode 100644
index 0000000..eebef0e
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/node_modules/random-bytes/package.json
@@ -0,0 +1,68 @@
+{
+  "name": "random-bytes",
+  "description": "URL and cookie safe UIDs",
+  "version": "1.0.0",
+  "contributors": [
+    {
+      "name": "Douglas Christopher Wilson",
+      "email": "doug@somethingdoug.com"
+    }
+  ],
+  "license": "MIT",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/crypto-utils/random-bytes.git"
+  },
+  "devDependencies": {
+    "bluebird": "3.1.1",
+    "istanbul": "0.4.2",
+    "mocha": "2.3.4",
+    "proxyquire": "1.2.0"
+  },
+  "files": [
+    "LICENSE",
+    "HISTORY.md",
+    "README.md",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8"
+  },
+  "scripts": {
+    "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
+    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/",
+    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/"
+  },
+  "keywords": [
+    "bytes",
+    "generator",
+    "random",
+    "safe"
+  ],
+  "gitHead": "3dcd47425a3dfe858ee8debcd4db0c1222110bc3",
+  "bugs": {
+    "url": "https://github.com/crypto-utils/random-bytes/issues"
+  },
+  "homepage": "https://github.com/crypto-utils/random-bytes",
+  "_id": "random-bytes@1.0.0",
+  "_shasum": "4f68a1dc0ae58bd3fb95848c30324db75d64360b",
+  "_from": "random-bytes@~1.0.0",
+  "_npmVersion": "1.4.28",
+  "_npmUser": {
+    "name": "dougwilson",
+    "email": "doug@somethingdoug.com"
+  },
+  "maintainers": [
+    {
+      "name": "dougwilson",
+      "email": "doug@somethingdoug.com"
+    }
+  ],
+  "dist": {
+    "shasum": "4f68a1dc0ae58bd3fb95848c30324db75d64360b",
+    "tarball": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
+  "readme": "ERROR: No README data found!"
+}
diff --git a/register/node_modules/express-session/node_modules/uid-safe/package.json b/register/node_modules/express-session/node_modules/uid-safe/package.json
new file mode 100644
index 0000000..adc9b15
--- /dev/null
+++ b/register/node_modules/express-session/node_modules/uid-safe/package.json
@@ -0,0 +1,93 @@
+{
+  "name": "uid-safe",
+  "description": "URL and cookie safe UIDs",
+  "version": "2.1.4",
+  "contributors": [
+    {
+      "name": "Douglas Christopher Wilson",
+      "email": "doug@somethingdoug.com"
+    },
+    {
+      "name": "Jonathan Ong",
+      "email": "me@jongleberry.com",
+      "url": "http://jongleberry.com"
+    }
+  ],
+  "license": "MIT",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/crypto-utils/uid-safe.git"
+  },
+  "dependencies": {
+    "random-bytes": "~1.0.0"
+  },
+  "devDependencies": {
+    "bluebird": "3.4.7",
+    "eslint": "3.16.1",
+    "eslint-config-standard": "7.0.0",
+    "eslint-plugin-promise": "3.5.0",
+    "eslint-plugin-standard": "2.1.1",
+    "istanbul": "0.4.5",
+    "mocha": "2.5.3"
+  },
+  "files": [
+    "LICENSE",
+    "HISTORY.md",
+    "README.md",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8"
+  },
+  "scripts": {
+    "lint": "eslint .",
+    "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
+    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/",
+    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/"
+  },
+  "keywords": [
+    "random",
+    "generator",
+    "uid",
+    "safe"
+  ],
+  "gitHead": "4964cfbf8aa89e1988e30f26e2ecaa4ba239222d",
+  "bugs": {
+    "url": "https://github.com/crypto-utils/uid-safe/issues"
+  },
+  "homepage": "https://github.com/crypto-utils/uid-safe#readme",
+  "_id": "uid-safe@2.1.4",
+  "_shasum": "3ad6f38368c6d4c8c75ec17623fb79aa1d071d81",
+  "_from": "uid-safe@~2.1.4",
+  "_npmVersion": "2.15.11",
+  "_nodeVersion": "4.7.3",
+  "_npmUser": {
+    "name": "dougwilson",
+    "email": "doug@somethingdoug.com"
+  },
+  "dist": {
+    "shasum": "3ad6f38368c6d4c8c75ec17623fb79aa1d071d81",
+    "tarball": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.4.tgz"
+  },
+  "maintainers": [
+    {
+      "name": "dougwilson",
+      "email": "doug@somethingdoug.com"
+    },
+    {
+      "name": "fishrock123",
+      "email": "fishrock123@rocketmail.com"
+    },
+    {
+      "name": "jongleberry",
+      "email": "jonathanrichardong@gmail.com"
+    }
+  ],
+  "_npmOperationalInternal": {
+    "host": "packages-18-east.internal.npmjs.com",
+    "tmp": "tmp/uid-safe-2.1.4.tgz_1488511355733_0.1465235783252865"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.4.tgz",
+  "readme": "ERROR: No README data found!"
+}
diff --git a/register/node_modules/express-session/package.json b/register/node_modules/express-session/package.json
new file mode 100644
index 0000000..ad23712
--- /dev/null
+++ b/register/node_modules/express-session/package.json
@@ -0,0 +1,97 @@
+{
+  "name": "express-session",
+  "version": "1.15.3",
+  "description": "Simple session middleware for Express",
+  "author": {
+    "name": "TJ Holowaychuk",
+    "email": "tj@vision-media.ca",
+    "url": "http://tjholowaychuk.com"
+  },
+  "contributors": [
+    {
+      "name": "Douglas Christopher Wilson",
+      "email": "doug@somethingdoug.com"
+    },
+    {
+      "name": "Joe Wagner",
+      "email": "njwjs722@gmail.com"
+    }
+  ],
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/expressjs/session.git"
+  },
+  "license": "MIT",
+  "dependencies": {
+    "cookie": "0.3.1",
+    "cookie-signature": "1.0.6",
+    "crc": "3.4.4",
+    "debug": "2.6.7",
+    "depd": "~1.1.0",
+    "on-headers": "~1.0.1",
+    "parseurl": "~1.3.1",
+    "uid-safe": "~2.1.4",
+    "utils-merge": "1.0.0"
+  },
+  "devDependencies": {
+    "after": "0.8.2",
+    "cookie-parser": "1.4.3",
+    "express": "4.15.3",
+    "istanbul": "0.4.5",
+    "mocha": "2.5.3",
+    "supertest": "1.1.0"
+  },
+  "files": [
+    "session/",
+    "HISTORY.md",
+    "LICENSE",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8.0"
+  },
+  "scripts": {
+    "test": "mocha --bail --reporter spec test/",
+    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/",
+    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"
+  },
+  "gitHead": "ff4c5117d4c7f93f375610b76494e47cdd7d1aaa",
+  "bugs": {
+    "url": "https://github.com/expressjs/session/issues"
+  },
+  "homepage": "https://github.com/expressjs/session#readme",
+  "_id": "express-session@1.15.3",
+  "_shasum": "db545f0435a7b1b228ae02da8197f65141735c67",
+  "_from": "express-session@",
+  "_npmVersion": "3.10.10",
+  "_nodeVersion": "6.10.3",
+  "_npmUser": {
+    "name": "dougwilson",
+    "email": "doug@somethingdoug.com"
+  },
+  "dist": {
+    "shasum": "db545f0435a7b1b228ae02da8197f65141735c67",
+    "tarball": "https://registry.npmjs.org/express-session/-/express-session-1.15.3.tgz"
+  },
+  "maintainers": [
+    {
+      "name": "defunctzombie",
+      "email": "shtylman@gmail.com"
+    },
+    {
+      "name": "dougwilson",
+      "email": "doug@somethingdoug.com"
+    },
+    {
+      "name": "mscdex",
+      "email": "mscdex@mscdex.net"
+    }
+  ],
+  "_npmOperationalInternal": {
+    "host": "packages-12-west.internal.npmjs.com",
+    "tmp": "tmp/express-session-1.15.3.tgz_1495084879566_0.745563400676474"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/express-session/-/express-session-1.15.3.tgz",
+  "readme": "ERROR: No README data found!"
+}
diff --git a/register/node_modules/express-session/session/cookie.js b/register/node_modules/express-session/session/cookie.js
new file mode 100644
index 0000000..60ef22a
--- /dev/null
+++ b/register/node_modules/express-session/session/cookie.js
@@ -0,0 +1,130 @@
+/*!
+ * Connect - session - Cookie
+ * Copyright(c) 2010 Sencha Inc.
+ * Copyright(c) 2011 TJ Holowaychuk
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ */
+
+var merge = require('utils-merge')
+  , cookie = require('cookie');
+
+/**
+ * Initialize a new `Cookie` with the given `options`.
+ *
+ * @param {IncomingMessage} req
+ * @param {Object} options
+ * @api private
+ */
+
+var Cookie = module.exports = function Cookie(options) {
+  this.path = '/';
+  this.maxAge = null;
+  this.httpOnly = true;
+  if (options) merge(this, options);
+  this.originalMaxAge = undefined == this.originalMaxAge
+    ? this.maxAge
+    : this.originalMaxAge;
+};
+
+/*!
+ * Prototype.
+ */
+
+Cookie.prototype = {
+
+  /**
+   * Set expires `date`.
+   *
+   * @param {Date} date
+   * @api public
+   */
+
+  set expires(date) {
+    this._expires = date;
+    this.originalMaxAge = this.maxAge;
+  },
+
+  /**
+   * Get expires `date`.
+   *
+   * @return {Date}
+   * @api public
+   */
+
+  get expires() {
+    return this._expires;
+  },
+
+  /**
+   * Set expires via max-age in `ms`.
+   *
+   * @param {Number} ms
+   * @api public
+   */
+
+  set maxAge(ms) {
+    this.expires = 'number' == typeof ms
+      ? new Date(Date.now() + ms)
+      : ms;
+  },
+
+  /**
+   * Get expires max-age in `ms`.
+   *
+   * @return {Number}
+   * @api public
+   */
+
+  get maxAge() {
+    return this.expires instanceof Date
+      ? this.expires.valueOf() - Date.now()
+      : this.expires;
+  },
+
+  /**
+   * Return cookie data object.
+   *
+   * @return {Object}
+   * @api private
+   */
+
+  get data() {
+    return {
+        originalMaxAge: this.originalMaxAge
+      , expires: this._expires
+      , secure: this.secure
+      , httpOnly: this.httpOnly
+      , domain: this.domain
+      , path: this.path
+      , sameSite: this.sameSite
+    }
+  },
+
+  /**
+   * Return a serialized cookie string.
+   *
+   * @return {String}
+   * @api public
+   */
+
+  serialize: function(name, val){
+    return cookie.serialize(name, val, this.data);
+  },
+
+  /**
+   * Return JSON representation of this cookie.
+   *
+   * @return {Object}
+   * @api private
+   */
+
+  toJSON: function(){
+    return this.data;
+  }
+};
diff --git a/register/node_modules/express-session/session/memory.js b/register/node_modules/express-session/session/memory.js
new file mode 100644
index 0000000..25252b6
--- /dev/null
+++ b/register/node_modules/express-session/session/memory.js
@@ -0,0 +1,185 @@
+/*!
+ * express-session
+ * Copyright(c) 2010 Sencha Inc.
+ * Copyright(c) 2011 TJ Holowaychuk
+ * Copyright(c) 2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var Store = require('./store')
+var util = require('util')
+
+/**
+ * Shim setImmediate for node.js < 0.10
+ * @private
+ */
+
+/* istanbul ignore next */
+var defer = typeof setImmediate === 'function'
+  ? setImmediate
+  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
+
+/**
+ * Module exports.
+ */
+
+module.exports = MemoryStore
+
+/**
+ * A session store in memory.
+ * @public
+ */
+
+function MemoryStore() {
+  Store.call(this)
+  this.sessions = Object.create(null)
+}
+
+/**
+ * Inherit from Store.
+ */
+
+util.inherits(MemoryStore, Store)
+
+/**
+ * Get all active sessions.
+ *
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.all = function all(callback) {
+  var sessionIds = Object.keys(this.sessions)
+  var sessions = Object.create(null)
+
+  for (var i = 0; i < sessionIds.length; i++) {
+    var sessionId = sessionIds[i]
+    var session = getSession.call(this, sessionId)
+
+    if (session) {
+      sessions[sessionId] = session;
+    }
+  }
+
+  callback && defer(callback, null, sessions)
+}
+
+/**
+ * Clear all sessions.
+ *
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.clear = function clear(callback) {
+  this.sessions = Object.create(null)
+  callback && defer(callback)
+}
+
+/**
+ * Destroy the session associated with the given session ID.
+ *
+ * @param {string} sessionId
+ * @public
+ */
+
+MemoryStore.prototype.destroy = function destroy(sessionId, callback) {
+  delete this.sessions[sessionId]
+  callback && defer(callback)
+}
+
+/**
+ * Fetch session by the given session ID.
+ *
+ * @param {string} sessionId
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.get = function get(sessionId, callback) {
+  defer(callback, null, getSession.call(this, sessionId))
+}
+
+/**
+ * Commit the given session associated with the given sessionId to the store.
+ *
+ * @param {string} sessionId
+ * @param {object} session
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.set = function set(sessionId, session, callback) {
+  this.sessions[sessionId] = JSON.stringify(session)
+  callback && defer(callback)
+}
+
+/**
+ * Get number of active sessions.
+ *
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.length = function length(callback) {
+  this.all(function (err, sessions) {
+    if (err) return callback(err)
+    callback(null, Object.keys(sessions).length)
+  })
+}
+
+/**
+ * Touch the given session object associated with the given session ID.
+ *
+ * @param {string} sessionId
+ * @param {object} session
+ * @param {function} callback
+ * @public
+ */
+
+MemoryStore.prototype.touch = function touch(sessionId, session, callback) {
+  var currentSession = getSession.call(this, sessionId)
+
+  if (currentSession) {
+    // update expiration
+    currentSession.cookie = session.cookie
+    this.sessions[sessionId] = JSON.stringify(currentSession)
+  }
+
+  callback && defer(callback)
+}
+
+/**
+ * Get session from the store.
+ * @private
+ */
+
+function getSession(sessionId) {
+  var sess = this.sessions[sessionId]
+
+  if (!sess) {
+    return
+  }
+
+  // parse
+  sess = JSON.parse(sess)
+
+  var expires = typeof sess.cookie.expires === 'string'
+    ? new Date(sess.cookie.expires)
+    : sess.cookie.expires
+
+  // destroy expired session
+  if (expires && expires <= Date.now()) {
+    delete this.sessions[sessionId]
+    return
+  }
+
+  return sess
+}
diff --git a/register/node_modules/express-session/session/session.js b/register/node_modules/express-session/session/session.js
new file mode 100644
index 0000000..2eacde6
--- /dev/null
+++ b/register/node_modules/express-session/session/session.js
@@ -0,0 +1,142 @@
+/*!
+ * Connect - session - Session
+ * Copyright(c) 2010 Sencha Inc.
+ * Copyright(c) 2011 TJ Holowaychuk
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Expose Session.
+ */
+
+module.exports = Session;
+
+/**
+ * Create a new `Session` with the given request and `data`.
+ *
+ * @param {IncomingRequest} req
+ * @param {Object} data
+ * @api private
+ */
+
+function Session(req, data) {
+  Object.defineProperty(this, 'req', { value: req });
+  Object.defineProperty(this, 'id', { value: req.sessionID });
+
+  if (typeof data === 'object' && data !== null) {
+    // merge data into this, ignoring prototype properties
+    for (var prop in data) {
+      if (!(prop in this)) {
+        this[prop] = data[prop]
+      }
+    }
+  }
+}
+
+/**
+ * Update reset `.cookie.maxAge` to prevent
+ * the cookie from expiring when the
+ * session is still active.
+ *
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'touch', function touch() {
+  return this.resetMaxAge();
+});
+
+/**
+ * Reset `.maxAge` to `.originalMaxAge`.
+ *
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'resetMaxAge', function resetMaxAge() {
+  this.cookie.maxAge = this.cookie.originalMaxAge;
+  return this;
+});
+
+/**
+ * Save the session data with optional callback `fn(err)`.
+ *
+ * @param {Function} fn
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'save', function save(fn) {
+  this.req.sessionStore.set(this.id, this, fn || function(){});
+  return this;
+});
+
+/**
+ * Re-loads the session data _without_ altering
+ * the maxAge properties. Invokes the callback `fn(err)`,
+ * after which time if no exception has occurred the
+ * `req.session` property will be a new `Session` object,
+ * although representing the same session.
+ *
+ * @param {Function} fn
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'reload', function reload(fn) {
+  var req = this.req
+    , store = this.req.sessionStore;
+  store.get(this.id, function(err, sess){
+    if (err) return fn(err);
+    if (!sess) return fn(new Error('failed to load session'));
+    store.createSession(req, sess);
+    fn();
+  });
+  return this;
+});
+
+/**
+ * Destroy `this` session.
+ *
+ * @param {Function} fn
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'destroy', function destroy(fn) {
+  delete this.req.session;
+  this.req.sessionStore.destroy(this.id, fn);
+  return this;
+});
+
+/**
+ * Regenerate this request's session.
+ *
+ * @param {Function} fn
+ * @return {Session} for chaining
+ * @api public
+ */
+
+defineMethod(Session.prototype, 'regenerate', function regenerate(fn) {
+  this.req.sessionStore.regenerate(this.req, fn);
+  return this;
+});
+
+/**
+ * Helper function for creating a method on a prototype.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} fn
+ * @private
+ */
+function defineMethod(obj, name, fn) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: false,
+    value: fn,
+    writable: true
+  });
+};
diff --git a/register/node_modules/express-session/session/store.js b/register/node_modules/express-session/session/store.js
new file mode 100644
index 0000000..387469c
--- /dev/null
+++ b/register/node_modules/express-session/session/store.js
@@ -0,0 +1,94 @@
+/*!
+ * Connect - session - Store
+ * Copyright(c) 2010 Sencha Inc.
+ * Copyright(c) 2011 TJ Holowaychuk
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var Cookie = require('./cookie')
+var EventEmitter = require('events').EventEmitter
+var Session = require('./session')
+var util = require('util')
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = Store
+
+/**
+ * Abstract base class for session stores.
+ * @public
+ */
+
+function Store () {
+  EventEmitter.call(this)
+}
+
+/**
+ * Inherit from EventEmitter.
+ */
+
+util.inherits(Store, EventEmitter)
+
+/**
+ * Re-generate the given requests's session.
+ *
+ * @param {IncomingRequest} req
+ * @return {Function} fn
+ * @api public
+ */
+
+Store.prototype.regenerate = function(req, fn){
+  var self = this;
+  this.destroy(req.sessionID, function(err){
+    self.generate(req);
+    fn(err);
+  });
+};
+
+/**
+ * Load a `Session` instance via the given `sid`
+ * and invoke the callback `fn(err, sess)`.
+ *
+ * @param {String} sid
+ * @param {Function} fn
+ * @api public
+ */
+
+Store.prototype.load = function(sid, fn){
+  var self = this;
+  this.get(sid, function(err, sess){
+    if (err) return fn(err);
+    if (!sess) return fn();
+    var req = { sessionID: sid, sessionStore: self };
+    fn(null, self.createSession(req, sess))
+  });
+};
+
+/**
+ * Create session from JSON `sess` data.
+ *
+ * @param {IncomingRequest} req
+ * @param {Object} sess
+ * @return {Session}
+ * @api private
+ */
+
+Store.prototype.createSession = function(req, sess){
+  var expires = sess.cookie.expires
+    , orig = sess.cookie.originalMaxAge;
+  sess.cookie = new Cookie(sess.cookie);
+  if ('string' == typeof expires) sess.cookie.expires = new Date(expires);
+  sess.cookie.originalMaxAge = orig;
+  req.session = new Session(req, sess);
+  return req.session;
+};
diff --git a/register/npm/cookie-parser/.cache.json b/register/npm/cookie-parser/.cache.json
new file mode 100644
index 0000000..206f91a
--- /dev/null
+++ b/register/npm/cookie-parser/.cache.json
@@ -0,0 +1 @@
+{"_id":"cookie-parser","_rev":"225-4664f746457cd0df436665eb8c954ea8","name":"cookie-parser","description":"cookie parsing with signatures","dist-tags":{"latest":"1.4.3"},"versions":{"1.0.0":{"name":"cookie-parser","version":"1.0.0","description":"cookie parsing with signatures","keywords":["cookie","middleware"],"repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser.git"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"dependencies":{},"devDependencies":{"mocha":">= 1.17.0","connect":"2.13.0","supertest":"0.9.0","cookie-signature":"1.0.3"},"licenses":"MIT","main":"./index.js","engines":{"node":">= 0.10.0"},"scripts":{"test":"mocha --ui bdd --reporter list -- test/*.js"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.0.0","dist":{"shasum":"a1fafa99da2a28dc3f28eefd8c61db6b98ecd2f9","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.0.0.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"1.0.1":{"name":"cookie-parser","version":"1.0.1","description":"cookie parsing with signatures","keywords":["cookie","middleware"],"repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser.git"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"dependencies":{"cookie":"0.1.0","cookie-signature":"1.0.3"},"devDependencies":{"mocha":"~1.17.0","connect":"2.13.0","supertest":"0.9.0"},"licenses":"MIT","main":"./index.js","engines":{"node":">= 0.10.0"},"scripts":{"test":"mocha --ui bdd --reporter list -- test/*.js"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.0.1","dist":{"shasum":"17bd622c9717cd0858a912a9fef4c0362360a7b0","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.0.1.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"1.1.0":{"name":"cookie-parser","version":"1.1.0","description":"cookie parsing with signatures","keywords":["cookie","middleware"],"repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser.git"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.3"},"devDependencies":{"mocha":"~1.18.2","supertest":"~0.12.1"},"licenses":"MIT","main":"./index.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --ui bdd --reporter list -- test/*.js"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.1.0","dist":{"shasum":"2f8265aa3b55733a85eef207f0e2530c3e8cf705","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.1.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"directories":{}},"1.2.0":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.2.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.3"},"devDependencies":{"istanbul":"0.2.10","mocha":"~1.20.1","supertest":"~0.13.0"},"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter dot test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.2.0","dist":{"shasum":"1d8eedf6e67e16cecd863e3fb62c9799fa20ec7f","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.2.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"directories":{}},"1.3.0":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.3"},"devDependencies":{"istanbul":"0.2.10","mocha":"~1.20.1","supertest":"~0.13.0"},"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter dot test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.0","dist":{"shasum":"57273407a1f1e958825e5c58c828f35a70ff7074","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"directories":{}},"1.3.1":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.3"},"devDependencies":{"istanbul":"0.2.10","mocha":"~1.20.1","supertest":"~0.13.0"},"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter dot test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.1","dist":{"shasum":"30bfc2906a04489d59bcb9e32f90db08e04bb51e","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.1.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"directories":{}},"1.3.2":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.4"},"devDependencies":{"istanbul":"0.2.12","mocha":"~1.20.1","supertest":"~0.13.0"},"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter dot test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.2","dist":{"shasum":"52211cc82c955d79ff0c088954407724e19cf562","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.2.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"directories":{}},"1.3.3":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.5"},"devDependencies":{"istanbul":"0.3.2","mocha":"~1.21.4","supertest":"~0.13.0"},"files":["lib/","LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"893bf91a8a4e49c63b6e32065991b13a7d27ed4c","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.3","_shasum":"7e3a2c745f4b460d5a340e578a0baa5d7725fe37","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"7e3a2c745f4b460d5a340e578a0baa5d7725fe37","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.3.tgz"},"directories":{}},"1.3.4":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"licenses":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.2","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.3.5","mocha":"~2.1.0","supertest":"0.15.0"},"files":["lib/","LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"94764a584c70f26049b14c6ad845c8b0ed0e478b","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.4","_shasum":"193035a5be97117a21709b3aa737f6132717bda6","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"193035a5be97117a21709b3aa737f6132717bda6","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.4.tgz"},"directories":{}},"1.3.5":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.3.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.1.3","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.3.9","mocha":"2.2.5","supertest":"1.0.1"},"files":["lib/","LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"8133968c429c3f48eb8e3ed54932c52743ac9034","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.3.5","_shasum":"9d755570fb5d17890771227a02314d9be7cf8356","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"defunctzombie","email":"shtylman@gmail.com"}],"dist":{"shasum":"9d755570fb5d17890771227a02314d9be7cf8356","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.3.5.tgz"},"directories":{}},"1.4.0":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.4.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.2.2","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.3.20","mocha":"2.2.5","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"7defc09815f04dc7b665fd220b8705fba8d9573d","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.4.0","_shasum":"73323d5a7de341078c446109c622d2f7008164ee","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"defunctzombie","email":"shtylman@gmail.com"}],"dist":{"shasum":"73323d5a7de341078c446109c622d2f7008164ee","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.0.tgz"},"directories":{}},"1.4.1":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.4.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.2.3","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.4.2","mocha":"2.3.4","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"74d3caa4d89006db4c6fc0e1b41d70ee03e5d398","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.4.1","_shasum":"6b0ee6a8dec27a063af42d188a592cc1d72ba4f4","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"defunctzombie","email":"shtylman@gmail.com"}],"dist":{"shasum":"6b0ee6a8dec27a063af42d188a592cc1d72ba4f4","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.1.tgz"},"directories":{}},"1.4.2":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.4.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.2.4","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.4.3","mocha":"2.4.5","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"5280f7f8a69cae983c18ee3f724a7ef312e49962","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.4.2","_shasum":"a2e8f79e7b38bbbbafeec8f028d7828dd46da546","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"a2e8f79e7b38bbbbafeec8f028d7828dd46da546","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.2.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cookie-parser-1.4.2.tgz_1463791497410_0.9901552675291896"},"directories":{}},"1.4.3":{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.4.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.3.1","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.4.3","mocha":"2.5.3","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"gitHead":"ad0b2cb834affe3929f0a690cd0494cd0b96d6be","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.4.3","_shasum":"0fe31fa19d000b95f4aadf1f53fdc2b8a203baa5","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"0fe31fa19d000b95f4aadf1f53fdc2b8a203baa5","tarball":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.3.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cookie-parser-1.4.3.tgz_1464325360032_0.20419598533771932"},"directories":{}}},"readme":"# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log('Cookies: ', req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n","maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"}],"time":{"modified":"2017-06-02T08:58:41.376Z","created":"2014-02-15T16:25:08.464Z","1.0.0":"2014-02-15T16:25:08.464Z","1.0.1":"2014-02-21T05:06:16.709Z","1.1.0":"2014-05-12T23:50:32.243Z","1.2.0":"2014-06-18T03:48:48.231Z","1.3.0":"2014-06-18T04:12:20.674Z","1.3.1":"2014-06-18T04:15:41.681Z","1.3.2":"2014-06-26T17:40:20.078Z","1.3.3":"2014-09-06T04:45:10.315Z","1.3.4":"2015-02-15T19:11:21.934Z","1.3.5":"2015-05-20T01:42:40.288Z","1.4.0":"2015-09-18T19:15:21.387Z","1.4.1":"2016-01-11T15:13:12.401Z","1.4.2":"2016-05-21T00:44:58.438Z","1.4.3":"2016-05-27T05:02:41.857Z"},"readmeFilename":"README.md","homepage":"https://github.com/expressjs/cookie-parser","keywords":["cookie","middleware"],"repository":{"type":"git","url":"https://github.com/expressjs/cookie-parser"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"users":{"83057396":true,"masanorinyo":true,"runningtalus":true,"roboterhund87":true,"mswanson1524":true,"matteospampani":true,"dofy":true,"imzhi":true,"alexandermac":true,"damocles":true,"tsm91":true,"javimaravillas":true,"lucasmciruzzi":true,"clunt":true,"f124275809":true,"dlpowless":true,"andreaspag":true,"x_soth":true,"manxisuo":true,"vboctor":true,"dongxu":true,"markthethomas":true,"shaneli":true,"flyslow":true,"staraple":true,"iamwiz":true,"damianof":true,"joris-van-der-wel":true,"nikitka_m":true,"program247365":true,"luuhoangnam":true,"nex":true,"nickeljew":true,"buzzalderaan":true,"bpatel":true,"freshlogic":true,"johnny.young":true,"m412c0":true,"jack546":true,"isik":true,"dwayneford":true,"boyw165":true,"gztomas":true,"justincann":true,"stephn_r":true,"52u":true,"adamlu":true,"vbv":true,"wangnan0610":true,"xgheaven":true,"vwal":true,"decoda":true,"grantcarthew":true,"animaldna":true,"panlw":true,"kparkov":true,"kungkk":true,"ramzesucr":true,"wfcookie":true,"reecegoddard":true,"hema":true,"n1kkou":true,"crazyjingling":true,"kaperstone":true,"josejaguirre":true,"antanst":true,"christopher.urquidi":true,"volving":true,"kenkao":true,"zhiquan.yu":true,"imd92":true,"vteixeira":true,"andrew.medvedev":true,"bian17888":true,"jonyweb":true,"shadowlong":true,"novalu":true,"rbartoli":true,"wut":true,"dbck":true,"justinliao":true,"davidbraun":true,"stand__sure":true,"djamseed":true,"qbylucky":true,"paragi":true,"wkaifang":true,"evan2x":true,"hyteer":true,"bruinebeer":true,"vishwasc":true,"ansuman":true,"psmorrow":true,"geooogle":true,"nerdybeast":true,"honpery":true,"ristostevcev":true,"figroc":true,"sasquatch":true,"philiiiiiipp":true,"kodekracker":true,"lionft":true,"qinyifeng":true,"xu_q90":true,"igorissen":true,"elviopita":true,"princetoad":true,"zhenzhuquan":true,"ackhub":true,"asm2hex":true,"obouchari":true,"toby_reynold":true,"danielbankhead":true,"geekwen":true,"pmasa":true,"nickeltobias":true,"bourne":true,"duskalbatross":true,"hugovila":true,"marcobiedermann":true,"shiva127":true,"nagra":true,"scotchulous":true,"ymk":true,"apopek":true,"mobeicaoyuan":true,"crisperdue":true,"steve3d3d":true,"phoenixsoul":true,"kistoryg":true,"sansgumen":true,"slmcassio":true,"mr-smiley":true,"13lank.null":true,"chunxchun":true,"geduardcatalin":true,"ahvonenj":true,"hecto932":true,"langri-sha":true,"ab.moon":true,"khurshedyu":true,"tedyhy":true,"adamdreszer":true,"ma-ha":true,"shanewholloway":true,"rocket0191":true,"atulmy":true,"tin-lek":true,"landy2014":true,"abuelwafa":true,"shakakira":true,"wendaobai":true,"evdokimovm":true,"mauriciolauffer":true,"sgvinci":true,"giussa_dan":true,"augiethornton":true,"frankl83":true,"isa424":true,"satoru":true,"yong_a":true,"quafoo":true,"nate-river":true,"thomas.li":true,"qafir":true,"diogocapela":true,"lvpeng101":true,"tomchao":true,"alexcoady":true,"davidjsalazarmoreno":true,"xieping":true,"sadmansamee":true,"xiaoqiang.yang":true,"serge-nikitin":true,"zaks":true,"gpuente":true,"kevinhassan":true,"milan322":true,"asaupup":true,"modood":true,"ray0214":true,"chinawolf_wyp":true,"raycharles":true,"pddivine":true,"alexxnica":true},"license":"MIT","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"_attachments":{},"_etag":"W/\"593128c1-6a32\""}
\ No newline at end of file
diff --git a/register/npm/cookie-parser/1.4.3/package.tgz b/register/npm/cookie-parser/1.4.3/package.tgz
new file mode 100644
index 0000000..d520d07
Binary files /dev/null and b/register/npm/cookie-parser/1.4.3/package.tgz differ
diff --git a/register/npm/cookie-parser/1.4.3/package/HISTORY.md b/register/npm/cookie-parser/1.4.3/package/HISTORY.md
new file mode 100644
index 0000000..4f28f50
--- /dev/null
+++ b/register/npm/cookie-parser/1.4.3/package/HISTORY.md
@@ -0,0 +1,85 @@
+1.4.3 / 2016-05-26
+==================
+
+  * deps: cookie@0.3.1
+    - perf: use for loop in parse
+
+1.4.2 / 2016-05-20
+==================
+
+  * deps: cookie@0.2.4
+    - perf: enable strict mode
+    - perf: use for loop in parse
+    - perf: use string concatination for serialization
+
+1.4.1 / 2016-01-11
+==================
+
+  * deps: cookie@0.2.3
+  * perf: enable strict mode
+
+1.4.0 / 2015-09-18
+==================
+
+  * Accept array of secrets in addition to a single secret
+  * Fix `JSONCookie` to return `undefined` for non-string arguments
+  * Fix `signedCookie` to return `undefined` for non-string arguments
+  * deps: cookie@0.2.2
+
+1.3.5 / 2015-05-19
+==================
+
+  * deps: cookie@0.1.3
+    - Slight optimizations
+
+1.3.4 / 2015-02-15
+==================
+
+  * deps: cookie-signature@1.0.6
+
+1.3.3 / 2014-09-05
+==================
+
+  * deps: cookie-signature@1.0.5
+
+1.3.2 / 2014-06-26
+==================
+
+  * deps: cookie-signature@1.0.4
+    - fix for timing attacks
+
+1.3.1 / 2014-06-17
+==================
+
+  * actually export `signedCookie`
+
+1.3.0 / 2014-06-17
+==================
+
+  * add `signedCookie` export for single cookie unsigning
+
+1.2.0 / 2014-06-17
+==================
+
+  * export parsing functions
+  * `req.cookies` and `req.signedCookies` are now plain objects
+  * slightly faster parsing of many cookies
+
+1.1.0 / 2014-05-12
+==================
+
+  * Support for NodeJS version 0.8
+  * deps: cookie@0.1.2
+    - Fix for maxAge == 0
+    - made compat with expires field
+    - tweak maxAge NaN error message
+
+1.0.1 / 2014-02-20
+==================
+
+  * add missing dependencies
+
+1.0.0 / 2014-02-15
+==================
+
+  * Genesis from `connect`
diff --git a/register/npm/cookie-parser/1.4.3/package/LICENSE b/register/npm/cookie-parser/1.4.3/package/LICENSE
new file mode 100644
index 0000000..343f2ad
--- /dev/null
+++ b/register/npm/cookie-parser/1.4.3/package/LICENSE
@@ -0,0 +1,23 @@
+(The MIT License)
+
+Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>
+Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/register/npm/cookie-parser/1.4.3/package/README.md b/register/npm/cookie-parser/1.4.3/package/README.md
new file mode 100644
index 0000000..05dbdc5
--- /dev/null
+++ b/register/npm/cookie-parser/1.4.3/package/README.md
@@ -0,0 +1,85 @@
+# cookie-parser
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+Parse `Cookie` header and populate `req.cookies` with an object keyed by the cookie
+names. Optionally you may enable signed cookie support by passing a `secret` string,
+which assigns `req.secret` so it may be used by other middleware.
+
+## Installation
+
+```sh
+$ npm install cookie-parser
+```
+
+## API
+
+```js
+var express      = require('express')
+var cookieParser = require('cookie-parser')
+
+var app = express()
+app.use(cookieParser())
+```
+
+### cookieParser(secret, options)
+
+- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.
+  - `decode` a function to decode the value of the cookie
+
+### cookieParser.JSONCookie(str)
+
+Parse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.
+
+### cookieParser.JSONCookies(cookies)
+
+Given an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.
+
+### cookieParser.signedCookie(str, secret)
+
+Parse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.
+
+The `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+
+### cookieParser.signedCookies(cookies, secret)
+
+Given an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.
+
+The `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.
+
+## Example
+
+```js
+var express      = require('express')
+var cookieParser = require('cookie-parser')
+
+var app = express()
+app.use(cookieParser())
+
+app.get('/', function(req, res) {
+  console.log('Cookies: ', req.cookies)
+})
+
+app.listen(8080)
+
+// curl command that sends an HTTP request with two cookies
+// curl http://127.0.0.1:8080 --cookie "Cho=Kim;Greet=Hello"
+```
+
+### [MIT Licensed](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg
+[npm-url]: https://npmjs.org/package/cookie-parser
+[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg
+[node-version-url]: https://nodejs.org/en/download
+[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg
+[travis-url]: https://travis-ci.org/expressjs/cookie-parser
+[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg
+[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg
+[downloads-url]: https://npmjs.org/package/cookie-parser
diff --git a/register/npm/cookie-parser/1.4.3/package/index.js b/register/npm/cookie-parser/1.4.3/package/index.js
new file mode 100644
index 0000000..59816a2
--- /dev/null
+++ b/register/npm/cookie-parser/1.4.3/package/index.js
@@ -0,0 +1,181 @@
+/*!
+ * cookie-parser
+ * Copyright(c) 2014 TJ Holowaychuk
+ * Copyright(c) 2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module dependencies.
+ * @private
+ */
+
+var cookie = require('cookie');
+var signature = require('cookie-signature');
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = cookieParser;
+module.exports.JSONCookie = JSONCookie;
+module.exports.JSONCookies = JSONCookies;
+module.exports.signedCookie = signedCookie;
+module.exports.signedCookies = signedCookies;
+
+/**
+ * Parse Cookie header and populate `req.cookies`
+ * with an object keyed by the cookie names.
+ *
+ * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).
+ * @param {Object} [options]
+ * @return {Function}
+ * @public
+ */
+
+function cookieParser(secret, options) {
+  return function cookieParser(req, res, next) {
+    if (req.cookies) {
+      return next();
+    }
+
+    var cookies = req.headers.cookie;
+    var secrets = !secret || Array.isArray(secret)
+      ? (secret || [])
+      : [secret];
+
+    req.secret = secrets[0];
+    req.cookies = Object.create(null);
+    req.signedCookies = Object.create(null);
+
+    // no cookies
+    if (!cookies) {
+      return next();
+    }
+
+    req.cookies = cookie.parse(cookies, options);
+
+    // parse signed cookies
+    if (secrets.length !== 0) {
+      req.signedCookies = signedCookies(req.cookies, secrets);
+      req.signedCookies = JSONCookies(req.signedCookies);
+    }
+
+    // parse JSON cookies
+    req.cookies = JSONCookies(req.cookies);
+
+    next();
+  };
+}
+
+/**
+ * Parse JSON cookie string.
+ *
+ * @param {String} str
+ * @return {Object} Parsed object or undefined if not json cookie
+ * @public
+ */
+
+function JSONCookie(str) {
+  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {
+    return undefined;
+  }
+
+  try {
+    return JSON.parse(str.slice(2));
+  } catch (err) {
+    return undefined;
+  }
+}
+
+/**
+ * Parse JSON cookies.
+ *
+ * @param {Object} obj
+ * @return {Object}
+ * @public
+ */
+
+function JSONCookies(obj) {
+  var cookies = Object.keys(obj);
+  var key;
+  var val;
+
+  for (var i = 0; i < cookies.length; i++) {
+    key = cookies[i];
+    val = JSONCookie(obj[key]);
+
+    if (val) {
+      obj[key] = val;
+    }
+  }
+
+  return obj;
+}
+
+/**
+ * Parse a signed cookie string, return the decoded value.
+ *
+ * @param {String} str signed cookie string
+ * @param {string|array} secret
+ * @return {String} decoded value
+ * @public
+ */
+
+function signedCookie(str, secret) {
+  if (typeof str !== 'string') {
+    return undefined;
+  }
+
+  if (str.substr(0, 2) !== 's:') {
+    return str;
+  }
+
+  var secrets = !secret || Array.isArray(secret)
+    ? (secret || [])
+    : [secret];
+
+  for (var i = 0; i < secrets.length; i++) {
+    var val = signature.unsign(str.slice(2), secrets[i]);
+
+    if (val !== false) {
+      return val;
+    }
+  }
+
+  return false;
+}
+
+/**
+ * Parse signed cookies, returning an object containing the decoded key/value
+ * pairs, while removing the signed key from obj.
+ *
+ * @param {Object} obj
+ * @param {string|array} secret
+ * @return {Object}
+ * @public
+ */
+
+function signedCookies(obj, secret) {
+  var cookies = Object.keys(obj);
+  var dec;
+  var key;
+  var ret = Object.create(null);
+  var val;
+
+  for (var i = 0; i < cookies.length; i++) {
+    key = cookies[i];
+    val = obj[key];
+    dec = signedCookie(val, secret);
+
+    if (val !== dec) {
+      ret[key] = dec;
+      delete obj[key];
+    }
+  }
+
+  return ret;
+}
diff --git a/register/npm/cookie-parser/1.4.3/package/package.json b/register/npm/cookie-parser/1.4.3/package/package.json
new file mode 100644
index 0000000..f8f8f3a
--- /dev/null
+++ b/register/npm/cookie-parser/1.4.3/package/package.json
@@ -0,0 +1 @@
+{"name":"cookie-parser","description":"cookie parsing with signatures","version":"1.4.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":"http://tjholowaychuk.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","repository":{"type":"git","url":"git://github.com/expressjs/cookie-parser"},"keywords":["cookie","middleware"],"dependencies":{"cookie":"0.3.1","cookie-signature":"1.0.6"},"devDependencies":{"istanbul":"0.4.3","mocha":"2.5.3","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"},"readme":"# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log('Cookies: ', req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/expressjs/cookie-parser/issues"},"homepage":"https://github.com/expressjs/cookie-parser","_id":"cookie-parser@1.4.3","_shasum":"0fe31fa19d000b95f4aadf1f53fdc2b8a203baa5","_from":"cookie-parser@","_resolved":"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.3.tgz"}
\ No newline at end of file
diff --git a/register/npm/cookie-signature/.cache.json b/register/npm/cookie-signature/.cache.json
new file mode 100644
index 0000000..9ac51c8
--- /dev/null
+++ b/register/npm/cookie-signature/.cache.json
@@ -0,0 +1 @@
+{"_id":"cookie-signature","_rev":"32-8e112db249e856389e5962f2a8633400","name":"cookie-signature","description":"Sign and unsign cookies","dist-tags":{"latest":"1.0.6"},"versions":{"0.0.1":{"name":"cookie-signature","version":"0.0.1","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","_id":"cookie-signature@0.0.1","dist":{"shasum":"13d3603b5cf63befbf85a8801e37aa900db46985","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-0.0.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.0":{"name":"cookie-signature","version":"1.0.0","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","_id":"cookie-signature@1.0.0","dist":{"shasum":"0044f332ac623df851c914e88eacc57f0c9704fe","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.1":{"name":"cookie-signature","version":"1.0.1","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","_id":"cookie-signature@1.0.1","dist":{"shasum":"44e072148af01e6e8e24afbf12690d68ae698ecb","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.2":{"name":"cookie-signature","version":"1.0.2","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.2","dist":{"shasum":"3d8ed55a70e4bcd474f699af0d03b5b652fe85ba","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.2.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.3":{"name":"cookie-signature","version":"1.0.3","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.3","dist":{"shasum":"91cd997cc51fb641595738c69cda020328f50ff9","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.3.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.4":{"name":"cookie-signature","version":"1.0.4","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.4","dist":{"shasum":"0edd22286e3a111b9a2a70db363e925e867f6aca","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.4.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"natevw","email":"natevw@yahoo.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"natevw","email":"natevw@yahoo.com"}],"directories":{}},"1.0.5":{"name":"cookie-signature","version":"1.0.5","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"main":"index","gitHead":"73ed69b511b3ef47555d71b4ed1deea9e5ed6e1f","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.5","scripts":{},"_shasum":"a122e3f1503eca0f5355795b0711bb2368d450f9","_from":".","_npmVersion":"1.4.20","_npmUser":{"name":"natevw","email":"natevw@yahoo.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"natevw","email":"natevw@yahoo.com"}],"dist":{"shasum":"a122e3f1503eca0f5355795b0711bb2368d450f9","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.5.tgz"},"directories":{}},"1.0.6":{"name":"cookie-signature","version":"1.0.6","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"scripts":{"test":"mocha --require should --reporter spec"},"main":"index","gitHead":"391b56cf44d88c493491b7e3fc53208cfb976d2a","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.6","_shasum":"e303a882b342cc3ee8ca513a79999734dab3ae2c","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"natevw","email":"natevw@yahoo.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"natevw","email":"natevw@yahoo.com"}],"dist":{"shasum":"e303a882b342cc3ee8ca513a79999734dab3ae2c","tarball":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz"},"directories":{}}},"readme":"\n# cookie-signature\n\n  Sign and unsign cookies.\n\n## Example\n\n```js\nvar cookie = require('cookie-signature');\n\nvar val = cookie.sign('hello', 'tobiiscool');\nval.should.equal('hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI');\n\nvar val = cookie.sign('hello', 'tobiiscool');\ncookie.unsign(val, 'tobiiscool').should.equal('hello');\ncookie.unsign(val, 'luna').should.be.false;\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"natevw","email":"natevw@yahoo.com"}],"time":{"modified":"2017-02-23T08:53:36.585Z","created":"2012-10-15T15:53:32.007Z","0.0.1":"2012-10-15T15:53:33.933Z","1.0.0":"2013-04-12T19:07:28.737Z","1.0.1":"2013-04-15T19:29:17.362Z","1.0.2":"2014-01-29T00:00:59.981Z","1.0.3":"2014-01-29T01:15:41.790Z","1.0.4":"2014-06-25T22:14:18.119Z","1.0.5":"2014-09-05T23:22:06.935Z","1.0.6":"2015-02-03T22:23:15.095Z"},"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"users":{"285858315":true,"haiyang5210":true,"dgarlitt":true,"simplyianm":true,"ivansky":true,"awangxh":true,"panlw":true,"qbylucky":true,"milfromoz":true,"nickeltobias":true,"giussa_dan":true,"yong_a":true},"repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"readmeFilename":"Readme.md","homepage":"https://github.com/visionmedia/node-cookie-signature","keywords":["cookie","sign","unsign"],"bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"license":"MIT","_attachments":{},"_etag":"W/\"58aea310-24db\""}
\ No newline at end of file
diff --git a/register/npm/cookie-signature/1.0.6/package.tgz b/register/npm/cookie-signature/1.0.6/package.tgz
new file mode 100644
index 0000000..3fe6426
Binary files /dev/null and b/register/npm/cookie-signature/1.0.6/package.tgz differ
diff --git a/register/npm/cookie-signature/1.0.6/package/.npmignore b/register/npm/cookie-signature/1.0.6/package/.npmignore
new file mode 100644
index 0000000..f1250e5
--- /dev/null
+++ b/register/npm/cookie-signature/1.0.6/package/.npmignore
@@ -0,0 +1,4 @@
+support
+test
+examples
+*.sock
diff --git a/register/npm/cookie-signature/1.0.6/package/History.md b/register/npm/cookie-signature/1.0.6/package/History.md
new file mode 100644
index 0000000..78513cc
--- /dev/null
+++ b/register/npm/cookie-signature/1.0.6/package/History.md
@@ -0,0 +1,38 @@
+1.0.6 / 2015-02-03
+==================
+
+* use `npm test` instead of `make test` to run tests
+* clearer assertion messages when checking input
+
+
+1.0.5 / 2014-09-05
+==================
+
+* add license to package.json
+
+1.0.4 / 2014-06-25
+==================
+
+ * corrected avoidance of timing attacks (thanks @tenbits!)
+
+1.0.3 / 2014-01-28
+==================
+
+ * [incorrect] fix for timing attacks
+
+1.0.2 / 2014-01-28
+==================
+
+ * fix missing repository warning
+ * fix typo in test
+
+1.0.1 / 2013-04-15
+==================
+
+  * Revert "Changed underlying HMAC algo. to sha512."
+  * Revert "Fix for timing attacks on MAC verification."
+
+0.0.1 / 2010-01-03
+==================
+
+  * Initial release
diff --git a/register/npm/cookie-signature/1.0.6/package/Readme.md b/register/npm/cookie-signature/1.0.6/package/Readme.md
new file mode 100644
index 0000000..2559e84
--- /dev/null
+++ b/register/npm/cookie-signature/1.0.6/package/Readme.md
@@ -0,0 +1,42 @@
+
+# cookie-signature
+
+  Sign and unsign cookies.
+
+## Example
+
+```js
+var cookie = require('cookie-signature');
+
+var val = cookie.sign('hello', 'tobiiscool');
+val.should.equal('hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI');
+
+var val = cookie.sign('hello', 'tobiiscool');
+cookie.unsign(val, 'tobiiscool').should.equal('hello');
+cookie.unsign(val, 'luna').should.be.false;
+```
+
+## License 
+
+(The MIT License)
+
+Copyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt;
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\ No newline at end of file
diff --git a/register/npm/cookie-signature/1.0.6/package/index.js b/register/npm/cookie-signature/1.0.6/package/index.js
new file mode 100644
index 0000000..b8c9463
--- /dev/null
+++ b/register/npm/cookie-signature/1.0.6/package/index.js
@@ -0,0 +1,51 @@
+/**
+ * Module dependencies.
+ */
+
+var crypto = require('crypto');
+
+/**
+ * Sign the given `val` with `secret`.
+ *
+ * @param {String} val
+ * @param {String} secret
+ * @return {String}
+ * @api private
+ */
+
+exports.sign = function(val, secret){
+  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
+  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
+  return val + '.' + crypto
+    .createHmac('sha256', secret)
+    .update(val)
+    .digest('base64')
+    .replace(/\=+$/, '');
+};
+
+/**
+ * Unsign and decode the given `val` with `secret`,
+ * returning `false` if the signature is invalid.
+ *
+ * @param {String} val
+ * @param {String} secret
+ * @return {String|Boolean}
+ * @api private
+ */
+
+exports.unsign = function(val, secret){
+  if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
+  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
+  var str = val.slice(0, val.lastIndexOf('.'))
+    , mac = exports.sign(str, secret);
+  
+  return sha1(mac) == sha1(val) ? str : false;
+};
+
+/**
+ * Private
+ */
+
+function sha1(str){
+  return crypto.createHash('sha1').update(str).digest('hex');
+}
diff --git a/register/npm/cookie-signature/1.0.6/package/package.json b/register/npm/cookie-signature/1.0.6/package/package.json
new file mode 100644
index 0000000..262f99b
--- /dev/null
+++ b/register/npm/cookie-signature/1.0.6/package/package.json
@@ -0,0 +1 @@
+{"name":"cookie-signature","version":"1.0.6","description":"Sign and unsign cookies","keywords":["cookie","sign","unsign"],"author":{"name":"TJ Holowaychuk","email":"tj@learnboost.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/visionmedia/node-cookie-signature.git"},"dependencies":{},"devDependencies":{"mocha":"*","should":"*"},"scripts":{"test":"mocha --require should --reporter spec"},"main":"index","readme":"\n# cookie-signature\n\n  Sign and unsign cookies.\n\n## Example\n\n```js\nvar cookie = require('cookie-signature');\n\nvar val = cookie.sign('hello', 'tobiiscool');\nval.should.equal('hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI');\n\nvar val = cookie.sign('hello', 'tobiiscool');\ncookie.unsign(val, 'tobiiscool').should.equal('hello');\ncookie.unsign(val, 'luna').should.be.false;\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/visionmedia/node-cookie-signature/issues"},"homepage":"https://github.com/visionmedia/node-cookie-signature","_id":"cookie-signature@1.0.6","_shasum":"e303a882b342cc3ee8ca513a79999734dab3ae2c","_from":"cookie-signature@1.0.6","_resolved":"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz"}
\ No newline at end of file
diff --git a/register/npm/cookie/.cache.json b/register/npm/cookie/.cache.json
new file mode 100644
index 0000000..2b47012
--- /dev/null
+++ b/register/npm/cookie/.cache.json
@@ -0,0 +1 @@
+{"_id":"cookie","_rev":"104-02b23dc376f075786d0db07f3b8217df","name":"cookie","description":"HTTP server cookie parsing and serialization","dist-tags":{"latest":"0.3.1"},"versions":{"0.0.0":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.0","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"_id":"cookie@0.0.0","_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"a134b9c981df85c8a67b1620be5a36c0db1bdc63","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.0.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.1":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.1","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"_id":"cookie@0.0.1","_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"3162dd34ea833740e2e0d6e7129f2dcd55dcf7ed","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.1.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.2":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.2","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"_id":"cookie@0.0.2","_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"17aedf62bc6af53745fecb55c45c3f097c2e858b","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.2.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.3":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.3","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"_id":"cookie@0.0.3","_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"732b0e64cb77186954f5e36b0b6bcfd062a12e91","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.3.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.4":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.4","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"_id":"cookie@0.0.4","_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.20-pre","_defaultsLoaded":true,"dist":{"shasum":"5456bd47aee2666eac976ea80a6105940483fe98","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.4.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.5":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.5","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_id":"cookie@0.0.5","dist":{"shasum":"f9acf9db57eb7568c9fcc596256b7bb22e307c81","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.0.6":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.0.6","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_id":"cookie@0.0.6","dist":{"shasum":"7bc6bb50205dcb98cf13ad09d6c60bc523f6fcb7","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.0.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.1.0":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.1.0","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"_id":"cookie@0.1.0","dist":{"shasum":"90eb469ddce905c866de687efc43131d8801f9d0","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.1.1":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.1.1","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"bugs":{"url":"https://github.com/shtylman/node-cookie/issues"},"homepage":"https://github.com/shtylman/node-cookie","_id":"cookie@0.1.1","dist":{"shasum":"cbd4b537aa65f800b6c66ead2520ba8d6afbdf54","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.1.2":{"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"name":"cookie","description":"cookie parsing and serialization","version":"0.1.2","repository":{"type":"git","url":"git://github.com/shtylman/node-cookie.git"},"keywords":["cookie","cookies"],"main":"index.js","scripts":{"test":"mocha"},"dependencies":{},"devDependencies":{"mocha":"1.x.x"},"optionalDependencies":{},"engines":{"node":"*"},"bugs":{"url":"https://github.com/shtylman/node-cookie/issues"},"homepage":"https://github.com/shtylman/node-cookie","_id":"cookie@0.1.2","dist":{"shasum":"72fec3d24e48a3432073d90c12642005061004b1","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.2.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"shtylman","email":"shtylman@gmail.com"},"maintainers":[{"name":"shtylman","email":"shtylman@gmail.com"}],"directories":{}},"0.1.3":{"name":"cookie","description":"cookie parsing and serialization","version":"0.1.3","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.9","mocha":"1.x.x"},"files":["LICENSE","README.md","index.js"],"engines":{"node":"*"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"f46097723c16f920a7b9759e154c34792e1d1a3b","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.1.3","_shasum":"e734a5c1417fce472d5aef82c381cabb64d1a435","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"e734a5c1417fce472d5aef82c381cabb64d1a435","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.3.tgz"},"directories":{}},"0.2.0":{"name":"cookie","description":"cookie parsing and serialization","version":"0.2.0","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.17","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"e0d36be803099855dfa323de092eed97bec155bd","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.2.0","_shasum":"9708beeaa361857de7d16516fea779572625caad","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"9708beeaa361857de7d16516fea779572625caad","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.2.0.tgz"},"directories":{}},"0.1.4":{"name":"cookie","description":"cookie parsing and serialization","version":"0.1.4","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.20","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"337c0f1be395c1b62b8cae4306a745012c62a989","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.1.4","_shasum":"4955c0bd32fffa83b7433586185875876ea04e4b","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"4955c0bd32fffa83b7433586185875876ea04e4b","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.4.tgz"},"directories":{}},"0.2.1":{"name":"cookie","description":"cookie parsing and serialization","version":"0.2.1","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.20","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"f3b5262b23b8eb64c9cbebc6f6271894889b14b1","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.2.1","_shasum":"e1bc7c07d1985c17ad7347502bac1a0eb072ac9a","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"e1bc7c07d1985c17ad7347502bac1a0eb072ac9a","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.2.1.tgz"},"directories":{}},"0.1.5":{"name":"cookie","description":"cookie parsing and serialization","version":"0.1.5","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.20","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"0dfc4876575cef2609cdc1082fccf832743822c2","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.1.5","_shasum":"6ab9948a4b1ae21952cd2588530a4722d4044d7c","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"6ab9948a4b1ae21952cd2588530a4722d4044d7c","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.1.5.tgz"},"directories":{}},"0.2.2":{"name":"cookie","description":"cookie parsing and serialization","version":"0.2.2","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.20","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"9b481be547730c5f487364b720ab298d097541d5","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.2.2","_shasum":"579ef8bc9b2d6f7e975a16bf4164d572e752e540","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"579ef8bc9b2d6f7e975a16bf4164d572e752e540","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.2.2.tgz"},"directories":{}},"0.2.3":{"name":"cookie","description":"cookie parsing and serialization","version":"0.2.3","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.3.22","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"35326af88e9665bb8ea1be280cb827523e9360a7","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.2.3","_shasum":"1a59536af68537a21178a01346f87cb059d2ae5c","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"defunctzombie","email":"shtylman@gmail.com"},{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"jongleberry","email":"jonathanrichardong@gmail.com"}],"dist":{"shasum":"1a59536af68537a21178a01346f87cb059d2ae5c","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.2.3.tgz"},"directories":{}},"0.2.4":{"name":"cookie","description":"cookie parsing and serialization","version":"0.2.4","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.4.3","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"0c6fe48e2976d66ed73c03817bb5cb10180b50ee","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.2.4","_shasum":"a8c155aa7b9b2cf2c4d32ebc7b9a0aa288ccc6bd","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"a8c155aa7b9b2cf2c4d32ebc7b9a0aa288ccc6bd","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.2.4.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cookie-0.2.4.tgz_1463790764235_0.7945549874566495"},"directories":{}},"0.3.0":{"name":"cookie","description":"HTTP server cookie parsing and serialization","version":"0.3.0","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.4.3","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"91b733fbe29ae6fcfa305f8e8ff31a1c2e651feb","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.3.0","_shasum":"a4bdd609d86748a5ce6c64d7ede6f4840ba434d8","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"a4bdd609d86748a5ce6c64d7ede6f4840ba434d8","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.3.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cookie-0.3.0.tgz_1464310839393_0.722841773647815"},"directories":{}},"0.3.1":{"name":"cookie","description":"HTTP server cookie parsing and serialization","version":"0.3.1","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.4.3","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"e3c77d497d66c8b8d4b677b8954c1b192a09f0b3","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.3.1","_shasum":"e7e0a1f9ef43b4c8ba925c5c5a96e806d16873bb","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"dist":{"shasum":"e7e0a1f9ef43b4c8ba925c5c5a96e806d16873bb","tarball":"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cookie-0.3.1.tgz_1464323556714_0.6435900838114321"},"directories":{}}},"readme":"# cookie\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nBasic HTTP cookie parser and serializer for HTTP servers.\n\n## Installation\n\n```sh\n$ npm install cookie\n```\n\n## API\n\n```js\nvar cookie = require('cookie');\n```\n\n### cookie.parse(str, options)\n\nParse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.\nThe `str` argument is the string representing a `Cookie` header value and `options` is an\noptional object containing additional parsing options.\n\n```js\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\n// { foo: 'bar', equation: 'E=mc^2' }\n```\n\n#### Options\n\n`cookie.parse` accepts these properties in the options object.\n\n##### decode\n\nSpecifies a function that will be used to decode a cookie's value. Since the value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to decode\na previously-encoded cookie value into a JavaScript string or other object.\n\nThe default function is the global `decodeURIComponent`, which will decode any URL-encoded\nsequences into their byte representations.\n\n**note** if an error is thrown from this function, the original, non-decoded cookie value will\nbe returned as the cookie's value.\n\n### cookie.serialize(name, value, options)\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the\nname for the cookie, the `value` argument is the value to set the cookie to, and the `options`\nargument is an optional object containing additional serialization options.\n\n```js\nvar setCookie = cookie.serialize('foo', 'bar');\n// foo=bar\n```\n\n#### Options\n\n`cookie.serialize` accepts these properties in the options object.\n\n##### domain\n\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6266-5.2.3]. By default, no\ndomain is set, and most clients will consider the cookie to apply to only the current domain.\n\n##### encode\n\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to encode\na value into a string suited for a cookie's value.\n\nThe default function is the global `ecodeURIComponent`, which will encode a JavaScript string\ninto UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\n\n##### expires\n\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6266-5.2.1].\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and\nwill delete it on a condition like exiting a web browser application.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### httpOnly\n\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6266-5.2.6]. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not allow client-side\nJavaScript to see the cookie in `document.cookie`.\n\n##### maxAge\n\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6266-5.2.2].\nThe given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### path\n\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6266-5.2.4]. By default, the path\nis considered the [\"default path\"][rfc-6266-5.1.4]. By default, no maximum age is set, and most\nclients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting\na web browser application.\n\n##### sameSite\n\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][draft-west-first-party-cookies-07].\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\n\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### secure\n\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6266-5.2.5]. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to\nthe server in the future if the browser does not have an HTTPS connection.\n\n## Example\n\nThe following example uses this module in conjunction with the Node.js core HTTP server\nto prompt a user for their name and display it back on future visits.\n\n```js\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## References\n\n- [RFC 6266: HTTP State Management Mechanism][rfc-6266]\n- [Same-site Cookies][draft-west-first-party-cookies-07]\n\n[draft-west-first-party-cookies-07]: https://tools.ietf.org/html/draft-west-first-party-cookies-07\n[rfc-6266]: https://tools.ietf.org/html/rfc6266\n[rfc-6266-5.1.4]: https://tools.ietf.org/html/rfc6266#section-5.1.4\n[rfc-6266-5.2.1]: https://tools.ietf.org/html/rfc6266#section-5.2.1\n[rfc-6266-5.2.2]: https://tools.ietf.org/html/rfc6266#section-5.2.2\n[rfc-6266-5.2.3]: https://tools.ietf.org/html/rfc6266#section-5.2.3\n[rfc-6266-5.2.4]: https://tools.ietf.org/html/rfc6266#section-5.2.4\n[rfc-6266-5.3]: https://tools.ietf.org/html/rfc6266#section-5.3\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie.svg\n[npm-url]: https://npmjs.org/package/cookie\n[node-version-image]: https://img.shields.io/node/v/cookie.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/jshttp/cookie/master.svg\n[travis-url]: https://travis-ci.org/jshttp/cookie\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/cookie/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie.svg\n[downloads-url]: https://npmjs.org/package/cookie\n","maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"time":{"modified":"2017-06-01T09:35:55.668Z","created":"2012-05-28T23:56:11.938Z","0.0.0":"2012-05-28T23:56:12.299Z","0.0.1":"2012-05-29T02:15:56.897Z","0.0.2":"2012-06-01T17:57:58.161Z","0.0.3":"2012-06-06T18:50:00.041Z","0.0.4":"2012-06-21T16:27:06.621Z","0.0.5":"2012-10-29T17:26:30.049Z","0.0.6":"2013-04-09T05:59:56.056Z","0.1.0":"2013-05-01T19:18:22.075Z","0.1.1":"2014-02-23T15:56:33.086Z","0.1.2":"2014-04-16T23:00:21.566Z","0.1.3":"2015-05-20T01:22:20.719Z","0.2.0":"2015-08-14T05:15:35.455Z","0.1.4":"2015-09-17T17:03:42.289Z","0.2.1":"2015-09-17T17:08:41.911Z","0.1.5":"2015-09-17T18:52:10.481Z","0.2.2":"2015-09-17T20:40:15.826Z","0.2.3":"2015-10-26T01:02:06.233Z","0.2.4":"2016-05-21T00:32:45.246Z","0.3.0":"2016-05-27T01:00:41.646Z","0.3.1":"2016-05-27T04:32:39.156Z"},"author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"repository":{"type":"git","url":"https://github.com/jshttp/cookie"},"users":{"285858315":true,"fgribreau":true,"m42am":true,"rhedenk":true,"substack":true,"grncdr":true,"masanorinyo":true,"qiuzuhui":true,"shen-weizhong":true,"dexteryy":true,"dofy":true,"dgarlitt":true,"priyaranjan":true,"roryrjb":true,"x_soth":true,"vboctor":true,"koulmomo":true,"goodseller":true,"simplyianm":true,"trotyl":true,"akiva":true,"dac2205":true,"flyslow":true,"markthethomas":true,"nickeljew":true,"ovuncozturk":true,"kungkk":true,"awzm":true,"antanst":true,"intuitivcloud":true,"panlw":true,"wut":true,"justinliao":true,"qbylucky":true,"milfromoz":true,"demod":true,"oikewll":true,"qinyifeng":true,"princetoad":true,"danielsunami":true,"wkaifang":true,"eliasbf":true,"antixrist":true,"hongbo-miao":true,"abuelwafa":true,"wenbing":true,"tedyhy":true,"mhaidarh":true,"zuizuihao":true,"monjer":true,"zoluzo":true,"giussa_dan":true,"ilex.h":true,"waidd":true,"xiaoqiang.yang":true,"bphanikumar":true,"wayn":true},"readmeFilename":"README.md","homepage":"https://github.com/jshttp/cookie","keywords":["cookie","cookies"],"bugs":{"url":"https://github.com/jshttp/cookie/issues"},"license":"MIT","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"_attachments":{},"_etag":"W/\"592fdffb-80e1\""}
\ No newline at end of file
diff --git a/register/npm/cookie/0.3.1/package.tgz b/register/npm/cookie/0.3.1/package.tgz
new file mode 100644
index 0000000..a28ea24
Binary files /dev/null and b/register/npm/cookie/0.3.1/package.tgz differ
diff --git a/register/npm/cookie/0.3.1/package/HISTORY.md b/register/npm/cookie/0.3.1/package/HISTORY.md
new file mode 100644
index 0000000..5bd6485
--- /dev/null
+++ b/register/npm/cookie/0.3.1/package/HISTORY.md
@@ -0,0 +1,118 @@
+0.3.1 / 2016-05-26
+==================
+
+  * Fix `sameSite: true` to work with draft-7 clients
+    - `true` now sends `SameSite=Strict` instead of `SameSite`
+
+0.3.0 / 2016-05-26
+==================
+
+  * Add `sameSite` option
+    - Replaces `firstPartyOnly` option, never implemented by browsers
+  * Improve error message when `encode` is not a function
+  * Improve error message when `expires` is not a `Date`
+
+0.2.4 / 2016-05-20
+==================
+
+  * perf: enable strict mode
+  * perf: use for loop in parse
+  * perf: use string concatination for serialization
+
+0.2.3 / 2015-10-25
+==================
+
+  * Fix cookie `Max-Age` to never be a floating point number
+
+0.2.2 / 2015-09-17
+==================
+
+  * Fix regression when setting empty cookie value
+    - Ease the new restriction, which is just basic header-level validation
+  * Fix typo in invalid value errors
+
+0.2.1 / 2015-09-17
+==================
+
+  * Throw on invalid values provided to `serialize`
+    - Ensures the resulting string is a valid HTTP header value
+
+0.2.0 / 2015-08-13
+==================
+
+  * Add `firstPartyOnly` option
+  * Throw better error for invalid argument to parse
+  * perf: hoist regular expression
+
+0.1.5 / 2015-09-17
+==================
+
+  * Fix regression when setting empty cookie value
+    - Ease the new restriction, which is just basic header-level validation
+  * Fix typo in invalid value errors
+
+0.1.4 / 2015-09-17
+==================
+
+  * Throw better error for invalid argument to parse
+  * Throw on invalid values provided to `serialize`
+    - Ensures the resulting string is a valid HTTP header value
+
+0.1.3 / 2015-05-19
+==================
+
+  * Reduce the scope of try-catch deopt
+  * Remove argument reassignments
+
+0.1.2 / 2014-04-16
+==================
+
+  * Remove unnecessary files from npm package
+
+0.1.1 / 2014-02-23
+==================
+
+  * Fix bad parse when cookie value contained a comma
+  * Fix support for `maxAge` of `0`
+
+0.1.0 / 2013-05-01
+==================
+
+  * Add `decode` option
+  * Add `encode` option
+
+0.0.6 / 2013-04-08
+==================
+
+  * Ignore cookie parts missing `=`
+
+0.0.5 / 2012-10-29
+==================
+
+  * Return raw cookie value if value unescape errors
+
+0.0.4 / 2012-06-21
+==================
+
+  * Use encode/decodeURIComponent for cookie encoding/decoding
+    - Improve server/client interoperability
+
+0.0.3 / 2012-06-06
+==================
+
+  * Only escape special characters per the cookie RFC
+
+0.0.2 / 2012-06-01
+==================
+
+  * Fix `maxAge` option to not throw error
+
+0.0.1 / 2012-05-28
+==================
+
+  * Add more tests
+
+0.0.0 / 2012-05-28
+==================
+
+  * Initial release
diff --git a/register/npm/cookie/0.3.1/package/LICENSE b/register/npm/cookie/0.3.1/package/LICENSE
new file mode 100644
index 0000000..058b6b4
--- /dev/null
+++ b/register/npm/cookie/0.3.1/package/LICENSE
@@ -0,0 +1,24 @@
+(The MIT License)
+
+Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>
+Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+'Software'), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
diff --git a/register/npm/cookie/0.3.1/package/README.md b/register/npm/cookie/0.3.1/package/README.md
new file mode 100644
index 0000000..db0d078
--- /dev/null
+++ b/register/npm/cookie/0.3.1/package/README.md
@@ -0,0 +1,220 @@
+# cookie
+
+[![NPM Version][npm-image]][npm-url]
+[![NPM Downloads][downloads-image]][downloads-url]
+[![Node.js Version][node-version-image]][node-version-url]
+[![Build Status][travis-image]][travis-url]
+[![Test Coverage][coveralls-image]][coveralls-url]
+
+Basic HTTP cookie parser and serializer for HTTP servers.
+
+## Installation
+
+```sh
+$ npm install cookie
+```
+
+## API
+
+```js
+var cookie = require('cookie');
+```
+
+### cookie.parse(str, options)
+
+Parse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.
+The `str` argument is the string representing a `Cookie` header value and `options` is an
+optional object containing additional parsing options.
+
+```js
+var cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');
+// { foo: 'bar', equation: 'E=mc^2' }
+```
+
+#### Options
+
+`cookie.parse` accepts these properties in the options object.
+
+##### decode
+
+Specifies a function that will be used to decode a cookie's value. Since the value of a cookie
+has a limited character set (and must be a simple string), this function can be used to decode
+a previously-encoded cookie value into a JavaScript string or other object.
+
+The default function is the global `decodeURIComponent`, which will decode any URL-encoded
+sequences into their byte representations.
+
+**note** if an error is thrown from this function, the original, non-decoded cookie value will
+be returned as the cookie's value.
+
+### cookie.serialize(name, value, options)
+
+Serialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the
+name for the cookie, the `value` argument is the value to set the cookie to, and the `options`
+argument is an optional object containing additional serialization options.
+
+```js
+var setCookie = cookie.serialize('foo', 'bar');
+// foo=bar
+```
+
+#### Options
+
+`cookie.serialize` accepts these properties in the options object.
+
+##### domain
+
+Specifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6266-5.2.3]. By default, no
+domain is set, and most clients will consider the cookie to apply to only the current domain.
+
+##### encode
+
+Specifies a function that will be used to encode a cookie's value. Since value of a cookie
+has a limited character set (and must be a simple string), this function can be used to encode
+a value into a string suited for a cookie's value.
+
+The default function is the global `ecodeURIComponent`, which will encode a JavaScript string
+into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.
+
+##### expires
+
+Specifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6266-5.2.1].
+By default, no expiration is set, and most clients will consider this a "non-persistent cookie" and
+will delete it on a condition like exiting a web browser application.
+
+**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and
+`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,
+so if both are set, they should point to the same date and time.
+
+##### httpOnly
+
+Specifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6266-5.2.6]. When truthy,
+the `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.
+
+**note** be careful when setting this to `true`, as compliant clients will not allow client-side
+JavaScript to see the cookie in `document.cookie`.
+
+##### maxAge
+
+Specifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6266-5.2.2].
+The given number will be converted to an integer by rounding down. By default, no maximum age is set.
+
+**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and
+`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,
+so if both are set, they should point to the same date and time.
+
+##### path
+
+Specifies the value for the [`Path` `Set-Cookie` attribute][rfc-6266-5.2.4]. By default, the path
+is considered the ["default path"][rfc-6266-5.1.4]. By default, no maximum age is set, and most
+clients will consider this a "non-persistent cookie" and will delete it on a condition like exiting
+a web browser application.
+
+##### sameSite
+
+Specifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][draft-west-first-party-cookies-07].
+
+  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
+  - `false` will not set the `SameSite` attribute.
+  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.
+  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
+
+More information about the different enforcement levels can be found in the specification
+https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1
+
+**note** This is an attribute that has not yet been fully standardized, and may change in the future.
+This also means many clients may ignore this attribute until they understand it.
+
+##### secure
+
+Specifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6266-5.2.5]. When truthy,
+the `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.
+
+**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to
+the server in the future if the browser does not have an HTTPS connection.
+
+## Example
+
+The following example uses this module in conjunction with the Node.js core HTTP server
+to prompt a user for their name and display it back on future visits.
+
+```js
+var cookie = require('cookie');
+var escapeHtml = require('escape-html');
+var http = require('http');
+var url = require('url');
+
+function onRequest(req, res) {
+  // Parse the query string
+  var query = url.parse(req.url, true, true).query;
+
+  if (query && query.name) {
+    // Set a new cookie with the name
+    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {
+      httpOnly: true,
+      maxAge: 60 * 60 * 24 * 7 // 1 week
+    }));
+
+    // Redirect back after setting cookie
+    res.statusCode = 302;
+    res.setHeader('Location', req.headers.referer || '/');
+    res.end();
+    return;
+  }
+
+  // Parse the cookies on the request
+  var cookies = cookie.parse(req.headers.cookie || '');
+
+  // Get the visitor name set in the cookie
+  var name = cookies.name;
+
+  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
+
+  if (name) {
+    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');
+  } else {
+    res.write('<p>Hello, new visitor!</p>');
+  }
+
+  res.write('<form method="GET">');
+  res.write('<input placeholder="enter your name" name="name"> <input type="submit" value="Set Name">');
+  res.end('</form');
+}
+
+http.createServer(onRequest).listen(3000);
+```
+
+## Testing
+
+```sh
+$ npm test
+```
+
+## References
+
+- [RFC 6266: HTTP State Management Mechanism][rfc-6266]
+- [Same-site Cookies][draft-west-first-party-cookies-07]
+
+[draft-west-first-party-cookies-07]: https://tools.ietf.org/html/draft-west-first-party-cookies-07
+[rfc-6266]: https://tools.ietf.org/html/rfc6266
+[rfc-6266-5.1.4]: https://tools.ietf.org/html/rfc6266#section-5.1.4
+[rfc-6266-5.2.1]: https://tools.ietf.org/html/rfc6266#section-5.2.1
+[rfc-6266-5.2.2]: https://tools.ietf.org/html/rfc6266#section-5.2.2
+[rfc-6266-5.2.3]: https://tools.ietf.org/html/rfc6266#section-5.2.3
+[rfc-6266-5.2.4]: https://tools.ietf.org/html/rfc6266#section-5.2.4
+[rfc-6266-5.3]: https://tools.ietf.org/html/rfc6266#section-5.3
+
+## License
+
+[MIT](LICENSE)
+
+[npm-image]: https://img.shields.io/npm/v/cookie.svg
+[npm-url]: https://npmjs.org/package/cookie
+[node-version-image]: https://img.shields.io/node/v/cookie.svg
+[node-version-url]: https://nodejs.org/en/download
+[travis-image]: https://img.shields.io/travis/jshttp/cookie/master.svg
+[travis-url]: https://travis-ci.org/jshttp/cookie
+[coveralls-image]: https://img.shields.io/coveralls/jshttp/cookie/master.svg
+[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master
+[downloads-image]: https://img.shields.io/npm/dm/cookie.svg
+[downloads-url]: https://npmjs.org/package/cookie
diff --git a/register/npm/cookie/0.3.1/package/index.js b/register/npm/cookie/0.3.1/package/index.js
new file mode 100644
index 0000000..ab2e467
--- /dev/null
+++ b/register/npm/cookie/0.3.1/package/index.js
@@ -0,0 +1,195 @@
+/*!
+ * cookie
+ * Copyright(c) 2012-2014 Roman Shtylman
+ * Copyright(c) 2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * Module exports.
+ * @public
+ */
+
+exports.parse = parse;
+exports.serialize = serialize;
+
+/**
+ * Module variables.
+ * @private
+ */
+
+var decode = decodeURIComponent;
+var encode = encodeURIComponent;
+var pairSplitRegExp = /; */;
+
+/**
+ * RegExp to match field-content in RFC 7230 sec 3.2
+ *
+ * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
+ * field-vchar   = VCHAR / obs-text
+ * obs-text      = %x80-FF
+ */
+
+var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
+
+/**
+ * Parse a cookie header.
+ *
+ * Parse the given cookie header string into an object
+ * The object has the various cookies as keys(names) => values
+ *
+ * @param {string} str
+ * @param {object} [options]
+ * @return {object}
+ * @public
+ */
+
+function parse(str, options) {
+  if (typeof str !== 'string') {
+    throw new TypeError('argument str must be a string');
+  }
+
+  var obj = {}
+  var opt = options || {};
+  var pairs = str.split(pairSplitRegExp);
+  var dec = opt.decode || decode;
+
+  for (var i = 0; i < pairs.length; i++) {
+    var pair = pairs[i];
+    var eq_idx = pair.indexOf('=');
+
+    // skip things that don't look like key=value
+    if (eq_idx < 0) {
+      continue;
+    }
+
+    var key = pair.substr(0, eq_idx).trim()
+    var val = pair.substr(++eq_idx, pair.length).trim();
+
+    // quoted values
+    if ('"' == val[0]) {
+      val = val.slice(1, -1);
+    }
+
+    // only assign once
+    if (undefined == obj[key]) {
+      obj[key] = tryDecode(val, dec);
+    }
+  }
+
+  return obj;
+}
+
+/**
+ * Serialize data into a cookie header.
+ *
+ * Serialize the a name value pair into a cookie string suitable for
+ * http headers. An optional options object specified cookie parameters.
+ *
+ * serialize('foo', 'bar', { httpOnly: true })
+ *   => "foo=bar; httpOnly"
+ *
+ * @param {string} name
+ * @param {string} val
+ * @param {object} [options]
+ * @return {string}
+ * @public
+ */
+
+function serialize(name, val, options) {
+  var opt = options || {};
+  var enc = opt.encode || encode;
+
+  if (typeof enc !== 'function') {
+    throw new TypeError('option encode is invalid');
+  }
+
+  if (!fieldContentRegExp.test(name)) {
+    throw new TypeError('argument name is invalid');
+  }
+
+  var value = enc(val);
+
+  if (value && !fieldContentRegExp.test(value)) {
+    throw new TypeError('argument val is invalid');
+  }
+
+  var str = name + '=' + value;
+
+  if (null != opt.maxAge) {
+    var maxAge = opt.maxAge - 0;
+    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
+    str += '; Max-Age=' + Math.floor(maxAge);
+  }
+
+  if (opt.domain) {
+    if (!fieldContentRegExp.test(opt.domain)) {
+      throw new TypeError('option domain is invalid');
+    }
+
+    str += '; Domain=' + opt.domain;
+  }
+
+  if (opt.path) {
+    if (!fieldContentRegExp.test(opt.path)) {
+      throw new TypeError('option path is invalid');
+    }
+
+    str += '; Path=' + opt.path;
+  }
+
+  if (opt.expires) {
+    if (typeof opt.expires.toUTCString !== 'function') {
+      throw new TypeError('option expires is invalid');
+    }
+
+    str += '; Expires=' + opt.expires.toUTCString();
+  }
+
+  if (opt.httpOnly) {
+    str += '; HttpOnly';
+  }
+
+  if (opt.secure) {
+    str += '; Secure';
+  }
+
+  if (opt.sameSite) {
+    var sameSite = typeof opt.sameSite === 'string'
+      ? opt.sameSite.toLowerCase() : opt.sameSite;
+
+    switch (sameSite) {
+      case true:
+        str += '; SameSite=Strict';
+        break;
+      case 'lax':
+        str += '; SameSite=Lax';
+        break;
+      case 'strict':
+        str += '; SameSite=Strict';
+        break;
+      default:
+        throw new TypeError('option sameSite is invalid');
+    }
+  }
+
+  return str;
+}
+
+/**
+ * Try decoding a string using a decoding function.
+ *
+ * @param {string} str
+ * @param {function} decode
+ * @private
+ */
+
+function tryDecode(str, decode) {
+  try {
+    return decode(str);
+  } catch (e) {
+    return str;
+  }
+}
diff --git a/register/npm/cookie/0.3.1/package/package.json b/register/npm/cookie/0.3.1/package/package.json
new file mode 100644
index 0000000..fe0d110
--- /dev/null
+++ b/register/npm/cookie/0.3.1/package/package.json
@@ -0,0 +1 @@
+{"name":"cookie","description":"HTTP server cookie parsing and serialization","version":"0.3.1","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"license":"MIT","keywords":["cookie","cookies"],"repository":{"type":"git","url":"git://github.com/jshttp/cookie"},"devDependencies":{"istanbul":"0.4.3","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"readme":"# cookie\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nBasic HTTP cookie parser and serializer for HTTP servers.\n\n## Installation\n\n```sh\n$ npm install cookie\n```\n\n## API\n\n```js\nvar cookie = require('cookie');\n```\n\n### cookie.parse(str, options)\n\nParse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.\nThe `str` argument is the string representing a `Cookie` header value and `options` is an\noptional object containing additional parsing options.\n\n```js\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\n// { foo: 'bar', equation: 'E=mc^2' }\n```\n\n#### Options\n\n`cookie.parse` accepts these properties in the options object.\n\n##### decode\n\nSpecifies a function that will be used to decode a cookie's value. Since the value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to decode\na previously-encoded cookie value into a JavaScript string or other object.\n\nThe default function is the global `decodeURIComponent`, which will decode any URL-encoded\nsequences into their byte representations.\n\n**note** if an error is thrown from this function, the original, non-decoded cookie value will\nbe returned as the cookie's value.\n\n### cookie.serialize(name, value, options)\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the\nname for the cookie, the `value` argument is the value to set the cookie to, and the `options`\nargument is an optional object containing additional serialization options.\n\n```js\nvar setCookie = cookie.serialize('foo', 'bar');\n// foo=bar\n```\n\n#### Options\n\n`cookie.serialize` accepts these properties in the options object.\n\n##### domain\n\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6266-5.2.3]. By default, no\ndomain is set, and most clients will consider the cookie to apply to only the current domain.\n\n##### encode\n\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to encode\na value into a string suited for a cookie's value.\n\nThe default function is the global `ecodeURIComponent`, which will encode a JavaScript string\ninto UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\n\n##### expires\n\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6266-5.2.1].\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and\nwill delete it on a condition like exiting a web browser application.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### httpOnly\n\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6266-5.2.6]. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not allow client-side\nJavaScript to see the cookie in `document.cookie`.\n\n##### maxAge\n\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6266-5.2.2].\nThe given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### path\n\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6266-5.2.4]. By default, the path\nis considered the [\"default path\"][rfc-6266-5.1.4]. By default, no maximum age is set, and most\nclients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting\na web browser application.\n\n##### sameSite\n\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][draft-west-first-party-cookies-07].\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\n\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### secure\n\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6266-5.2.5]. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to\nthe server in the future if the browser does not have an HTTPS connection.\n\n## Example\n\nThe following example uses this module in conjunction with the Node.js core HTTP server\nto prompt a user for their name and display it back on future visits.\n\n```js\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## References\n\n- [RFC 6266: HTTP State Management Mechanism][rfc-6266]\n- [Same-site Cookies][draft-west-first-party-cookies-07]\n\n[draft-west-first-party-cookies-07]: https://tools.ietf.org/html/draft-west-first-party-cookies-07\n[rfc-6266]: https://tools.ietf.org/html/rfc6266\n[rfc-6266-5.1.4]: https://tools.ietf.org/html/rfc6266#section-5.1.4\n[rfc-6266-5.2.1]: https://tools.ietf.org/html/rfc6266#section-5.2.1\n[rfc-6266-5.2.2]: https://tools.ietf.org/html/rfc6266#section-5.2.2\n[rfc-6266-5.2.3]: https://tools.ietf.org/html/rfc6266#section-5.2.3\n[rfc-6266-5.2.4]: https://tools.ietf.org/html/rfc6266#section-5.2.4\n[rfc-6266-5.3]: https://tools.ietf.org/html/rfc6266#section-5.3\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie.svg\n[npm-url]: https://npmjs.org/package/cookie\n[node-version-image]: https://img.shields.io/node/v/cookie.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/jshttp/cookie/master.svg\n[travis-url]: https://travis-ci.org/jshttp/cookie\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/cookie/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie.svg\n[downloads-url]: https://npmjs.org/package/cookie\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jshttp/cookie/issues"},"homepage":"https://github.com/jshttp/cookie","_id":"cookie@0.3.1","_shasum":"e7e0a1f9ef43b4c8ba925c5c5a96e806d16873bb","_from":"cookie@0.3.1","_resolved":"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz"}
\ No newline at end of file
diff --git a/register/npm/ejs/.cache.json b/register/npm/ejs/.cache.json
new file mode 100644
index 0000000..01a5f64
--- /dev/null
+++ b/register/npm/ejs/.cache.json
@@ -0,0 +1 @@
+{"_id":"ejs","_rev":"370-dca85a126cc1483932aae9536fa9ddc5","name":"ejs","description":"Embedded JavaScript templates","dist-tags":{"latest":"2.5.6"},"versions":{"0.0.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.0.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.0.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.0.1.tgz","shasum":"f008cfdc5035e3d592f082c35eec08f4ddb99f83"},"directories":{}},"0.0.2":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.0.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.0.2.tgz","shasum":"c42742c8b07f239adb5136957f6acedbc18f07cc"},"directories":{}},"0.0.3":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.0.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.0.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.0.3.tgz","shasum":"ecc6bf3664670eed18b4098cc94a22a4a8b6fbbc"},"directories":{}},"0.0.4":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.0.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.0.4","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.0.4.tgz","shasum":"1582c30cca3b936c539516c9c7bfd59ad8d8a27b"},"directories":{}},"0.1.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.1.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.1.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.1.0.tgz","shasum":"5552ac77e55daa86e9633aa0089f7c2363ced64a"},"directories":{}},"0.2.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.2.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine"],"main":"./lib/ejs","_id":"ejs@0.2.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.2.0.tgz","shasum":"59123537a4bafbb0e60e6e8f090b0218de399eca"},"directories":{}},"0.2.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.2.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs","_id":"ejs@0.2.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/ejs/-/ejs-0.2.1.tgz","shasum":"10d9ac1859d98921d4e0a72439e72843cb4d9a17"},"directories":{}},"0.3.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.3.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs","_id":"ejs@0.3.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.16","_nodeVersion":"v0.2.6","directories":{"lib":"./lib"},"modules":{"ejs/filters.js":"lib/ejs/filters.js","ejs/index.js":"lib/ejs/index.js","ejs/utils.js":"lib/ejs/utils.js"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"d7b8866751f730608b1afcc6f408c3d82483310c","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.3.0.tgz"}},"0.3.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.3.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs","_id":"ejs@0.3.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.1","directories":{"lib":"./lib"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"14efd50a58d0aa24e3626ea674ae123f5d36f94a","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.3.1.tgz"}},"0.4.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.4.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs.js","_id":"ejs@0.4.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{"lib":"./lib"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a4a188aee997acd76bab120e5500221d6bfc513f","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.4.0.tgz"}},"0.4.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.4.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs.js","_id":"ejs@0.4.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{"lib":"./lib"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"d7ec956ca91649b508a1a74dafe990cfaf387409","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.4.1.tgz"}},"0.4.2":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.4.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs.js","dependencies":{},"devDependencies":{},"_id":"ejs@0.4.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"6f58faa54fd0fd097b74e31c4009ec16138572a1","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.4.2.tgz"},"scripts":{},"directories":{}},"0.4.3":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.4.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"main":"./lib/ejs.js","dependencies":{},"devDependencies":{},"_id":"ejs@0.4.3","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"8143c3656955b8934db5d9da83e9be73176f1f4f","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.4.3.tgz"},"scripts":{},"directories":{}},"0.5.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.5.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"expresso":"0.9.2"},"main":"./lib/ejs.js","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.5.0","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"d6f8e7d3baad096383df59c3a2407bd942cf08e8","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.5.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.6.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*"},"main":"./lib/ejs.js","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.6.0","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"c2a4626ed2102e87898db4c9fcda5bc608e17140","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.6.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.6.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*"},"main":"./lib/ejs.js","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.6.1","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"16ccc98eeeac166982927fa67eb3fca8865f6871","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.6.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.7.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.7.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*"},"main":"./lib/ejs.js","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.7.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"b91f5671666c4a3746db895855cdd01b5fea7897","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.7.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.7.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.7.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*"},"main":"./lib/ejs.js","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.7.1","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"repository":{"url":"git://github.com/visionmedia/ejs.git","type":"git"},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"6dab41cbdee572986db328a2a8d22040f20fba7c","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.7.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.7.2":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.7.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"ejs@0.7.2","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"8032ee9f1fccdae8376582fee1c6d80b31aa1bd3","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.7.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"_id":"ejs@0.8.0","dist":{"shasum":"b4f1398e21e9e911b8cdff30b60346e70fc79f6f","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.1":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"_id":"ejs@0.8.1","dist":{"shasum":"776b64ac4333aade6d3d3b4b4174ea541735de31","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.2":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"_id":"ejs@0.8.2","dist":{"shasum":"f41b938dc9d3974dc72edc5f9727d3624725858d","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.3":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"_id":"ejs@0.8.3","dist":{"shasum":"db8aac47ff80a7df82b4c82c126fe8970870626f","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.4":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"scripts":{"test":"mocha --require should --reporter spec"},"_id":"ejs@0.8.4","dist":{"shasum":"52e61755e5e97fbc5aeeb07df49a4e062bff30d5","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.4.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.5":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"scripts":{"test":"mocha --require should --reporter spec"},"bugs":{"url":"https://github.com/visionmedia/ejs/issues"},"homepage":"https://github.com/visionmedia/ejs","_id":"ejs@0.8.5","dist":{"shasum":"57758f736d6c3025dbfb53f85bd5b93d136b3856","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.5.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.6":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.6","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"scripts":{"test":"mocha --require should --reporter spec"},"bugs":{"url":"https://github.com/visionmedia/ejs/issues"},"homepage":"https://github.com/visionmedia/ejs","_id":"ejs@0.8.6","dist":{"shasum":"b140399e0ad985545ba0bf23b5bb00ce34bd15e9","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.6.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.8":{"name":"ejs","description":"Embedded JavaScript templates","version":"0.8.8","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"scripts":{"test":"mocha --require should --reporter spec"},"bugs":{"url":"https://github.com/visionmedia/ejs/issues"},"homepage":"https://github.com/visionmedia/ejs","_id":"ejs@0.8.8","dist":{"shasum":"ffdc56dcc35d02926dd50ad13439bbc54061d598","tarball":"https://registry.npmjs.org/ejs/-/ejs-0.8.8.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"1.0.0":{"name":"ejs","description":"Embedded JavaScript templates","version":"1.0.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["template","engine","ejs"],"devDependencies":{"mocha":"*","should":"*"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/visionmedia/ejs.git"},"scripts":{"test":"mocha --require should --reporter spec"},"bugs":{"url":"https://github.com/visionmedia/ejs/issues"},"homepage":"https://github.com/visionmedia/ejs","_id":"ejs@1.0.0","dist":{"shasum":"c9c60a48a46ee452fb32a71c317b95e5aa1fcb3d","tarball":"https://registry.npmjs.org/ejs/-/ejs-1.0.0.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"2.0.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.2","_shasum":"09d56a4327c99ace3232219c96b9ec27c53f5efc","_resolved":"file:pkg/ejs-v2.0.2.tar.gz","_from":"pkg/ejs-v2.0.2.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"09d56a4327c99ace3232219c96b9ec27c53f5efc","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.2.tgz"},"directories":{}},"2.0.3":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.3","_shasum":"540012f0e14cfb99a01f201837ebf7e83f5e4100","_resolved":"file:pkg/ejs-v2.0.3.tar.gz","_from":"pkg/ejs-v2.0.3.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"540012f0e14cfb99a01f201837ebf7e83f5e4100","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.3.tgz"},"directories":{}},"2.0.4":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.4","_shasum":"fc42b961265803825d25d088a8e7bf1207b65791","_resolved":"file:pkg/ejs-v2.0.4.tar.gz","_from":"pkg/ejs-v2.0.4.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"fc42b961265803825d25d088a8e7bf1207b65791","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.4.tgz"},"directories":{}},"2.0.5":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.5","_shasum":"6e7283b1fd913e64195ea98b8653a1ef331b800d","_resolved":"file:pkg/ejs-v2.0.5.tar.gz","_from":"pkg/ejs-v2.0.5.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"6e7283b1fd913e64195ea98b8653a1ef331b800d","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.5.tgz"},"directories":{}},"2.0.6":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.6","_shasum":"2c6a553ee602710b045a555cdcaefe7a3707f274","_resolved":"file:pkg/ejs-v2.0.6.tar.gz","_from":"pkg/ejs-v2.0.6.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"2c6a553ee602710b045a555cdcaefe7a3707f274","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.6.tgz"},"directories":{}},"2.0.7":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.7","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.7","_shasum":"db0ad257e0fba649029f8c823b8762609c2368f7","_resolved":"file:pkg/ejs-v2.0.7.tar.gz","_from":"pkg/ejs-v2.0.7.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"db0ad257e0fba649029f8c823b8762609c2368f7","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.7.tgz"},"directories":{}},"2.0.8":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.0.8","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"dependencies":{},"devDependencies":{"browserify":"8.0.3","uglify-js":"2.4.16","mocha":"2.1.0","jake":"8.0.x"},"engines":{"node":"*"},"scripts":{"test":"./node_modules/mocha/bin/mocha --ui tdd --reporter spec"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","_id":"ejs@2.0.8","_shasum":"b9e67d2887bab7895af644ce1b0402ed7a5ca52a","_resolved":"file:pkg/ejs-v2.0.8.tar.gz","_from":"pkg/ejs-v2.0.8.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"b9e67d2887bab7895af644ce1b0402ed7a5ca52a","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.0.8.tgz"},"directories":{}},"2.1.1":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.1.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.1.1","_shasum":"3ba56f98812c645d4bff1c95503991821a9c1a0b","_resolved":"file:pkg/ejs-v2.1.1.tar.gz","_from":"pkg/ejs-v2.1.1.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"3ba56f98812c645d4bff1c95503991821a9c1a0b","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.1.1.tgz"},"directories":{}},"2.1.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.1.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.1.2","_shasum":"49d71aec0e4f97835ae3ebb62e783f10ac8b9c26","_resolved":"file:pkg/ejs-v2.1.2.tar.gz","_from":"pkg/ejs-v2.1.2.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"49d71aec0e4f97835ae3ebb62e783f10ac8b9c26","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.1.2.tgz"},"directories":{}},"2.1.3":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.1.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.1.3","_shasum":"94f2b4fbcd6a8bc9d59fe529330b1b920c6633f7","_resolved":"file:pkg/ejs-v2.1.3.tar.gz","_from":"pkg/ejs-v2.1.3.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"94f2b4fbcd6a8bc9d59fe529330b1b920c6633f7","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.1.3.tgz"},"directories":{}},"2.1.4":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.1.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.1.4","_shasum":"bd005ff17b621a96ed296714b1a84fdae1b2932c","_resolved":"file:pkg/ejs-v2.1.4.tar.gz","_from":"pkg/ejs-v2.1.4.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"bd005ff17b621a96ed296714b1a84fdae1b2932c","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.1.4.tgz"},"directories":{}},"2.2.1":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.2.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.2.1","_shasum":"1028dfc0b8fd7d7efe2b76bf25785fe8b302bfbe","_resolved":"file:pkg/ejs-v2.2.1.tar.gz","_from":"pkg/ejs-v2.2.1.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"1028dfc0b8fd7d7efe2b76bf25785fe8b302bfbe","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.2.1.tgz"},"directories":{}},"2.2.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.2.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.2.2","_shasum":"e0a4cecb211bc432e260802a2cd45c7bfb8007aa","_resolved":"file:pkg/ejs-v2.2.2.tar.gz","_from":"pkg/ejs-v2.2.2.tar.gz","_npmVersion":"2.1.18","_nodeVersion":"0.10.35","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"e0a4cecb211bc432e260802a2cd45c7bfb8007aa","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.2.2.tgz"},"directories":{}},"2.2.3":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.2.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.2.3","_shasum":"8d78070eeb2689d94de660279bb9898de9df1ba0","_resolved":"file:pkg/ejs-v2.2.3.tar.gz","_from":"pkg/ejs-v2.2.3.tar.gz","_npmVersion":"2.1.18","_nodeVersion":"0.10.35","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"8d78070eeb2689d94de660279bb9898de9df1ba0","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.2.3.tgz"},"directories":{}},"2.2.4":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.2.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","uglify-js":"^2.4.16","mocha":"^2.1.0","jake":"^8.0.0","istanbul":"~0.3.5"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha"},"_id":"ejs@2.2.4","_shasum":"f0af7e366c13149dd7ae30106c0c0e1cad11903c","_resolved":"file:pkg/ejs-v2.2.4.tar.gz","_from":"pkg/ejs-v2.2.4.tar.gz","_npmVersion":"2.1.18","_nodeVersion":"0.10.35","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"f0af7e366c13149dd7ae30106c0c0e1cad11903c","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.2.4.tgz"},"directories":{}},"2.3.1":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.3.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.3.1","_shasum":"a697d98ac401e32a99c3deed92c60c19b6199a7f","_resolved":"file:pkg/ejs-v2.3.1.tar.gz","_from":"pkg/ejs-v2.3.1.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"a697d98ac401e32a99c3deed92c60c19b6199a7f","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.3.1.tgz"},"directories":{}},"2.3.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.3.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.3.2","_shasum":"0483b4f1c513d3fdac3d14647874621fb95a8df6","_resolved":"file:pkg/ejs-v2.3.2.tar.gz","_from":"pkg/ejs-v2.3.2.tar.gz","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"0483b4f1c513d3fdac3d14647874621fb95a8df6","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.3.2.tgz"},"directories":{}},"2.3.3":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.3.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.3.3","_shasum":"a6babb67815d7190694af4ba82fe065e56d5f0e7","_resolved":"file:pkg/ejs-v2.3.3.tar.gz","_from":"pkg/ejs-v2.3.3.tar.gz","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"a6babb67815d7190694af4ba82fe065e56d5f0e7","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.3.3.tgz"},"directories":{}},"2.3.4":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.3.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.3.4","_shasum":"3c76caa09664b3583b0037af9dc136e79ec68b98","_resolved":"file:pkg/ejs-v2.3.4.tar.gz","_from":"pkg/ejs-v2.3.4.tar.gz","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"3c76caa09664b3583b0037af9dc136e79ec68b98","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.3.4.tgz"},"directories":{}},"2.4.1":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.4.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.4.1","_shasum":"82e15b1b2a1f948b18097476ba2bd7c66f4d1566","_resolved":"file:pkg/ejs-v2.4.1.tar.gz","_from":"pkg/ejs-v2.4.1.tar.gz","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"82e15b1b2a1f948b18097476ba2bd7c66f4d1566","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.4.1.tgz"},"directories":{}},"2.4.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.4.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^8.0.3","istanbul":"~0.3.5","jake":"^8.0.0","jsdoc":"^3.3.0-beta1","lru-cache":"^2.5.0","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.4.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","sample":"npm install express && node sample/index.js","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.4.2","_shasum":"7057eb4812958fb731841cd9ca353343efe597b1","_resolved":"file:pkg/ejs-v2.4.2.tar.gz","_from":"pkg/ejs-v2.4.2.tar.gz","_npmVersion":"2.15.1","_nodeVersion":"4.4.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"dist":{"shasum":"7057eb4812958fb731841cd9ca353343efe597b1","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.4.2.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ejs-2.4.2.tgz_1464117640663_0.8193834638223052"},"directories":{}},"2.5.1":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.1","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^2.1.0","rimraf":"^2.2.8","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","sample":"npm install express && node sample/index.js","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.5.1","_shasum":"dbc0ac40812d3b451dad063fcd369e4e47d80287","_resolved":"file:pkg/ejs-v2.5.1.tar.gz","_from":"pkg/ejs-v2.5.1.tar.gz","_npmVersion":"2.14.7","_nodeVersion":"4.2.2","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"dbc0ac40812d3b451dad063fcd369e4e47d80287","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/ejs-2.5.1.tgz_1469467300312_0.7665372854098678"},"directories":{}},"2.5.2":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.2","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","rimraf":"^2.2.8","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*","devdoc":"rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*"},"_id":"ejs@2.5.2","_shasum":"21444ba09386f0c65b6eafb96a3d51bcb3be80d1","_resolved":"file:pkg/ejs-v2.5.2.tar.gz","_from":"pkg/ejs-v2.5.2.tar.gz","_npmVersion":"2.14.7","_nodeVersion":"4.2.2","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"21444ba09386f0c65b6eafb96a3d51bcb3be80d1","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ejs-2.5.2.tgz_1473259584869_0.9678213631268591"},"directories":{}},"2.5.3":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.3","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","git-directory-deploy":"^1.5.1","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","lint":"eslint \"**/*.js\" Jakefile","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"jake doc","devdoc":"jake doc[dev]"},"_id":"ejs@2.5.3","_shasum":"bfeae1e2f7fa51c4527769fcaa14c5ca73eb5e47","_resolved":"file:pkg/ejs-v2.5.3.tar.gz","_from":"pkg/ejs-v2.5.3.tar.gz","_npmVersion":"2.15.1","_nodeVersion":"4.4.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"bfeae1e2f7fa51c4527769fcaa14c5ca73eb5e47","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.3.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ejs-2.5.3.tgz_1480367907161_0.21362517587840557"},"directories":{}},"2.5.4":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.4","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","git-directory-deploy":"^1.5.1","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","lint":"eslint \"**/*.js\" Jakefile","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"jake doc","devdoc":"jake doc[dev]"},"_id":"ejs@2.5.4","_shasum":"0ec3bd5682aaa6e6fe9a2b1ddc761e884172dabb","_resolved":"file:pkg/ejs-v2.5.4.tar.gz","_from":"pkg/ejs-v2.5.4.tar.gz","_npmVersion":"2.15.1","_nodeVersion":"4.4.4","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"0ec3bd5682aaa6e6fe9a2b1ddc761e884172dabb","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.4.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ejs-2.5.4.tgz_1480975750325_0.8895350911188871"},"directories":{}},"2.5.5":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.5","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","git-directory-deploy":"^1.5.1","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","lint":"eslint \"**/*.js\" Jakefile","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"jake doc","devdoc":"jake doc[dev]"},"_id":"ejs@2.5.5","_shasum":"6ef4e954ea7dcf54f66aad2fe7aa421932d9ed77","_resolved":"file:pkg/ejs-v2.5.5.tar.gz","_from":"pkg/ejs-v2.5.5.tar.gz","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"6ef4e954ea7dcf54f66aad2fe7aa421932d9ed77","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.5.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/ejs-2.5.5.tgz_1481011535826_0.4493071837350726"},"directories":{}},"2.5.6":{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","git-directory-deploy":"^1.5.1","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","lint":"eslint \"**/*.js\" Jakefile","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"jake doc","devdoc":"jake doc[dev]"},"_id":"ejs@2.5.6","_shasum":"479636bfa3fe3b1debd52087f0acb204b4f19c88","_resolved":"file:pkg/ejs-v2.5.6.tar.gz","_from":"pkg/ejs-v2.5.6.tar.gz","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"mde","email":"mde@fleegix.org"},"dist":{"shasum":"479636bfa3fe3b1debd52087f0acb204b4f19c88","tarball":"https://registry.npmjs.org/ejs/-/ejs-2.5.6.tgz"},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ejs-2.5.6.tgz_1487277787176_0.4875628533773124"},"directories":{}}},"maintainers":[{"name":"mde","email":"mde@fleegix.org"}],"author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"time":{"modified":"2017-05-27T03:24:53.117Z","created":"2011-02-14T21:15:53.948Z","0.0.1":"2011-02-14T21:15:53.948Z","0.0.2":"2011-02-14T21:15:53.948Z","0.0.3":"2011-02-14T21:15:53.948Z","0.0.4":"2011-02-14T21:15:53.948Z","0.1.0":"2011-02-14T21:15:53.948Z","0.2.0":"2011-02-14T21:15:53.948Z","0.2.1":"2011-02-14T21:15:53.948Z","0.3.0":"2011-02-14T21:15:53.948Z","0.3.1":"2011-02-24T03:08:47.107Z","0.4.0":"2011-04-21T15:38:18.315Z","0.4.1":"2011-04-21T16:12:48.085Z","0.4.2":"2011-05-11T16:41:52.848Z","0.4.3":"2011-06-20T15:43:06.444Z","0.5.0":"2011-11-20T19:57:26.230Z","0.6.0":"2011-12-09T23:53:35.286Z","0.6.1":"2011-12-10T00:03:58.433Z","0.7.0":"2012-03-25T03:22:09.159Z","0.7.1":"2012-03-26T15:49:46.026Z","0.7.2":"2012-06-22T15:23:23.051Z","0.8.0":"2012-07-25T15:47:38.691Z","0.8.1":"2012-08-11T19:08:11.100Z","0.8.2":"2012-08-16T16:10:20.977Z","0.8.3":"2012-09-13T17:39:43.246Z","0.8.4":"2013-05-08T16:40:57.686Z","0.8.5":"2013-11-22T00:20:37.862Z","0.8.6":"2014-03-21T16:10:03.569Z","0.8.8":"2014-03-24T16:29:50.391Z","1.0.0":"2014-03-24T16:32:29.202Z","2.0.2":"2015-01-04T07:05:30.354Z","2.0.3":"2015-01-04T18:50:30.699Z","2.0.4":"2015-01-04T23:19:31.738Z","2.0.5":"2015-01-04T23:22:39.010Z","2.0.6":"2015-01-05T00:45:02.692Z","2.0.7":"2015-01-05T20:52:20.703Z","2.0.8":"2015-01-06T21:03:47.953Z","2.1.1":"2015-01-11T17:55:40.917Z","2.1.2":"2015-01-11T20:16:56.924Z","2.1.3":"2015-01-12T03:10:51.503Z","2.1.4":"2015-01-12T19:08:53.495Z","2.2.1":"2015-01-20T06:11:05.831Z","2.2.2":"2015-01-21T22:30:55.679Z","2.2.3":"2015-01-23T23:52:13.108Z","2.2.4":"2015-02-01T18:31:55.158Z","2.3.1":"2015-02-23T01:25:44.314Z","2.3.2":"2015-06-29T00:23:09.146Z","2.3.3":"2015-07-11T20:10:37.137Z","2.3.4":"2015-09-07T04:06:19.301Z","2.4.1":"2016-01-24T05:07:30.365Z","2.4.2":"2016-05-24T19:20:41.091Z","2.5.1":"2016-07-25T17:21:43.560Z","2.5.2":"2016-09-07T14:46:25.109Z","2.5.3":"2016-11-28T21:18:29.311Z","2.5.4":"2016-12-05T22:09:12.592Z","2.5.5":"2016-12-06T08:05:37.961Z","2.5.6":"2017-02-16T20:43:07.414Z"},"users":{"naholyr":true,"fgribreau":true,"m42am":true,"dubban":true,"ljharb":true,"cj.nichols":true,"maxmaximov":true,"mcwhittemore":true,"chrisweb":true,"adamrenny":true,"einfallstoll":true,"mackenziestarr":true,"fmm":true,"evkline":true,"biggora":true,"brandtabbott":true,"voxpelli":true,"jimnox":true,"matteospampani":true,"undashes":true,"lpgray":true,"dofy":true,"boustanihani":true,"karthickt":true,"writech":true,"louxiaojian":true,"jianhua":true,"saifee":true,"kewin":true,"sasquatch":true,"tedyhy":true,"gregvanbrug":true,"piotr23":true,"lamentchina":true,"pedrozgz":true,"alexandermac":true,"earthling0":true,"damocles":true,"iisii":true,"x_soth":true,"j3kz":true,"timothygu":true,"vchouhan":true,"trusktr":true,"manxisuo":true,"truonghuutien":true,"vboctor":true,"gabrielmedina":true,"chadwatson":true,"reno184":true,"nickleefly":true,"jamesulph":true,"sm0ck1":true,"oheard":true,"qqqppp9998":true,"staraple":true,"bucaran":true,"dac2205":true,"junjiansyu":true,"damianof":true,"theveil":true,"blind__man":true,"tudou":true,"ernie55ernie":true,"sharp":true,"gochomugo":true,"doombuddha":true,"csbun":true,"buzzalderaan":true,"stretchgz":true,"incsw":true,"freshlogic":true,"dbck":true,"maskedcoder":true,"pensierinmusica":true,"2dxgujun":true,"valeriu-zdrobau":true,"ssh0702":true,"yhui02":true,"z4tech":true,"jybleau":true,"iolo":true,"nickeltobias":true,"jslite":true,"blessdyb":true,"rackyrose":true,"chadyred":true,"dereklakin":true,"raskawa":true,"raisiqueira":true,"hyde2able":true,"stany":true,"ysk8":true,"cfleschhut":true,"jtsky":true,"tobiasnickel":true,"ryandu":true,"wangnan0610":true,"msjcaetano":true,"dskecse":true,"evanyeung":true,"hyteer":true,"dittodhole":true,"shanemileham":true,"wzbg":true,"monjer":true,"cslater":true,"coalesce":true,"a3.ivanenko":true,"sammok2003":true,"erikvold":true,"xufz":true,"zhenzhuquan":true,"ghe1219":true,"peunzhang":true,"xgheaven":true,"juangotama":true,"asm2hex":true,"kimkee":true,"demiurgosoft":true,"qmmr":true,"trenthm":true,"isik":true,"snarky":true,"pablo.tavarez":true,"dmsanchez86":true,"sylvain261":true,"fonologico":true,"markthethomas":true,"leogoncha":true,"pmasa":true,"aisin":true,"fassetar":true,"mark24code":true,"456wyc":true,"marcobiedermann":true,"angrykoala":true,"lhard":true,"fengmiaosen":true,"sopov":true,"i.vispyanskiy":true,"aitoralejandro":true,"shekharreddy":true,"ferrari":true,"apopek":true,"moueza":true,"abuddington":true,"nilz3ro":true,"netdex":true,"largepuma":true,"lmanukyan":true,"monczek":true,"duck102017":true,"ga1989":true,"writeosahon":true,"13lank.null":true,"hodd":true,"olonam":true,"fahadjadoon":true,"isenricho":true,"langri-sha":true,"soulevans07":true,"joechow":true,"techyone":true,"zhengyaing":true,"semo100":true,"adamdreszer":true,"proxy":true,"soundtemple":true,"bool":true,"strydom":true,"gui0704":true,"smokinhuzi":true,"ww522413622":true,"wfcookie":true,"niudi":true,"flozz":true,"yong_a":true,"danielye":true,"adeelp":true,"kodekracker":true,"makediff":true,"zllzixi":true,"moonnoire":true,"evdokimovm":true,"hugovila":true,"shakakira":true,"huarse":true,"pavelusov":true,"ab.moon":true,"akamaozu":true,"beatwinthewave":true,"fxkraus":true,"tomchao":true,"jk6":true,"quidama":true,"flaviomarcioti":true,"sadmansamee":true,"rocket0191":true,"atulmy":true,"nguyenxuantruong.dev":true,"maxwelldu":true,"danielpavelic":true,"milan322":true,"jamesllen":true,"ray0214":true,"sibawite":true,"linfeng9008":true,"karzanosman984":true,"alaeddine17":true,"xiaoyiyu":true},"repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"readme":"# EJS\n\nEmbedded JavaScript templates\n\n[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)\n[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)\n\n## Installation\n\n```bash\n$ npm install ejs\n```\n\n## Features\n\n  * Control flow with `<% %>`\n  * Escaped output with `<%= %>` (escape function configurable)\n  * Unescaped raw output with `<%- %>`\n  * Newline-trim mode ('newline slurping') with `-%>` ending tag\n  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`\n  * Custom delimiters (e.g., use `<? ?>` instead of `<% %>`)\n  * Includes\n  * Client-side support\n  * Static caching of intermediate JavaScript\n  * Static caching of templates\n  * Complies with the [Express](http://expressjs.com) view system\n\n## Example\n\n```html\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n```\n\nTry EJS online at: https://ionicabizau.github.io/ejs-playground/.\n\n## Usage\n\n```javascript\nvar template = ejs.compile(str, options);\ntemplate(data);\n// => Rendered HTML string\n\nejs.render(str, data, options);\n// => Rendered HTML string\n\nejs.renderFile(filename, data, options, function(err, str){\n    // str => Rendered HTML string\n});\n```\n\nIt is also possible to use `ejs.render(dataAndOptions);` where you pass\neverything in a single object. In that case, you'll end up with local variables\nfor all the passed options. However, be aware that your code could break if we\nadd an option with the same name as one of your data object's properties.\nTherefore, we do not recommend using this shortcut.\n\n## Options\n\n  - `cache`           Compiled functions are cached, requires `filename`\n  - `filename`        The name of the file being rendered. Not required if you\n    are using `renderFile()`. Used by `cache` to key caches, and for includes.\n  - `root`            Set project root for includes with an absolute path (/file.ejs).\n  - `context`         Function execution context\n  - `compileDebug`    When `false` no debug instrumentation is compiled\n  - `client`          When `true`, compiles a function that can be rendered\n    in the browser without needing to load the EJS Runtime\n    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).\n  - `delimiter`       Character to use with angle brackets for open/close\n  - `debug`           Output generated function body\n  - `strict`          When set to `true`, generated function is in strict mode\n  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object. Set to `false` in strict mode.\n  - `localsName`      Name to use for the object storing local variables when not using `with` Defaults to `locals`\n  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading\n    and trailing whitespace. It also enables a safer version of `-%>` line\n    slurping for all scriptlet tags (it does not strip new lines of tags in\n    the middle of a line).\n  - `escape`          The escaping function used with `<%=` construct. It is\n    used in rendering and is `.toString()`ed in the generation of client functions. (By default escapes XML).\n\nThis project uses [JSDoc](http://usejsdoc.org/). For the full public API\ndocumentation, clone the repository and run `npm run doc`. This will run JSDoc\nwith the proper options and output the documentation to `out/`. If you want\nthe both the public & private API docs, run `npm run devdoc` instead.\n\n## Tags\n\n  - `<%`              'Scriptlet' tag, for control-flow, no output\n  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it\n  - `<%=`             Outputs the value into the template (escaped)\n  - `<%-`             Outputs the unescaped value into the template\n  - `<%#`             Comment tag, no execution, no output\n  - `<%%`             Outputs a literal '<%'\n  - `%%>`             Outputs a literal '%>'\n  - `%>`              Plain ending tag\n  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline\n  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it\n\nFor the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).\n\n## Includes\n\nIncludes either have to be an absolute path, or, if not, are assumed as\nrelative to the template with the `include` call. For example if you are\nincluding `./views/user/show.ejs` from `./views/users.ejs` you would\nuse `<%- include('user/show') %>`.\n\nYou must specify the `filename` option for the template with the `include`\ncall unless you are using `renderFile()`.\n\nYou'll likely want to use the raw output tag (`<%-`) with your include to avoid\ndouble-escaping the HTML output.\n\n```html\n<ul>\n  <% users.forEach(function(user){ %>\n    <%- include('user/show', {user: user}) %>\n  <% }); %>\n</ul>\n```\n\nIncludes are inserted at runtime, so you can use variables for the path in the\n`include` call (for example `<%- include(somePath) %>`). Variables in your\ntop-level data object are available to all your includes, but local variables\nneed to be passed down.\n\nNOTE: Include preprocessor directives (`<% include user/show %>`) are\nstill supported.\n\n## Custom delimiters\n\nCustom delimiters can be applied on a per-template basis, or globally:\n\n```javascript\nvar ejs = require('ejs'),\n    users = ['geddy', 'neil', 'alex'];\n\n// Just one template\nejs.render('<?= users.join(\" | \"); ?>', {users: users}, {delimiter: '?'});\n// => 'geddy | neil | alex'\n\n// Or globally\nejs.delimiter = '$';\nejs.render('<$= users.join(\" | \"); $>', {users: users});\n// => 'geddy | neil | alex'\n```\n\n## Caching\n\nEJS ships with a basic in-process cache for caching the intermediate JavaScript\nfunctions used to render templates. It's easy to plug in LRU caching using\nNode's `lru-cache` library:\n\n```javascript\nvar ejs = require('ejs')\n  , LRU = require('lru-cache');\nejs.cache = LRU(100); // LRU cache with 100-item limit\n```\n\nIf you want to clear the EJS cache, call `ejs.clearCache`. If you're using the\nLRU cache and need a different limit, simple reset `ejs.cache` to a new instance\nof the LRU.\n\n## Custom FileLoader\n\nThe default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.\n\n```javascript\nvar ejs = require('ejs');\nvar myFileLoad = function (filePath) {\n  return 'myFileLoad: ' + fs.readFileSync(filePath);\n};\n\nejs.fileLoader = myFileLoad;\n```\n\nWith this feature, you can preprocess the template before reading it.\n\n## Layouts\n\nEJS does not specifically support blocks, but layouts can be implemented by\nincluding headers and footers, like so:\n\n\n```html\n<%- include('header') -%>\n<h1>\n  Title\n</h1>\n<p>\n  My page\n</p>\n<%- include('footer') -%>\n```\n\n## Client-side support\n\nGo to the [Latest Release](https://github.com/mde/ejs/releases/latest), download\n`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning\nthe repository and running `jake build` (or `$(npm bin)/jake build` if jake is\nnot installed globally).\n\nInclude one of these files on your page, and `ejs` should be available globally.\n\n### Example\n\n```html\n<div id=\"output\"></div>\n<script src=\"ejs.min.js\"></script>\n<script>\n  var people = ['geddy', 'neil', 'alex'],\n      html = ejs.render('<%= people.join(\", \"); %>', {people: people});\n  // With jQuery:\n  $('#output').html(html);\n  // Vanilla JS:\n  document.getElementById('output').innerHTML = html;\n</script>\n```\n\n### Caveats\n\nMost of EJS will work as expected; however, there are a few things to note:\n\n1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.\n2. For the same reason, `include`s do not work unless you use an `IncludeCallback`. Here is an example:\n  ```javascript\n  var str = \"Hello <%= include('file', {person: 'John'}); %>\",\n      fn = ejs.compile(str, {client: true});\n\n  fn(data, null, function(path, d){ // IncludeCallback\n    // path -> 'file'\n    // d -> {person: 'John'}\n    // Put your code here\n    // Return the contents of file as a string\n  }); // returns rendered string\n  ```\n\n## Related projects\n\nThere are a number of implementations of EJS:\n\n * TJ's implementation, the v1 of this library: https://github.com/tj/ejs\n * Jupiter Consulting's EJS: http://www.embeddedjs.com/\n * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/\n * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs\n * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript\n\n## License\n\nLicensed under the Apache License, Version 2.0\n(<http://www.apache.org/licenses/LICENSE-2.0>)\n\n- - -\nEJS Embedded JavaScript templates copyright 2112\nmde@fleegix.org.\n","readmeFilename":"README.md","homepage":"https://github.com/mde/ejs","keywords":["template","engine","ejs"],"bugs":{"url":"https://github.com/mde/ejs/issues"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","_attachments":{},"_etag":"W/\"5928f185-10a89\""}
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package.tgz b/register/npm/ejs/2.5.6/package.tgz
new file mode 100644
index 0000000..f1a638f
Binary files /dev/null and b/register/npm/ejs/2.5.6/package.tgz differ
diff --git a/register/npm/ejs/2.5.6/package/Jakefile b/register/npm/ejs/2.5.6/package/Jakefile
new file mode 100644
index 0000000..ec3defd
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/Jakefile
@@ -0,0 +1,71 @@
+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var exec = function (cmd) {
+  execSync(cmd, {stdio: 'inherit'});
+};
+
+/* global jake, task, desc, publishTask */
+
+task('build', ['lint', 'clean', 'browserify', 'minify'], function () {
+  console.log('Build completed.');
+});
+
+desc('Cleans browerified/minified files and package files');
+task('clean', ['clobber'], function () {
+  jake.rmRf('./ejs.js');
+  jake.rmRf('./ejs.min.js');
+  console.log('Cleaned up compiled files.');
+});
+
+desc('Lints the source code');
+task('lint', function () {
+  exec('./node_modules/.bin/eslint \"**/*.js\" Jakefile');
+  console.log('Linting completed.');
+});
+
+task('browserify', function () {
+  exec('./node_modules/browserify/bin/cmd.js --standalone ejs lib/ejs.js > ejs.js');
+  console.log('Browserification completed.');
+});
+
+task('minify', function () {
+  exec('./node_modules/uglify-js/bin/uglifyjs ejs.js > ejs.min.js');
+  console.log('Minification completed.');
+});
+
+task('doc', function (dev) {
+  jake.rmRf('out');
+  var p = dev ? '-p' : '';
+  exec('./node_modules/.bin/jsdoc ' + p + ' -c jsdoc.json lib/* docs/jsdoc/*');
+  console.log('Documentation generated.');
+});
+
+task('docPublish', ['doc'], function () {
+  fs.writeFileSync('out/CNAME', 'api.ejs.co');
+  console.log('Pushing docs to gh-pages...');
+  exec('./node_modules/.bin/git-directory-deploy --directory out/');
+  console.log('Docs published to gh-pages.');
+});
+
+task('test', ['lint'], function () {
+  exec('./node_modules/.bin/mocha');
+});
+
+publishTask('ejs', ['build'], function () {
+  this.packageFiles.include([
+    'Jakefile',
+    'README.md',
+    'LICENSE',
+    'package.json',
+    'ejs.js',
+    'ejs.min.js',
+    'lib/**',
+    'test/**'
+  ]);
+});
+
+jake.Task.publish.on('complete', function () {
+  console.log('Updating hosted docs...');
+  console.log('If this fails, run jake docPublish to re-try.');
+  jake.Task.docPublish.invoke();
+});
diff --git a/register/npm/ejs/2.5.6/package/LICENSE b/register/npm/ejs/2.5.6/package/LICENSE
new file mode 100644
index 0000000..d645695
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/register/npm/ejs/2.5.6/package/README.md b/register/npm/ejs/2.5.6/package/README.md
new file mode 100644
index 0000000..1f3b9c7
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/README.md
@@ -0,0 +1,256 @@
+# EJS
+
+Embedded JavaScript templates
+
+[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)
+[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)
+
+## Installation
+
+```bash
+$ npm install ejs
+```
+
+## Features
+
+  * Control flow with `<% %>`
+  * Escaped output with `<%= %>` (escape function configurable)
+  * Unescaped raw output with `<%- %>`
+  * Newline-trim mode ('newline slurping') with `-%>` ending tag
+  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`
+  * Custom delimiters (e.g., use `<? ?>` instead of `<% %>`)
+  * Includes
+  * Client-side support
+  * Static caching of intermediate JavaScript
+  * Static caching of templates
+  * Complies with the [Express](http://expressjs.com) view system
+
+## Example
+
+```html
+<% if (user) { %>
+  <h2><%= user.name %></h2>
+<% } %>
+```
+
+Try EJS online at: https://ionicabizau.github.io/ejs-playground/.
+
+## Usage
+
+```javascript
+var template = ejs.compile(str, options);
+template(data);
+// => Rendered HTML string
+
+ejs.render(str, data, options);
+// => Rendered HTML string
+
+ejs.renderFile(filename, data, options, function(err, str){
+    // str => Rendered HTML string
+});
+```
+
+It is also possible to use `ejs.render(dataAndOptions);` where you pass
+everything in a single object. In that case, you'll end up with local variables
+for all the passed options. However, be aware that your code could break if we
+add an option with the same name as one of your data object's properties.
+Therefore, we do not recommend using this shortcut.
+
+## Options
+
+  - `cache`           Compiled functions are cached, requires `filename`
+  - `filename`        The name of the file being rendered. Not required if you
+    are using `renderFile()`. Used by `cache` to key caches, and for includes.
+  - `root`            Set project root for includes with an absolute path (/file.ejs).
+  - `context`         Function execution context
+  - `compileDebug`    When `false` no debug instrumentation is compiled
+  - `client`          When `true`, compiles a function that can be rendered
+    in the browser without needing to load the EJS Runtime
+    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).
+  - `delimiter`       Character to use with angle brackets for open/close
+  - `debug`           Output generated function body
+  - `strict`          When set to `true`, generated function is in strict mode
+  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object. Set to `false` in strict mode.
+  - `localsName`      Name to use for the object storing local variables when not using `with` Defaults to `locals`
+  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading
+    and trailing whitespace. It also enables a safer version of `-%>` line
+    slurping for all scriptlet tags (it does not strip new lines of tags in
+    the middle of a line).
+  - `escape`          The escaping function used with `<%=` construct. It is
+    used in rendering and is `.toString()`ed in the generation of client functions. (By default escapes XML).
+
+This project uses [JSDoc](http://usejsdoc.org/). For the full public API
+documentation, clone the repository and run `npm run doc`. This will run JSDoc
+with the proper options and output the documentation to `out/`. If you want
+the both the public & private API docs, run `npm run devdoc` instead.
+
+## Tags
+
+  - `<%`              'Scriptlet' tag, for control-flow, no output
+  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it
+  - `<%=`             Outputs the value into the template (escaped)
+  - `<%-`             Outputs the unescaped value into the template
+  - `<%#`             Comment tag, no execution, no output
+  - `<%%`             Outputs a literal '<%'
+  - `%%>`             Outputs a literal '%>'
+  - `%>`              Plain ending tag
+  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline
+  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it
+
+For the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).
+
+## Includes
+
+Includes either have to be an absolute path, or, if not, are assumed as
+relative to the template with the `include` call. For example if you are
+including `./views/user/show.ejs` from `./views/users.ejs` you would
+use `<%- include('user/show') %>`.
+
+You must specify the `filename` option for the template with the `include`
+call unless you are using `renderFile()`.
+
+You'll likely want to use the raw output tag (`<%-`) with your include to avoid
+double-escaping the HTML output.
+
+```html
+<ul>
+  <% users.forEach(function(user){ %>
+    <%- include('user/show', {user: user}) %>
+  <% }); %>
+</ul>
+```
+
+Includes are inserted at runtime, so you can use variables for the path in the
+`include` call (for example `<%- include(somePath) %>`). Variables in your
+top-level data object are available to all your includes, but local variables
+need to be passed down.
+
+NOTE: Include preprocessor directives (`<% include user/show %>`) are
+still supported.
+
+## Custom delimiters
+
+Custom delimiters can be applied on a per-template basis, or globally:
+
+```javascript
+var ejs = require('ejs'),
+    users = ['geddy', 'neil', 'alex'];
+
+// Just one template
+ejs.render('<?= users.join(" | "); ?>', {users: users}, {delimiter: '?'});
+// => 'geddy | neil | alex'
+
+// Or globally
+ejs.delimiter = '$';
+ejs.render('<$= users.join(" | "); $>', {users: users});
+// => 'geddy | neil | alex'
+```
+
+## Caching
+
+EJS ships with a basic in-process cache for caching the intermediate JavaScript
+functions used to render templates. It's easy to plug in LRU caching using
+Node's `lru-cache` library:
+
+```javascript
+var ejs = require('ejs')
+  , LRU = require('lru-cache');
+ejs.cache = LRU(100); // LRU cache with 100-item limit
+```
+
+If you want to clear the EJS cache, call `ejs.clearCache`. If you're using the
+LRU cache and need a different limit, simple reset `ejs.cache` to a new instance
+of the LRU.
+
+## Custom FileLoader
+
+The default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.
+
+```javascript
+var ejs = require('ejs');
+var myFileLoad = function (filePath) {
+  return 'myFileLoad: ' + fs.readFileSync(filePath);
+};
+
+ejs.fileLoader = myFileLoad;
+```
+
+With this feature, you can preprocess the template before reading it.
+
+## Layouts
+
+EJS does not specifically support blocks, but layouts can be implemented by
+including headers and footers, like so:
+
+
+```html
+<%- include('header') -%>
+<h1>
+  Title
+</h1>
+<p>
+  My page
+</p>
+<%- include('footer') -%>
+```
+
+## Client-side support
+
+Go to the [Latest Release](https://github.com/mde/ejs/releases/latest), download
+`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning
+the repository and running `jake build` (or `$(npm bin)/jake build` if jake is
+not installed globally).
+
+Include one of these files on your page, and `ejs` should be available globally.
+
+### Example
+
+```html
+<div id="output"></div>
+<script src="ejs.min.js"></script>
+<script>
+  var people = ['geddy', 'neil', 'alex'],
+      html = ejs.render('<%= people.join(", "); %>', {people: people});
+  // With jQuery:
+  $('#output').html(html);
+  // Vanilla JS:
+  document.getElementById('output').innerHTML = html;
+</script>
+```
+
+### Caveats
+
+Most of EJS will work as expected; however, there are a few things to note:
+
+1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.
+2. For the same reason, `include`s do not work unless you use an `IncludeCallback`. Here is an example:
+  ```javascript
+  var str = "Hello <%= include('file', {person: 'John'}); %>",
+      fn = ejs.compile(str, {client: true});
+
+  fn(data, null, function(path, d){ // IncludeCallback
+    // path -> 'file'
+    // d -> {person: 'John'}
+    // Put your code here
+    // Return the contents of file as a string
+  }); // returns rendered string
+  ```
+
+## Related projects
+
+There are a number of implementations of EJS:
+
+ * TJ's implementation, the v1 of this library: https://github.com/tj/ejs
+ * Jupiter Consulting's EJS: http://www.embeddedjs.com/
+ * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/
+ * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs
+ * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript
+
+## License
+
+Licensed under the Apache License, Version 2.0
+(<http://www.apache.org/licenses/LICENSE-2.0>)
+
+- - -
+EJS Embedded JavaScript templates copyright 2112
+mde@fleegix.org.
diff --git a/register/npm/ejs/2.5.6/package/ejs.js b/register/npm/ejs/2.5.6/package/ejs.js
new file mode 100644
index 0000000..7e6dba5
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/ejs.js
@@ -0,0 +1,1469 @@
+(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ejs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+'use strict';
+
+/**
+ * @file Embedded JavaScript templating engine. {@link http://ejs.co}
+ * @author Matthew Eernisse <mde@fleegix.org>
+ * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
+ * @project EJS
+ * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
+ */
+
+/**
+ * EJS internal functions.
+ *
+ * Technically this "module" lies in the same file as {@link module:ejs}, for
+ * the sake of organization all the private functions re grouped into this
+ * module.
+ *
+ * @module ejs-internal
+ * @private
+ */
+
+/**
+ * Embedded JavaScript templating engine.
+ *
+ * @module ejs
+ * @public
+ */
+
+var fs = require('fs');
+var path = require('path');
+var utils = require('./utils');
+
+var scopeOptionWarned = false;
+var _VERSION_STRING = require('../package.json').version;
+var _DEFAULT_DELIMITER = '%';
+var _DEFAULT_LOCALS_NAME = 'locals';
+var _NAME = 'ejs';
+var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
+var _OPTS = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
+  'client', '_with', 'rmWhitespace', 'strict', 'filename'];
+// We don't allow 'cache' option to be passed in the data obj
+// for the normal `render` call, but this is where Express puts it
+// so we make an exception for `renderFile`
+var _OPTS_EXPRESS = _OPTS.concat('cache');
+var _BOM = /^\uFEFF/;
+
+/**
+ * EJS template function cache. This can be a LRU object from lru-cache NPM
+ * module. By default, it is {@link module:utils.cache}, a simple in-process
+ * cache that grows continuously.
+ *
+ * @type {Cache}
+ */
+
+exports.cache = utils.cache;
+
+/**
+ * Custom file loader. Useful for template preprocessing or restricting access
+ * to a certain part of the filesystem.
+ *
+ * @type {fileLoader}
+ */
+
+exports.fileLoader = fs.readFileSync;
+
+/**
+ * Name of the object containing the locals.
+ *
+ * This variable is overridden by {@link Options}`.localsName` if it is not
+ * `undefined`.
+ *
+ * @type {String}
+ * @public
+ */
+
+exports.localsName = _DEFAULT_LOCALS_NAME;
+
+/**
+ * Get the path to the included file from the parent file path and the
+ * specified path.
+ *
+ * @param {String}  name     specified path
+ * @param {String}  filename parent file path
+ * @param {Boolean} isDir    parent file path whether is directory
+ * @return {String}
+ */
+exports.resolveInclude = function(name, filename, isDir) {
+  var dirname = path.dirname;
+  var extname = path.extname;
+  var resolve = path.resolve;
+  var includePath = resolve(isDir ? filename : dirname(filename), name);
+  var ext = extname(name);
+  if (!ext) {
+    includePath += '.ejs';
+  }
+  return includePath;
+};
+
+/**
+ * Get the path to the included file by Options
+ *
+ * @param  {String}  path    specified path
+ * @param  {Options} options compilation options
+ * @return {String}
+ */
+function getIncludePath(path, options){
+  var includePath;
+  if (path.charAt(0) == '/') {
+    includePath = exports.resolveInclude(path.replace(/^\/*/,''), options.root || '/', true);
+  }
+  else {
+    if (!options.filename) {
+      throw new Error('`include` use relative path requires the \'filename\' option.');
+    }
+    includePath = exports.resolveInclude(path, options.filename);
+  }
+  return includePath;
+}
+
+/**
+ * Get the template from a string or a file, either compiled on-the-fly or
+ * read from cache (if enabled), and cache the template if needed.
+ *
+ * If `template` is not set, the file specified in `options.filename` will be
+ * read.
+ *
+ * If `options.cache` is true, this function reads the file from
+ * `options.filename` so it must be set prior to calling this function.
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options   compilation options
+ * @param {String} [template] template source
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned.
+ * @static
+ */
+
+function handleCache(options, template) {
+  var func;
+  var filename = options.filename;
+  var hasTemplate = arguments.length > 1;
+
+  if (options.cache) {
+    if (!filename) {
+      throw new Error('cache option requires a filename');
+    }
+    func = exports.cache.get(filename);
+    if (func) {
+      return func;
+    }
+    if (!hasTemplate) {
+      template = fileLoader(filename).toString().replace(_BOM, '');
+    }
+  }
+  else if (!hasTemplate) {
+    // istanbul ignore if: should not happen at all
+    if (!filename) {
+      throw new Error('Internal EJS error: no file name or template '
+                    + 'provided');
+    }
+    template = fileLoader(filename).toString().replace(_BOM, '');
+  }
+  func = exports.compile(template, options);
+  if (options.cache) {
+    exports.cache.set(filename, func);
+  }
+  return func;
+}
+
+/**
+ * Try calling handleCache with the given options and data and call the
+ * callback with the result. If an error occurs, call the callback with
+ * the error. Used by renderFile().
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options    compilation options
+ * @param {Object} data        template data
+ * @param {RenderFileCallback} cb callback
+ * @static
+ */
+
+function tryHandleCache(options, data, cb) {
+  var result;
+  try {
+    result = handleCache(options)(data);
+  }
+  catch (err) {
+    return cb(err);
+  }
+  return cb(null, result);
+}
+
+/**
+ * fileLoader is independent
+ *
+ * @param {String} filePath ejs file path.
+ * @return {String} The contents of the specified file.
+ * @static
+ */
+
+function fileLoader(filePath){
+  return exports.fileLoader(filePath);
+}
+
+/**
+ * Get the template function.
+ *
+ * If `options.cache` is `true`, then the template is cached.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned
+ * @static
+ */
+
+function includeFile(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  opts.filename = getIncludePath(path, opts);
+  return handleCache(opts);
+}
+
+/**
+ * Get the JavaScript source of an included file.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {Object}
+ * @static
+ */
+
+function includeSource(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  var includePath;
+  var template;
+  includePath = getIncludePath(path, opts);
+  template = fileLoader(includePath).toString().replace(_BOM, '');
+  opts.filename = includePath;
+  var templ = new Template(template, opts);
+  templ.generateSource();
+  return {
+    source: templ.source,
+    filename: includePath,
+    template: template
+  };
+}
+
+/**
+ * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
+ * `lineno`.
+ *
+ * @implements RethrowCallback
+ * @memberof module:ejs-internal
+ * @param {Error}  err      Error object
+ * @param {String} str      EJS source
+ * @param {String} filename file name of the EJS file
+ * @param {String} lineno   line number of the error
+ * @static
+ */
+
+function rethrow(err, str, flnm, lineno, esc){
+  var lines = str.split('\n');
+  var start = Math.max(lineno - 3, 0);
+  var end = Math.min(lines.length, lineno + 3);
+  var filename = esc(flnm); // eslint-disable-line
+  // Error context
+  var context = lines.slice(start, end).map(function (line, i){
+    var curr = i + start + 1;
+    return (curr == lineno ? ' >> ' : '    ')
+      + curr
+      + '| '
+      + line;
+  }).join('\n');
+
+  // Alter exception message
+  err.path = filename;
+  err.message = (filename || 'ejs') + ':'
+    + lineno + '\n'
+    + context + '\n\n'
+    + err.message;
+
+  throw err;
+}
+
+function stripSemi(str){
+  return str.replace(/;(\s*$)/, '$1');
+}
+
+/**
+ * Compile the given `str` of ejs into a template function.
+ *
+ * @param {String}  template EJS template
+ *
+ * @param {Options} opts     compilation options
+ *
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `opts.client`, either type might be returned.
+ * @public
+ */
+
+exports.compile = function compile(template, opts) {
+  var templ;
+
+  // v1 compat
+  // 'scope' is 'context'
+  // FIXME: Remove this in a future version
+  if (opts && opts.scope) {
+    if (!scopeOptionWarned){
+      console.warn('`scope` option is deprecated and will be removed in EJS 3');
+      scopeOptionWarned = true;
+    }
+    if (!opts.context) {
+      opts.context = opts.scope;
+    }
+    delete opts.scope;
+  }
+  templ = new Template(template, opts);
+  return templ.compile();
+};
+
+/**
+ * Render the given `template` of ejs.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}   template EJS template
+ * @param {Object}  [data={}] template data
+ * @param {Options} [opts={}] compilation and rendering options
+ * @return {String}
+ * @public
+ */
+
+exports.render = function (template, d, o) {
+  var data = d || {};
+  var opts = o || {};
+
+  // No options object -- if there are optiony names
+  // in the data, copy them to options
+  if (arguments.length == 2) {
+    utils.shallowCopyFromList(opts, data, _OPTS);
+  }
+
+  return handleCache(opts, template)(data);
+};
+
+/**
+ * Render an EJS file at the given `path` and callback `cb(err, str)`.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}             path     path to the EJS file
+ * @param {Object}            [data={}] template data
+ * @param {Options}           [opts={}] compilation and rendering options
+ * @param {RenderFileCallback} cb callback
+ * @public
+ */
+
+exports.renderFile = function () {
+  var filename = arguments[0];
+  var cb = arguments[arguments.length - 1];
+  var opts = {filename: filename};
+  var data;
+
+  if (arguments.length > 2) {
+    data = arguments[1];
+
+    // No options object -- if there are optiony names
+    // in the data, copy them to options
+    if (arguments.length === 3) {
+      // Express 4
+      if (data.settings && data.settings['view options']) {
+        utils.shallowCopyFromList(opts, data.settings['view options'], _OPTS_EXPRESS);
+      }
+      // Express 3 and lower
+      else {
+        utils.shallowCopyFromList(opts, data, _OPTS_EXPRESS);
+      }
+    }
+    else {
+      // Use shallowCopy so we don't pollute passed in opts obj with new vals
+      utils.shallowCopy(opts, arguments[2]);
+    }
+
+    opts.filename = filename;
+  }
+  else {
+    data = {};
+  }
+
+  return tryHandleCache(opts, data, cb);
+};
+
+/**
+ * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
+ * @public
+ */
+
+exports.clearCache = function () {
+  exports.cache.reset();
+};
+
+function Template(text, opts) {
+  opts = opts || {};
+  var options = {};
+  this.templateText = text;
+  this.mode = null;
+  this.truncate = false;
+  this.currentLine = 1;
+  this.source = '';
+  this.dependencies = [];
+  options.client = opts.client || false;
+  options.escapeFunction = opts.escape || utils.escapeXML;
+  options.compileDebug = opts.compileDebug !== false;
+  options.debug = !!opts.debug;
+  options.filename = opts.filename;
+  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
+  options.strict = opts.strict || false;
+  options.context = opts.context;
+  options.cache = opts.cache || false;
+  options.rmWhitespace = opts.rmWhitespace;
+  options.root = opts.root;
+  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
+
+  if (options.strict) {
+    options._with = false;
+  }
+  else {
+    options._with = typeof opts._with != 'undefined' ? opts._with : true;
+  }
+
+  this.opts = options;
+
+  this.regex = this.createRegex();
+}
+
+Template.modes = {
+  EVAL: 'eval',
+  ESCAPED: 'escaped',
+  RAW: 'raw',
+  COMMENT: 'comment',
+  LITERAL: 'literal'
+};
+
+Template.prototype = {
+  createRegex: function () {
+    var str = _REGEX_STRING;
+    var delim = utils.escapeRegExpChars(this.opts.delimiter);
+    str = str.replace(/%/g, delim);
+    return new RegExp(str);
+  },
+
+  compile: function () {
+    var src;
+    var fn;
+    var opts = this.opts;
+    var prepended = '';
+    var appended = '';
+    var escapeFn = opts.escapeFunction;
+
+    if (!this.source) {
+      this.generateSource();
+      prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
+      if (opts._with !== false) {
+        prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
+        appended += '  }' + '\n';
+      }
+      appended += '  return __output.join("");' + '\n';
+      this.source = prepended + this.source + appended;
+    }
+
+    if (opts.compileDebug) {
+      src = 'var __line = 1' + '\n'
+          + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
+          + '  , __filename = ' + (opts.filename ?
+                JSON.stringify(opts.filename) : 'undefined') + ';' + '\n'
+          + 'try {' + '\n'
+          + this.source
+          + '} catch (e) {' + '\n'
+          + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
+          + '}' + '\n';
+    }
+    else {
+      src = this.source;
+    }
+
+    if (opts.debug) {
+      console.log(src);
+    }
+
+    if (opts.client) {
+      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
+      if (opts.compileDebug) {
+        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
+      }
+    }
+
+    if (opts.strict) {
+      src = '"use strict";\n' + src;
+    }
+
+    try {
+      fn = new Function(opts.localsName + ', escapeFn, include, rethrow', src);
+    }
+    catch(e) {
+      // istanbul ignore else
+      if (e instanceof SyntaxError) {
+        if (opts.filename) {
+          e.message += ' in ' + opts.filename;
+        }
+        e.message += ' while compiling ejs\n\n';
+        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
+        e.message += 'https://github.com/RyanZim/EJS-Lint';
+      }
+      throw e;
+    }
+
+    if (opts.client) {
+      fn.dependencies = this.dependencies;
+      return fn;
+    }
+
+    // Return a callable function which will execute the function
+    // created by the source-code, with the passed data as locals
+    // Adds a local `include` function which allows full recursive include
+    var returnedFn = function (data) {
+      var include = function (path, includeData) {
+        var d = utils.shallowCopy({}, data);
+        if (includeData) {
+          d = utils.shallowCopy(d, includeData);
+        }
+        return includeFile(path, opts)(d);
+      };
+      return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
+    };
+    returnedFn.dependencies = this.dependencies;
+    return returnedFn;
+  },
+
+  generateSource: function () {
+    var opts = this.opts;
+
+    if (opts.rmWhitespace) {
+      // Have to use two separate replace here as `^` and `$` operators don't
+      // work well with `\r`.
+      this.templateText =
+        this.templateText.replace(/\r/g, '').replace(/^\s+|\s+$/gm, '');
+    }
+
+    // Slurp spaces and tabs before <%_ and after _%>
+    this.templateText =
+      this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');
+
+    var self = this;
+    var matches = this.parseTemplateText();
+    var d = this.opts.delimiter;
+
+    if (matches && matches.length) {
+      matches.forEach(function (line, index) {
+        var opening;
+        var closing;
+        var include;
+        var includeOpts;
+        var includeObj;
+        var includeSrc;
+        // If this is an opening tag, check for closing tags
+        // FIXME: May end up with some false positives here
+        // Better to store modes as k/v with '<' + delimiter as key
+        // Then this can simply check against the map
+        if ( line.indexOf('<' + d) === 0        // If it is a tag
+          && line.indexOf('<' + d + d) !== 0) { // and is not escaped
+          closing = matches[index + 2];
+          if (!(closing == d + '>' || closing == '-' + d + '>' || closing == '_' + d + '>')) {
+            throw new Error('Could not find matching close tag for "' + line + '".');
+          }
+        }
+        // HACK: backward-compat `include` preprocessor directives
+        if ((include = line.match(/^\s*include\s+(\S+)/))) {
+          opening = matches[index - 1];
+          // Must be in EVAL or RAW mode
+          if (opening && (opening == '<' + d || opening == '<' + d + '-' || opening == '<' + d + '_')) {
+            includeOpts = utils.shallowCopy({}, self.opts);
+            includeObj = includeSource(include[1], includeOpts);
+            if (self.opts.compileDebug) {
+              includeSrc =
+                  '    ; (function(){' + '\n'
+                  + '      var __line = 1' + '\n'
+                  + '      , __lines = ' + JSON.stringify(includeObj.template) + '\n'
+                  + '      , __filename = ' + JSON.stringify(includeObj.filename) + ';' + '\n'
+                  + '      try {' + '\n'
+                  + includeObj.source
+                  + '      } catch (e) {' + '\n'
+                  + '        rethrow(e, __lines, __filename, __line);' + '\n'
+                  + '      }' + '\n'
+                  + '    ; }).call(this)' + '\n';
+            }else{
+              includeSrc = '    ; (function(){' + '\n' + includeObj.source +
+                  '    ; }).call(this)' + '\n';
+            }
+            self.source += includeSrc;
+            self.dependencies.push(exports.resolveInclude(include[1],
+                includeOpts.filename));
+            return;
+          }
+        }
+        self.scanLine(line);
+      });
+    }
+
+  },
+
+  parseTemplateText: function () {
+    var str = this.templateText;
+    var pat = this.regex;
+    var result = pat.exec(str);
+    var arr = [];
+    var firstPos;
+
+    while (result) {
+      firstPos = result.index;
+
+      if (firstPos !== 0) {
+        arr.push(str.substring(0, firstPos));
+        str = str.slice(firstPos);
+      }
+
+      arr.push(result[0]);
+      str = str.slice(result[0].length);
+      result = pat.exec(str);
+    }
+
+    if (str) {
+      arr.push(str);
+    }
+
+    return arr;
+  },
+
+  scanLine: function (line) {
+    var self = this;
+    var d = this.opts.delimiter;
+    var newLineCount = 0;
+
+    function _addOutput() {
+      if (self.truncate) {
+        // Only replace single leading linebreak in the line after
+        // -%> tag -- this is the single, trailing linebreak
+        // after the tag that the truncation mode replaces
+        // Handle Win / Unix / old Mac linebreaks -- do the \r\n
+        // combo first in the regex-or
+        line = line.replace(/^(?:\r\n|\r|\n)/, '');
+        self.truncate = false;
+      }
+      else if (self.opts.rmWhitespace) {
+        // rmWhitespace has already removed trailing spaces, just need
+        // to remove linebreaks
+        line = line.replace(/^\n/, '');
+      }
+      if (!line) {
+        return;
+      }
+
+      // Preserve literal slashes
+      line = line.replace(/\\/g, '\\\\');
+
+      // Convert linebreaks
+      line = line.replace(/\n/g, '\\n');
+      line = line.replace(/\r/g, '\\r');
+
+      // Escape double-quotes
+      // - this will be the delimiter during execution
+      line = line.replace(/"/g, '\\"');
+      self.source += '    ; __append("' + line + '")' + '\n';
+    }
+
+    newLineCount = (line.split('\n').length - 1);
+
+    switch (line) {
+    case '<' + d:
+    case '<' + d + '_':
+      this.mode = Template.modes.EVAL;
+      break;
+    case '<' + d + '=':
+      this.mode = Template.modes.ESCAPED;
+      break;
+    case '<' + d + '-':
+      this.mode = Template.modes.RAW;
+      break;
+    case '<' + d + '#':
+      this.mode = Template.modes.COMMENT;
+      break;
+    case '<' + d + d:
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace('<' + d + d, '<' + d) + '")' + '\n';
+      break;
+    case d + d + '>':
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace(d + d + '>', d + '>') + '")' + '\n';
+      break;
+    case d + '>':
+    case '-' + d + '>':
+    case '_' + d + '>':
+      if (this.mode == Template.modes.LITERAL) {
+        _addOutput();
+      }
+
+      this.mode = null;
+      this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
+      break;
+    default:
+        // In script mode, depends on type of tag
+      if (this.mode) {
+          // If '//' is found without a line break, add a line break.
+        switch (this.mode) {
+        case Template.modes.EVAL:
+        case Template.modes.ESCAPED:
+        case Template.modes.RAW:
+          if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
+            line += '\n';
+          }
+        }
+        switch (this.mode) {
+            // Just executing code
+        case Template.modes.EVAL:
+          this.source += '    ; ' + line + '\n';
+          break;
+            // Exec, esc, and output
+        case Template.modes.ESCAPED:
+          this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
+          break;
+            // Exec and output
+        case Template.modes.RAW:
+          this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
+          break;
+        case Template.modes.COMMENT:
+              // Do nothing
+          break;
+            // Literal <%% mode, append as raw output
+        case Template.modes.LITERAL:
+          _addOutput();
+          break;
+        }
+      }
+        // In string mode, just add the output
+      else {
+        _addOutput();
+      }
+    }
+
+    if (self.opts.compileDebug && newLineCount) {
+      this.currentLine += newLineCount;
+      this.source += '    ; __line = ' + this.currentLine + '\n';
+    }
+  }
+};
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * This is simply an export of {@link module:utils.escapeXML}.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @public
+ * @func
+ * */
+exports.escapeXML = utils.escapeXML;
+
+/**
+ * Express.js support.
+ *
+ * This is an alias for {@link module:ejs.renderFile}, in order to support
+ * Express.js out-of-the-box.
+ *
+ * @func
+ */
+
+exports.__express = exports.renderFile;
+
+// Add require support
+/* istanbul ignore else */
+if (require.extensions) {
+  require.extensions['.ejs'] = function (module, flnm) {
+    var filename = flnm || /* istanbul ignore next */ module.filename;
+    var options = {
+      filename: filename,
+      client: true
+    };
+    var template = fileLoader(filename).toString();
+    var fn = exports.compile(template, options);
+    module._compile('module.exports = ' + fn.toString() + ';', filename);
+  };
+}
+
+/**
+ * Version of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.VERSION = _VERSION_STRING;
+
+/**
+ * Name for detection of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.name = _NAME;
+
+/* istanbul ignore if */
+if (typeof window != 'undefined') {
+  window.ejs = exports;
+}
+
+},{"../package.json":6,"./utils":2,"fs":3,"path":4}],2:[function(require,module,exports){
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+/**
+ * Private utility functions
+ * @module utils
+ * @private
+ */
+
+'use strict';
+
+var regExpChars = /[|\\{}()[\]^$+*?.]/g;
+
+/**
+ * Escape characters reserved in regular expressions.
+ *
+ * If `string` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} string Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+exports.escapeRegExpChars = function (string) {
+  // istanbul ignore if
+  if (!string) {
+    return '';
+  }
+  return String(string).replace(regExpChars, '\\$&');
+};
+
+var _ENCODE_HTML_RULES = {
+  '&': '&amp;',
+  '<': '&lt;',
+  '>': '&gt;',
+  '"': '&#34;',
+  "'": '&#39;'
+};
+var _MATCH_HTML = /[&<>\'"]/g;
+
+function encode_char(c) {
+  return _ENCODE_HTML_RULES[c] || c;
+}
+
+/**
+ * Stringified version of constants used by {@link module:utils.escapeXML}.
+ *
+ * It is used in the process of generating {@link ClientFunction}s.
+ *
+ * @readonly
+ * @type {String}
+ */
+
+var escapeFuncStr =
+  'var _ENCODE_HTML_RULES = {\n'
++ '      "&": "&amp;"\n'
++ '    , "<": "&lt;"\n'
++ '    , ">": "&gt;"\n'
++ '    , \'"\': "&#34;"\n'
++ '    , "\'": "&#39;"\n'
++ '    }\n'
++ '  , _MATCH_HTML = /[&<>\'"]/g;\n'
++ 'function encode_char(c) {\n'
++ '  return _ENCODE_HTML_RULES[c] || c;\n'
++ '};\n';
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @implements {EscapeCallback}
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+
+exports.escapeXML = function (markup) {
+  return markup == undefined
+    ? ''
+    : String(markup)
+        .replace(_MATCH_HTML, encode_char);
+};
+exports.escapeXML.toString = function () {
+  return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
+};
+
+/**
+ * Naive copy of properties from one object to another.
+ * Does not recurse into non-scalar properties
+ * Does not check to see if the property has a value before copying
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopy = function (to, from) {
+  from = from || {};
+  for (var p in from) {
+    to[p] = from[p];
+  }
+  return to;
+};
+
+/**
+ * Naive copy of a list of key names, from one object to another.
+ * Only copies property if it is actually defined
+ * Does not recurse into non-scalar properties
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @param  {Array} list List of properties to copy
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopyFromList = function (to, from, list) {
+  for (var i = 0; i < list.length; i++) {
+    var p = list[i];
+    if (typeof from[p] != 'undefined') {
+      to[p] = from[p];
+    }
+  }
+  return to;
+};
+
+/**
+ * Simple in-process cache implementation. Does not implement limits of any
+ * sort.
+ *
+ * @implements Cache
+ * @static
+ * @private
+ */
+exports.cache = {
+  _data: {},
+  set: function (key, val) {
+    this._data[key] = val;
+  },
+  get: function (key) {
+    return this._data[key];
+  },
+  reset: function () {
+    this._data = {};
+  }
+};
+
+},{}],3:[function(require,module,exports){
+
+},{}],4:[function(require,module,exports){
+(function (process){
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+// resolves . and .. elements in a path array with directory names there
+// must be no slashes, empty elements, or device names (c:\) in the array
+// (so also no leading and trailing slashes - it does not distinguish
+// relative and absolute paths)
+function normalizeArray(parts, allowAboveRoot) {
+  // if the path tries to go above the root, `up` ends up > 0
+  var up = 0;
+  for (var i = parts.length - 1; i >= 0; i--) {
+    var last = parts[i];
+    if (last === '.') {
+      parts.splice(i, 1);
+    } else if (last === '..') {
+      parts.splice(i, 1);
+      up++;
+    } else if (up) {
+      parts.splice(i, 1);
+      up--;
+    }
+  }
+
+  // if the path is allowed to go above the root, restore leading ..s
+  if (allowAboveRoot) {
+    for (; up--; up) {
+      parts.unshift('..');
+    }
+  }
+
+  return parts;
+}
+
+// Split a filename into [root, dir, basename, ext], unix version
+// 'root' is just a slash, or nothing.
+var splitPathRe =
+    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
+var splitPath = function(filename) {
+  return splitPathRe.exec(filename).slice(1);
+};
+
+// path.resolve([from ...], to)
+// posix version
+exports.resolve = function() {
+  var resolvedPath = '',
+      resolvedAbsolute = false;
+
+  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
+    var path = (i >= 0) ? arguments[i] : process.cwd();
+
+    // Skip empty and invalid entries
+    if (typeof path !== 'string') {
+      throw new TypeError('Arguments to path.resolve must be strings');
+    } else if (!path) {
+      continue;
+    }
+
+    resolvedPath = path + '/' + resolvedPath;
+    resolvedAbsolute = path.charAt(0) === '/';
+  }
+
+  // At this point the path should be resolved to a full absolute path, but
+  // handle relative paths to be safe (might happen when process.cwd() fails)
+
+  // Normalize the path
+  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
+    return !!p;
+  }), !resolvedAbsolute).join('/');
+
+  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
+};
+
+// path.normalize(path)
+// posix version
+exports.normalize = function(path) {
+  var isAbsolute = exports.isAbsolute(path),
+      trailingSlash = substr(path, -1) === '/';
+
+  // Normalize the path
+  path = normalizeArray(filter(path.split('/'), function(p) {
+    return !!p;
+  }), !isAbsolute).join('/');
+
+  if (!path && !isAbsolute) {
+    path = '.';
+  }
+  if (path && trailingSlash) {
+    path += '/';
+  }
+
+  return (isAbsolute ? '/' : '') + path;
+};
+
+// posix version
+exports.isAbsolute = function(path) {
+  return path.charAt(0) === '/';
+};
+
+// posix version
+exports.join = function() {
+  var paths = Array.prototype.slice.call(arguments, 0);
+  return exports.normalize(filter(paths, function(p, index) {
+    if (typeof p !== 'string') {
+      throw new TypeError('Arguments to path.join must be strings');
+    }
+    return p;
+  }).join('/'));
+};
+
+
+// path.relative(from, to)
+// posix version
+exports.relative = function(from, to) {
+  from = exports.resolve(from).substr(1);
+  to = exports.resolve(to).substr(1);
+
+  function trim(arr) {
+    var start = 0;
+    for (; start < arr.length; start++) {
+      if (arr[start] !== '') break;
+    }
+
+    var end = arr.length - 1;
+    for (; end >= 0; end--) {
+      if (arr[end] !== '') break;
+    }
+
+    if (start > end) return [];
+    return arr.slice(start, end - start + 1);
+  }
+
+  var fromParts = trim(from.split('/'));
+  var toParts = trim(to.split('/'));
+
+  var length = Math.min(fromParts.length, toParts.length);
+  var samePartsLength = length;
+  for (var i = 0; i < length; i++) {
+    if (fromParts[i] !== toParts[i]) {
+      samePartsLength = i;
+      break;
+    }
+  }
+
+  var outputParts = [];
+  for (var i = samePartsLength; i < fromParts.length; i++) {
+    outputParts.push('..');
+  }
+
+  outputParts = outputParts.concat(toParts.slice(samePartsLength));
+
+  return outputParts.join('/');
+};
+
+exports.sep = '/';
+exports.delimiter = ':';
+
+exports.dirname = function(path) {
+  var result = splitPath(path),
+      root = result[0],
+      dir = result[1];
+
+  if (!root && !dir) {
+    // No dirname whatsoever
+    return '.';
+  }
+
+  if (dir) {
+    // It has a dirname, strip trailing slash
+    dir = dir.substr(0, dir.length - 1);
+  }
+
+  return root + dir;
+};
+
+
+exports.basename = function(path, ext) {
+  var f = splitPath(path)[2];
+  // TODO: make this comparison case-insensitive on windows?
+  if (ext && f.substr(-1 * ext.length) === ext) {
+    f = f.substr(0, f.length - ext.length);
+  }
+  return f;
+};
+
+
+exports.extname = function(path) {
+  return splitPath(path)[3];
+};
+
+function filter (xs, f) {
+    if (xs.filter) return xs.filter(f);
+    var res = [];
+    for (var i = 0; i < xs.length; i++) {
+        if (f(xs[i], i, xs)) res.push(xs[i]);
+    }
+    return res;
+}
+
+// String.prototype.substr - negative index don't work in IE8
+var substr = 'ab'.substr(-1) === 'b'
+    ? function (str, start, len) { return str.substr(start, len) }
+    : function (str, start, len) {
+        if (start < 0) start = str.length + start;
+        return str.substr(start, len);
+    }
+;
+
+}).call(this,require('_process'))
+},{"_process":5}],5:[function(require,module,exports){
+// shim for using process in browser
+var process = module.exports = {};
+
+// cached from whatever global is present so that test runners that stub it
+// don't break things.  But we need to wrap it in a try catch in case it is
+// wrapped in strict mode code which doesn't define any globals.  It's inside a
+// function because try/catches deoptimize in certain engines.
+
+var cachedSetTimeout;
+var cachedClearTimeout;
+
+function defaultSetTimout() {
+    throw new Error('setTimeout has not been defined');
+}
+function defaultClearTimeout () {
+    throw new Error('clearTimeout has not been defined');
+}
+(function () {
+    try {
+        if (typeof setTimeout === 'function') {
+            cachedSetTimeout = setTimeout;
+        } else {
+            cachedSetTimeout = defaultSetTimout;
+        }
+    } catch (e) {
+        cachedSetTimeout = defaultSetTimout;
+    }
+    try {
+        if (typeof clearTimeout === 'function') {
+            cachedClearTimeout = clearTimeout;
+        } else {
+            cachedClearTimeout = defaultClearTimeout;
+        }
+    } catch (e) {
+        cachedClearTimeout = defaultClearTimeout;
+    }
+} ())
+function runTimeout(fun) {
+    if (cachedSetTimeout === setTimeout) {
+        //normal enviroments in sane situations
+        return setTimeout(fun, 0);
+    }
+    // if setTimeout wasn't available but was latter defined
+    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
+        cachedSetTimeout = setTimeout;
+        return setTimeout(fun, 0);
+    }
+    try {
+        // when when somebody has screwed with setTimeout but no I.E. maddness
+        return cachedSetTimeout(fun, 0);
+    } catch(e){
+        try {
+            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
+            return cachedSetTimeout.call(null, fun, 0);
+        } catch(e){
+            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
+            return cachedSetTimeout.call(this, fun, 0);
+        }
+    }
+
+
+}
+function runClearTimeout(marker) {
+    if (cachedClearTimeout === clearTimeout) {
+        //normal enviroments in sane situations
+        return clearTimeout(marker);
+    }
+    // if clearTimeout wasn't available but was latter defined
+    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
+        cachedClearTimeout = clearTimeout;
+        return clearTimeout(marker);
+    }
+    try {
+        // when when somebody has screwed with setTimeout but no I.E. maddness
+        return cachedClearTimeout(marker);
+    } catch (e){
+        try {
+            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
+            return cachedClearTimeout.call(null, marker);
+        } catch (e){
+            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
+            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
+            return cachedClearTimeout.call(this, marker);
+        }
+    }
+
+
+
+}
+var queue = [];
+var draining = false;
+var currentQueue;
+var queueIndex = -1;
+
+function cleanUpNextTick() {
+    if (!draining || !currentQueue) {
+        return;
+    }
+    draining = false;
+    if (currentQueue.length) {
+        queue = currentQueue.concat(queue);
+    } else {
+        queueIndex = -1;
+    }
+    if (queue.length) {
+        drainQueue();
+    }
+}
+
+function drainQueue() {
+    if (draining) {
+        return;
+    }
+    var timeout = runTimeout(cleanUpNextTick);
+    draining = true;
+
+    var len = queue.length;
+    while(len) {
+        currentQueue = queue;
+        queue = [];
+        while (++queueIndex < len) {
+            if (currentQueue) {
+                currentQueue[queueIndex].run();
+            }
+        }
+        queueIndex = -1;
+        len = queue.length;
+    }
+    currentQueue = null;
+    draining = false;
+    runClearTimeout(timeout);
+}
+
+process.nextTick = function (fun) {
+    var args = new Array(arguments.length - 1);
+    if (arguments.length > 1) {
+        for (var i = 1; i < arguments.length; i++) {
+            args[i - 1] = arguments[i];
+        }
+    }
+    queue.push(new Item(fun, args));
+    if (queue.length === 1 && !draining) {
+        runTimeout(drainQueue);
+    }
+};
+
+// v8 likes predictible objects
+function Item(fun, array) {
+    this.fun = fun;
+    this.array = array;
+}
+Item.prototype.run = function () {
+    this.fun.apply(null, this.array);
+};
+process.title = 'browser';
+process.browser = true;
+process.env = {};
+process.argv = [];
+process.version = ''; // empty string to avoid regexp issues
+process.versions = {};
+
+function noop() {}
+
+process.on = noop;
+process.addListener = noop;
+process.once = noop;
+process.off = noop;
+process.removeListener = noop;
+process.removeAllListeners = noop;
+process.emit = noop;
+
+process.binding = function (name) {
+    throw new Error('process.binding is not supported');
+};
+
+process.cwd = function () { return '/' };
+process.chdir = function (dir) {
+    throw new Error('process.chdir is not supported');
+};
+process.umask = function() { return 0; };
+
+},{}],6:[function(require,module,exports){
+module.exports={
+  "name": "ejs",
+  "description": "Embedded JavaScript templates",
+  "keywords": [
+    "template",
+    "engine",
+    "ejs"
+  ],
+  "version": "2.5.5",
+  "author": "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
+  "contributors": [
+    "Timothy Gu <timothygu99@gmail.com> (https://timothygu.github.io)"
+  ],
+  "license": "Apache-2.0",
+  "main": "./lib/ejs.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/mde/ejs.git"
+  },
+  "bugs": "https://github.com/mde/ejs/issues",
+  "homepage": "https://github.com/mde/ejs",
+  "dependencies": {},
+  "devDependencies": {
+    "browserify": "^13.0.1",
+    "eslint": "^3.0.0",
+    "git-directory-deploy": "^1.5.1",
+    "istanbul": "~0.4.3",
+    "jake": "^8.0.0",
+    "jsdoc": "^3.4.0",
+    "lru-cache": "^4.0.1",
+    "mocha": "^3.0.2",
+    "uglify-js": "^2.6.2"
+  },
+  "engines": {
+    "node": ">=0.10.0"
+  },
+  "scripts": {
+    "test": "mocha",
+    "lint": "eslint \"**/*.js\" Jakefile",
+    "coverage": "istanbul cover node_modules/mocha/bin/_mocha",
+    "doc": "jake doc",
+    "devdoc": "jake doc[dev]"
+  }
+}
+
+},{}]},{},[1])(1)
+});
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/ejs.min.js b/register/npm/ejs/2.5.6/package/ejs.min.js
new file mode 100644
index 0000000..559d386
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/ejs.min.js
@@ -0,0 +1 @@
+(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ejs=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){"use strict";var fs=require("fs");var path=require("path");var utils=require("./utils");var scopeOptionWarned=false;var _VERSION_STRING=require("../package.json").version;var _DEFAULT_DELIMITER="%";var _DEFAULT_LOCALS_NAME="locals";var _NAME="ejs";var _REGEX_STRING="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";var _OPTS=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename"];var _OPTS_EXPRESS=_OPTS.concat("cache");var _BOM=/^\uFEFF/;exports.cache=utils.cache;exports.fileLoader=fs.readFileSync;exports.localsName=_DEFAULT_LOCALS_NAME;exports.resolveInclude=function(name,filename,isDir){var dirname=path.dirname;var extname=path.extname;var resolve=path.resolve;var includePath=resolve(isDir?filename:dirname(filename),name);var ext=extname(name);if(!ext){includePath+=".ejs"}return includePath};function getIncludePath(path,options){var includePath;if(path.charAt(0)=="/"){includePath=exports.resolveInclude(path.replace(/^\/*/,""),options.root||"/",true)}else{if(!options.filename){throw new Error("`include` use relative path requires the 'filename' option.")}includePath=exports.resolveInclude(path,options.filename)}return includePath}function handleCache(options,template){var func;var filename=options.filename;var hasTemplate=arguments.length>1;if(options.cache){if(!filename){throw new Error("cache option requires a filename")}func=exports.cache.get(filename);if(func){return func}if(!hasTemplate){template=fileLoader(filename).toString().replace(_BOM,"")}}else if(!hasTemplate){if(!filename){throw new Error("Internal EJS error: no file name or template "+"provided")}template=fileLoader(filename).toString().replace(_BOM,"")}func=exports.compile(template,options);if(options.cache){exports.cache.set(filename,func)}return func}function tryHandleCache(options,data,cb){var result;try{result=handleCache(options)(data)}catch(err){return cb(err)}return cb(null,result)}function fileLoader(filePath){return exports.fileLoader(filePath)}function includeFile(path,options){var opts=utils.shallowCopy({},options);opts.filename=getIncludePath(path,opts);return handleCache(opts)}function includeSource(path,options){var opts=utils.shallowCopy({},options);var includePath;var template;includePath=getIncludePath(path,opts);template=fileLoader(includePath).toString().replace(_BOM,"");opts.filename=includePath;var templ=new Template(template,opts);templ.generateSource();return{source:templ.source,filename:includePath,template:template}}function rethrow(err,str,flnm,lineno,esc){var lines=str.split("\n");var start=Math.max(lineno-3,0);var end=Math.min(lines.length,lineno+3);var filename=esc(flnm);var context=lines.slice(start,end).map(function(line,i){var curr=i+start+1;return(curr==lineno?" >> ":"    ")+curr+"| "+line}).join("\n");err.path=filename;err.message=(filename||"ejs")+":"+lineno+"\n"+context+"\n\n"+err.message;throw err}function stripSemi(str){return str.replace(/;(\s*$)/,"$1")}exports.compile=function compile(template,opts){var templ;if(opts&&opts.scope){if(!scopeOptionWarned){console.warn("`scope` option is deprecated and will be removed in EJS 3");scopeOptionWarned=true}if(!opts.context){opts.context=opts.scope}delete opts.scope}templ=new Template(template,opts);return templ.compile()};exports.render=function(template,d,o){var data=d||{};var opts=o||{};if(arguments.length==2){utils.shallowCopyFromList(opts,data,_OPTS)}return handleCache(opts,template)(data)};exports.renderFile=function(){var filename=arguments[0];var cb=arguments[arguments.length-1];var opts={filename:filename};var data;if(arguments.length>2){data=arguments[1];if(arguments.length===3){if(data.settings&&data.settings["view options"]){utils.shallowCopyFromList(opts,data.settings["view options"],_OPTS_EXPRESS)}else{utils.shallowCopyFromList(opts,data,_OPTS_EXPRESS)}}else{utils.shallowCopy(opts,arguments[2])}opts.filename=filename}else{data={}}return tryHandleCache(opts,data,cb)};exports.clearCache=function(){exports.cache.reset()};function Template(text,opts){opts=opts||{};var options={};this.templateText=text;this.mode=null;this.truncate=false;this.currentLine=1;this.source="";this.dependencies=[];options.client=opts.client||false;options.escapeFunction=opts.escape||utils.escapeXML;options.compileDebug=opts.compileDebug!==false;options.debug=!!opts.debug;options.filename=opts.filename;options.delimiter=opts.delimiter||exports.delimiter||_DEFAULT_DELIMITER;options.strict=opts.strict||false;options.context=opts.context;options.cache=opts.cache||false;options.rmWhitespace=opts.rmWhitespace;options.root=opts.root;options.localsName=opts.localsName||exports.localsName||_DEFAULT_LOCALS_NAME;if(options.strict){options._with=false}else{options._with=typeof opts._with!="undefined"?opts._with:true}this.opts=options;this.regex=this.createRegex()}Template.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"};Template.prototype={createRegex:function(){var str=_REGEX_STRING;var delim=utils.escapeRegExpChars(this.opts.delimiter);str=str.replace(/%/g,delim);return new RegExp(str)},compile:function(){var src;var fn;var opts=this.opts;var prepended="";var appended="";var escapeFn=opts.escapeFunction;if(!this.source){this.generateSource();prepended+="  var __output = [], __append = __output.push.bind(__output);"+"\n";if(opts._with!==false){prepended+="  with ("+opts.localsName+" || {}) {"+"\n";appended+="  }"+"\n"}appended+='  return __output.join("");'+"\n";this.source=prepended+this.source+appended}if(opts.compileDebug){src="var __line = 1"+"\n"+"  , __lines = "+JSON.stringify(this.templateText)+"\n"+"  , __filename = "+(opts.filename?JSON.stringify(opts.filename):"undefined")+";"+"\n"+"try {"+"\n"+this.source+"} catch (e) {"+"\n"+"  rethrow(e, __lines, __filename, __line, escapeFn);"+"\n"+"}"+"\n"}else{src=this.source}if(opts.debug){console.log(src)}if(opts.client){src="escapeFn = escapeFn || "+escapeFn.toString()+";"+"\n"+src;if(opts.compileDebug){src="rethrow = rethrow || "+rethrow.toString()+";"+"\n"+src}}if(opts.strict){src='"use strict";\n'+src}try{fn=new Function(opts.localsName+", escapeFn, include, rethrow",src)}catch(e){if(e instanceof SyntaxError){if(opts.filename){e.message+=" in "+opts.filename}e.message+=" while compiling ejs\n\n";e.message+="If the above error is not helpful, you may want to try EJS-Lint:\n";e.message+="https://github.com/RyanZim/EJS-Lint"}throw e}if(opts.client){fn.dependencies=this.dependencies;return fn}var returnedFn=function(data){var include=function(path,includeData){var d=utils.shallowCopy({},data);if(includeData){d=utils.shallowCopy(d,includeData)}return includeFile(path,opts)(d)};return fn.apply(opts.context,[data||{},escapeFn,include,rethrow])};returnedFn.dependencies=this.dependencies;return returnedFn},generateSource:function(){var opts=this.opts;if(opts.rmWhitespace){this.templateText=this.templateText.replace(/\r/g,"").replace(/^\s+|\s+$/gm,"")}this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var self=this;var matches=this.parseTemplateText();var d=this.opts.delimiter;if(matches&&matches.length){matches.forEach(function(line,index){var opening;var closing;var include;var includeOpts;var includeObj;var includeSrc;if(line.indexOf("<"+d)===0&&line.indexOf("<"+d+d)!==0){closing=matches[index+2];if(!(closing==d+">"||closing=="-"+d+">"||closing=="_"+d+">")){throw new Error('Could not find matching close tag for "'+line+'".')}}if(include=line.match(/^\s*include\s+(\S+)/)){opening=matches[index-1];if(opening&&(opening=="<"+d||opening=="<"+d+"-"||opening=="<"+d+"_")){includeOpts=utils.shallowCopy({},self.opts);includeObj=includeSource(include[1],includeOpts);if(self.opts.compileDebug){includeSrc="    ; (function(){"+"\n"+"      var __line = 1"+"\n"+"      , __lines = "+JSON.stringify(includeObj.template)+"\n"+"      , __filename = "+JSON.stringify(includeObj.filename)+";"+"\n"+"      try {"+"\n"+includeObj.source+"      } catch (e) {"+"\n"+"        rethrow(e, __lines, __filename, __line);"+"\n"+"      }"+"\n"+"    ; }).call(this)"+"\n"}else{includeSrc="    ; (function(){"+"\n"+includeObj.source+"    ; }).call(this)"+"\n"}self.source+=includeSrc;self.dependencies.push(exports.resolveInclude(include[1],includeOpts.filename));return}}self.scanLine(line)})}},parseTemplateText:function(){var str=this.templateText;var pat=this.regex;var result=pat.exec(str);var arr=[];var firstPos;while(result){firstPos=result.index;if(firstPos!==0){arr.push(str.substring(0,firstPos));str=str.slice(firstPos)}arr.push(result[0]);str=str.slice(result[0].length);result=pat.exec(str)}if(str){arr.push(str)}return arr},scanLine:function(line){var self=this;var d=this.opts.delimiter;var newLineCount=0;function _addOutput(){if(self.truncate){line=line.replace(/^(?:\r\n|\r|\n)/,"");self.truncate=false}else if(self.opts.rmWhitespace){line=line.replace(/^\n/,"")}if(!line){return}line=line.replace(/\\/g,"\\\\");line=line.replace(/\n/g,"\\n");line=line.replace(/\r/g,"\\r");line=line.replace(/"/g,'\\"');self.source+='    ; __append("'+line+'")'+"\n"}newLineCount=line.split("\n").length-1;switch(line){case"<"+d:case"<"+d+"_":this.mode=Template.modes.EVAL;break;case"<"+d+"=":this.mode=Template.modes.ESCAPED;break;case"<"+d+"-":this.mode=Template.modes.RAW;break;case"<"+d+"#":this.mode=Template.modes.COMMENT;break;case"<"+d+d:this.mode=Template.modes.LITERAL;this.source+='    ; __append("'+line.replace("<"+d+d,"<"+d)+'")'+"\n";break;case d+d+">":this.mode=Template.modes.LITERAL;this.source+='    ; __append("'+line.replace(d+d+">",d+">")+'")'+"\n";break;case d+">":case"-"+d+">":case"_"+d+">":if(this.mode==Template.modes.LITERAL){_addOutput()}this.mode=null;this.truncate=line.indexOf("-")===0||line.indexOf("_")===0;break;default:if(this.mode){switch(this.mode){case Template.modes.EVAL:case Template.modes.ESCAPED:case Template.modes.RAW:if(line.lastIndexOf("//")>line.lastIndexOf("\n")){line+="\n"}}switch(this.mode){case Template.modes.EVAL:this.source+="    ; "+line+"\n";break;case Template.modes.ESCAPED:this.source+="    ; __append(escapeFn("+stripSemi(line)+"))"+"\n";break;case Template.modes.RAW:this.source+="    ; __append("+stripSemi(line)+")"+"\n";break;case Template.modes.COMMENT:break;case Template.modes.LITERAL:_addOutput();break}}else{_addOutput()}}if(self.opts.compileDebug&&newLineCount){this.currentLine+=newLineCount;this.source+="    ; __line = "+this.currentLine+"\n"}}};exports.escapeXML=utils.escapeXML;exports.__express=exports.renderFile;if(require.extensions){require.extensions[".ejs"]=function(module,flnm){var filename=flnm||module.filename;var options={filename:filename,client:true};var template=fileLoader(filename).toString();var fn=exports.compile(template,options);module._compile("module.exports = "+fn.toString()+";",filename)}}exports.VERSION=_VERSION_STRING;exports.name=_NAME;if(typeof window!="undefined"){window.ejs=exports}},{"../package.json":6,"./utils":2,fs:3,path:4}],2:[function(require,module,exports){"use strict";var regExpChars=/[|\\{}()[\]^$+*?.]/g;exports.escapeRegExpChars=function(string){if(!string){return""}return String(string).replace(regExpChars,"\\$&")};var _ENCODE_HTML_RULES={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"};var _MATCH_HTML=/[&<>\'"]/g;function encode_char(c){return _ENCODE_HTML_RULES[c]||c}var escapeFuncStr="var _ENCODE_HTML_RULES = {\n"+'      "&": "&amp;"\n'+'    , "<": "&lt;"\n'+'    , ">": "&gt;"\n'+'    , \'"\': "&#34;"\n'+'    , "\'": "&#39;"\n'+"    }\n"+"  , _MATCH_HTML = /[&<>'\"]/g;\n"+"function encode_char(c) {\n"+"  return _ENCODE_HTML_RULES[c] || c;\n"+"};\n";exports.escapeXML=function(markup){return markup==undefined?"":String(markup).replace(_MATCH_HTML,encode_char)};exports.escapeXML.toString=function(){return Function.prototype.toString.call(this)+";\n"+escapeFuncStr};exports.shallowCopy=function(to,from){from=from||{};for(var p in from){to[p]=from[p]}return to};exports.shallowCopyFromList=function(to,from,list){for(var i=0;i<list.length;i++){var p=list[i];if(typeof from[p]!="undefined"){to[p]=from[p]}}return to};exports.cache={_data:{},set:function(key,val){this._data[key]=val},get:function(key){return this._data[key]},reset:function(){this._data={}}}},{}],3:[function(require,module,exports){},{}],4:[function(require,module,exports){(function(process){function normalizeArray(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;var splitPath=function(filename){return splitPathRe.exec(filename).slice(1)};exports.resolve=function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){continue}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=normalizeArray(filter(resolvedPath.split("/"),function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."};exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==="/";path=normalizeArray(filter(path.split("/"),function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path};exports.isAbsolute=function(path){return path.charAt(0)==="/"};exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=="string"){throw new TypeError("Arguments to path.join must be strings")}return p}).join("/"))};exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")};exports.sep="/";exports.delimiter=":";exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir};exports.basename=function(path,ext){var f=splitPath(path)[2];if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length)}return f};exports.extname=function(path){return splitPath(path)[3]};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i])}return res}var substr="ab".substr(-1)==="b"?function(str,start,len){return str.substr(start,len)}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len)}}).call(this,require("_process"))},{_process:5}],5:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},{}],6:[function(require,module,exports){module.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"2.5.5",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",contributors:["Timothy Gu <timothygu99@gmail.com> (https://timothygu.github.io)"],license:"Apache-2.0",main:"./lib/ejs.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{},devDependencies:{browserify:"^13.0.1",eslint:"^3.0.0","git-directory-deploy":"^1.5.1",istanbul:"~0.4.3",jake:"^8.0.0",jsdoc:"^3.4.0","lru-cache":"^4.0.1",mocha:"^3.0.2","uglify-js":"^2.6.2"},engines:{node:">=0.10.0"},scripts:{test:"mocha",lint:'eslint "**/*.js" Jakefile',coverage:"istanbul cover node_modules/mocha/bin/_mocha",doc:"jake doc",devdoc:"jake doc[dev]"}}},{}]},{},[1])(1)});
diff --git a/register/npm/ejs/2.5.6/package/lib/ejs.js b/register/npm/ejs/2.5.6/package/lib/ejs.js
new file mode 100644
index 0000000..b53ee78
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/lib/ejs.js
@@ -0,0 +1,841 @@
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+'use strict';
+
+/**
+ * @file Embedded JavaScript templating engine. {@link http://ejs.co}
+ * @author Matthew Eernisse <mde@fleegix.org>
+ * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
+ * @project EJS
+ * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
+ */
+
+/**
+ * EJS internal functions.
+ *
+ * Technically this "module" lies in the same file as {@link module:ejs}, for
+ * the sake of organization all the private functions re grouped into this
+ * module.
+ *
+ * @module ejs-internal
+ * @private
+ */
+
+/**
+ * Embedded JavaScript templating engine.
+ *
+ * @module ejs
+ * @public
+ */
+
+var fs = require('fs');
+var path = require('path');
+var utils = require('./utils');
+
+var scopeOptionWarned = false;
+var _VERSION_STRING = require('../package.json').version;
+var _DEFAULT_DELIMITER = '%';
+var _DEFAULT_LOCALS_NAME = 'locals';
+var _NAME = 'ejs';
+var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
+var _OPTS = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
+  'client', '_with', 'rmWhitespace', 'strict', 'filename'];
+// We don't allow 'cache' option to be passed in the data obj
+// for the normal `render` call, but this is where Express puts it
+// so we make an exception for `renderFile`
+var _OPTS_EXPRESS = _OPTS.concat('cache');
+var _BOM = /^\uFEFF/;
+
+/**
+ * EJS template function cache. This can be a LRU object from lru-cache NPM
+ * module. By default, it is {@link module:utils.cache}, a simple in-process
+ * cache that grows continuously.
+ *
+ * @type {Cache}
+ */
+
+exports.cache = utils.cache;
+
+/**
+ * Custom file loader. Useful for template preprocessing or restricting access
+ * to a certain part of the filesystem.
+ *
+ * @type {fileLoader}
+ */
+
+exports.fileLoader = fs.readFileSync;
+
+/**
+ * Name of the object containing the locals.
+ *
+ * This variable is overridden by {@link Options}`.localsName` if it is not
+ * `undefined`.
+ *
+ * @type {String}
+ * @public
+ */
+
+exports.localsName = _DEFAULT_LOCALS_NAME;
+
+/**
+ * Get the path to the included file from the parent file path and the
+ * specified path.
+ *
+ * @param {String}  name     specified path
+ * @param {String}  filename parent file path
+ * @param {Boolean} isDir    parent file path whether is directory
+ * @return {String}
+ */
+exports.resolveInclude = function(name, filename, isDir) {
+  var dirname = path.dirname;
+  var extname = path.extname;
+  var resolve = path.resolve;
+  var includePath = resolve(isDir ? filename : dirname(filename), name);
+  var ext = extname(name);
+  if (!ext) {
+    includePath += '.ejs';
+  }
+  return includePath;
+};
+
+/**
+ * Get the path to the included file by Options
+ *
+ * @param  {String}  path    specified path
+ * @param  {Options} options compilation options
+ * @return {String}
+ */
+function getIncludePath(path, options){
+  var includePath;
+  if (path.charAt(0) == '/') {
+    includePath = exports.resolveInclude(path.replace(/^\/*/,''), options.root || '/', true);
+  }
+  else {
+    if (!options.filename) {
+      throw new Error('`include` use relative path requires the \'filename\' option.');
+    }
+    includePath = exports.resolveInclude(path, options.filename);
+  }
+  return includePath;
+}
+
+/**
+ * Get the template from a string or a file, either compiled on-the-fly or
+ * read from cache (if enabled), and cache the template if needed.
+ *
+ * If `template` is not set, the file specified in `options.filename` will be
+ * read.
+ *
+ * If `options.cache` is true, this function reads the file from
+ * `options.filename` so it must be set prior to calling this function.
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options   compilation options
+ * @param {String} [template] template source
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned.
+ * @static
+ */
+
+function handleCache(options, template) {
+  var func;
+  var filename = options.filename;
+  var hasTemplate = arguments.length > 1;
+
+  if (options.cache) {
+    if (!filename) {
+      throw new Error('cache option requires a filename');
+    }
+    func = exports.cache.get(filename);
+    if (func) {
+      return func;
+    }
+    if (!hasTemplate) {
+      template = fileLoader(filename).toString().replace(_BOM, '');
+    }
+  }
+  else if (!hasTemplate) {
+    // istanbul ignore if: should not happen at all
+    if (!filename) {
+      throw new Error('Internal EJS error: no file name or template '
+                    + 'provided');
+    }
+    template = fileLoader(filename).toString().replace(_BOM, '');
+  }
+  func = exports.compile(template, options);
+  if (options.cache) {
+    exports.cache.set(filename, func);
+  }
+  return func;
+}
+
+/**
+ * Try calling handleCache with the given options and data and call the
+ * callback with the result. If an error occurs, call the callback with
+ * the error. Used by renderFile().
+ *
+ * @memberof module:ejs-internal
+ * @param {Options} options    compilation options
+ * @param {Object} data        template data
+ * @param {RenderFileCallback} cb callback
+ * @static
+ */
+
+function tryHandleCache(options, data, cb) {
+  var result;
+  try {
+    result = handleCache(options)(data);
+  }
+  catch (err) {
+    return cb(err);
+  }
+  return cb(null, result);
+}
+
+/**
+ * fileLoader is independent
+ *
+ * @param {String} filePath ejs file path.
+ * @return {String} The contents of the specified file.
+ * @static
+ */
+
+function fileLoader(filePath){
+  return exports.fileLoader(filePath);
+}
+
+/**
+ * Get the template function.
+ *
+ * If `options.cache` is `true`, then the template is cached.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `options.client`, either type might be returned
+ * @static
+ */
+
+function includeFile(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  opts.filename = getIncludePath(path, opts);
+  return handleCache(opts);
+}
+
+/**
+ * Get the JavaScript source of an included file.
+ *
+ * @memberof module:ejs-internal
+ * @param {String}  path    path for the specified file
+ * @param {Options} options compilation options
+ * @return {Object}
+ * @static
+ */
+
+function includeSource(path, options) {
+  var opts = utils.shallowCopy({}, options);
+  var includePath;
+  var template;
+  includePath = getIncludePath(path, opts);
+  template = fileLoader(includePath).toString().replace(_BOM, '');
+  opts.filename = includePath;
+  var templ = new Template(template, opts);
+  templ.generateSource();
+  return {
+    source: templ.source,
+    filename: includePath,
+    template: template
+  };
+}
+
+/**
+ * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
+ * `lineno`.
+ *
+ * @implements RethrowCallback
+ * @memberof module:ejs-internal
+ * @param {Error}  err      Error object
+ * @param {String} str      EJS source
+ * @param {String} filename file name of the EJS file
+ * @param {String} lineno   line number of the error
+ * @static
+ */
+
+function rethrow(err, str, flnm, lineno, esc){
+  var lines = str.split('\n');
+  var start = Math.max(lineno - 3, 0);
+  var end = Math.min(lines.length, lineno + 3);
+  var filename = esc(flnm); // eslint-disable-line
+  // Error context
+  var context = lines.slice(start, end).map(function (line, i){
+    var curr = i + start + 1;
+    return (curr == lineno ? ' >> ' : '    ')
+      + curr
+      + '| '
+      + line;
+  }).join('\n');
+
+  // Alter exception message
+  err.path = filename;
+  err.message = (filename || 'ejs') + ':'
+    + lineno + '\n'
+    + context + '\n\n'
+    + err.message;
+
+  throw err;
+}
+
+function stripSemi(str){
+  return str.replace(/;(\s*$)/, '$1');
+}
+
+/**
+ * Compile the given `str` of ejs into a template function.
+ *
+ * @param {String}  template EJS template
+ *
+ * @param {Options} opts     compilation options
+ *
+ * @return {(TemplateFunction|ClientFunction)}
+ * Depending on the value of `opts.client`, either type might be returned.
+ * @public
+ */
+
+exports.compile = function compile(template, opts) {
+  var templ;
+
+  // v1 compat
+  // 'scope' is 'context'
+  // FIXME: Remove this in a future version
+  if (opts && opts.scope) {
+    if (!scopeOptionWarned){
+      console.warn('`scope` option is deprecated and will be removed in EJS 3');
+      scopeOptionWarned = true;
+    }
+    if (!opts.context) {
+      opts.context = opts.scope;
+    }
+    delete opts.scope;
+  }
+  templ = new Template(template, opts);
+  return templ.compile();
+};
+
+/**
+ * Render the given `template` of ejs.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}   template EJS template
+ * @param {Object}  [data={}] template data
+ * @param {Options} [opts={}] compilation and rendering options
+ * @return {String}
+ * @public
+ */
+
+exports.render = function (template, d, o) {
+  var data = d || {};
+  var opts = o || {};
+
+  // No options object -- if there are optiony names
+  // in the data, copy them to options
+  if (arguments.length == 2) {
+    utils.shallowCopyFromList(opts, data, _OPTS);
+  }
+
+  return handleCache(opts, template)(data);
+};
+
+/**
+ * Render an EJS file at the given `path` and callback `cb(err, str)`.
+ *
+ * If you would like to include options but not data, you need to explicitly
+ * call this function with `data` being an empty object or `null`.
+ *
+ * @param {String}             path     path to the EJS file
+ * @param {Object}            [data={}] template data
+ * @param {Options}           [opts={}] compilation and rendering options
+ * @param {RenderFileCallback} cb callback
+ * @public
+ */
+
+exports.renderFile = function () {
+  var filename = arguments[0];
+  var cb = arguments[arguments.length - 1];
+  var opts = {filename: filename};
+  var data;
+
+  if (arguments.length > 2) {
+    data = arguments[1];
+
+    // No options object -- if there are optiony names
+    // in the data, copy them to options
+    if (arguments.length === 3) {
+      // Express 4
+      if (data.settings && data.settings['view options']) {
+        utils.shallowCopyFromList(opts, data.settings['view options'], _OPTS_EXPRESS);
+      }
+      // Express 3 and lower
+      else {
+        utils.shallowCopyFromList(opts, data, _OPTS_EXPRESS);
+      }
+    }
+    else {
+      // Use shallowCopy so we don't pollute passed in opts obj with new vals
+      utils.shallowCopy(opts, arguments[2]);
+    }
+
+    opts.filename = filename;
+  }
+  else {
+    data = {};
+  }
+
+  return tryHandleCache(opts, data, cb);
+};
+
+/**
+ * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
+ * @public
+ */
+
+exports.clearCache = function () {
+  exports.cache.reset();
+};
+
+function Template(text, opts) {
+  opts = opts || {};
+  var options = {};
+  this.templateText = text;
+  this.mode = null;
+  this.truncate = false;
+  this.currentLine = 1;
+  this.source = '';
+  this.dependencies = [];
+  options.client = opts.client || false;
+  options.escapeFunction = opts.escape || utils.escapeXML;
+  options.compileDebug = opts.compileDebug !== false;
+  options.debug = !!opts.debug;
+  options.filename = opts.filename;
+  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
+  options.strict = opts.strict || false;
+  options.context = opts.context;
+  options.cache = opts.cache || false;
+  options.rmWhitespace = opts.rmWhitespace;
+  options.root = opts.root;
+  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
+
+  if (options.strict) {
+    options._with = false;
+  }
+  else {
+    options._with = typeof opts._with != 'undefined' ? opts._with : true;
+  }
+
+  this.opts = options;
+
+  this.regex = this.createRegex();
+}
+
+Template.modes = {
+  EVAL: 'eval',
+  ESCAPED: 'escaped',
+  RAW: 'raw',
+  COMMENT: 'comment',
+  LITERAL: 'literal'
+};
+
+Template.prototype = {
+  createRegex: function () {
+    var str = _REGEX_STRING;
+    var delim = utils.escapeRegExpChars(this.opts.delimiter);
+    str = str.replace(/%/g, delim);
+    return new RegExp(str);
+  },
+
+  compile: function () {
+    var src;
+    var fn;
+    var opts = this.opts;
+    var prepended = '';
+    var appended = '';
+    var escapeFn = opts.escapeFunction;
+
+    if (!this.source) {
+      this.generateSource();
+      prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
+      if (opts._with !== false) {
+        prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
+        appended += '  }' + '\n';
+      }
+      appended += '  return __output.join("");' + '\n';
+      this.source = prepended + this.source + appended;
+    }
+
+    if (opts.compileDebug) {
+      src = 'var __line = 1' + '\n'
+          + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
+          + '  , __filename = ' + (opts.filename ?
+                JSON.stringify(opts.filename) : 'undefined') + ';' + '\n'
+          + 'try {' + '\n'
+          + this.source
+          + '} catch (e) {' + '\n'
+          + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
+          + '}' + '\n';
+    }
+    else {
+      src = this.source;
+    }
+
+    if (opts.debug) {
+      console.log(src);
+    }
+
+    if (opts.client) {
+      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
+      if (opts.compileDebug) {
+        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
+      }
+    }
+
+    if (opts.strict) {
+      src = '"use strict";\n' + src;
+    }
+
+    try {
+      fn = new Function(opts.localsName + ', escapeFn, include, rethrow', src);
+    }
+    catch(e) {
+      // istanbul ignore else
+      if (e instanceof SyntaxError) {
+        if (opts.filename) {
+          e.message += ' in ' + opts.filename;
+        }
+        e.message += ' while compiling ejs\n\n';
+        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
+        e.message += 'https://github.com/RyanZim/EJS-Lint';
+      }
+      throw e;
+    }
+
+    if (opts.client) {
+      fn.dependencies = this.dependencies;
+      return fn;
+    }
+
+    // Return a callable function which will execute the function
+    // created by the source-code, with the passed data as locals
+    // Adds a local `include` function which allows full recursive include
+    var returnedFn = function (data) {
+      var include = function (path, includeData) {
+        var d = utils.shallowCopy({}, data);
+        if (includeData) {
+          d = utils.shallowCopy(d, includeData);
+        }
+        return includeFile(path, opts)(d);
+      };
+      return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
+    };
+    returnedFn.dependencies = this.dependencies;
+    return returnedFn;
+  },
+
+  generateSource: function () {
+    var opts = this.opts;
+
+    if (opts.rmWhitespace) {
+      // Have to use two separate replace here as `^` and `$` operators don't
+      // work well with `\r`.
+      this.templateText =
+        this.templateText.replace(/\r/g, '').replace(/^\s+|\s+$/gm, '');
+    }
+
+    // Slurp spaces and tabs before <%_ and after _%>
+    this.templateText =
+      this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');
+
+    var self = this;
+    var matches = this.parseTemplateText();
+    var d = this.opts.delimiter;
+
+    if (matches && matches.length) {
+      matches.forEach(function (line, index) {
+        var opening;
+        var closing;
+        var include;
+        var includeOpts;
+        var includeObj;
+        var includeSrc;
+        // If this is an opening tag, check for closing tags
+        // FIXME: May end up with some false positives here
+        // Better to store modes as k/v with '<' + delimiter as key
+        // Then this can simply check against the map
+        if ( line.indexOf('<' + d) === 0        // If it is a tag
+          && line.indexOf('<' + d + d) !== 0) { // and is not escaped
+          closing = matches[index + 2];
+          if (!(closing == d + '>' || closing == '-' + d + '>' || closing == '_' + d + '>')) {
+            throw new Error('Could not find matching close tag for "' + line + '".');
+          }
+        }
+        // HACK: backward-compat `include` preprocessor directives
+        if ((include = line.match(/^\s*include\s+(\S+)/))) {
+          opening = matches[index - 1];
+          // Must be in EVAL or RAW mode
+          if (opening && (opening == '<' + d || opening == '<' + d + '-' || opening == '<' + d + '_')) {
+            includeOpts = utils.shallowCopy({}, self.opts);
+            includeObj = includeSource(include[1], includeOpts);
+            if (self.opts.compileDebug) {
+              includeSrc =
+                  '    ; (function(){' + '\n'
+                  + '      var __line = 1' + '\n'
+                  + '      , __lines = ' + JSON.stringify(includeObj.template) + '\n'
+                  + '      , __filename = ' + JSON.stringify(includeObj.filename) + ';' + '\n'
+                  + '      try {' + '\n'
+                  + includeObj.source
+                  + '      } catch (e) {' + '\n'
+                  + '        rethrow(e, __lines, __filename, __line);' + '\n'
+                  + '      }' + '\n'
+                  + '    ; }).call(this)' + '\n';
+            }else{
+              includeSrc = '    ; (function(){' + '\n' + includeObj.source +
+                  '    ; }).call(this)' + '\n';
+            }
+            self.source += includeSrc;
+            self.dependencies.push(exports.resolveInclude(include[1],
+                includeOpts.filename));
+            return;
+          }
+        }
+        self.scanLine(line);
+      });
+    }
+
+  },
+
+  parseTemplateText: function () {
+    var str = this.templateText;
+    var pat = this.regex;
+    var result = pat.exec(str);
+    var arr = [];
+    var firstPos;
+
+    while (result) {
+      firstPos = result.index;
+
+      if (firstPos !== 0) {
+        arr.push(str.substring(0, firstPos));
+        str = str.slice(firstPos);
+      }
+
+      arr.push(result[0]);
+      str = str.slice(result[0].length);
+      result = pat.exec(str);
+    }
+
+    if (str) {
+      arr.push(str);
+    }
+
+    return arr;
+  },
+
+  scanLine: function (line) {
+    var self = this;
+    var d = this.opts.delimiter;
+    var newLineCount = 0;
+
+    function _addOutput() {
+      if (self.truncate) {
+        // Only replace single leading linebreak in the line after
+        // -%> tag -- this is the single, trailing linebreak
+        // after the tag that the truncation mode replaces
+        // Handle Win / Unix / old Mac linebreaks -- do the \r\n
+        // combo first in the regex-or
+        line = line.replace(/^(?:\r\n|\r|\n)/, '');
+        self.truncate = false;
+      }
+      else if (self.opts.rmWhitespace) {
+        // rmWhitespace has already removed trailing spaces, just need
+        // to remove linebreaks
+        line = line.replace(/^\n/, '');
+      }
+      if (!line) {
+        return;
+      }
+
+      // Preserve literal slashes
+      line = line.replace(/\\/g, '\\\\');
+
+      // Convert linebreaks
+      line = line.replace(/\n/g, '\\n');
+      line = line.replace(/\r/g, '\\r');
+
+      // Escape double-quotes
+      // - this will be the delimiter during execution
+      line = line.replace(/"/g, '\\"');
+      self.source += '    ; __append("' + line + '")' + '\n';
+    }
+
+    newLineCount = (line.split('\n').length - 1);
+
+    switch (line) {
+    case '<' + d:
+    case '<' + d + '_':
+      this.mode = Template.modes.EVAL;
+      break;
+    case '<' + d + '=':
+      this.mode = Template.modes.ESCAPED;
+      break;
+    case '<' + d + '-':
+      this.mode = Template.modes.RAW;
+      break;
+    case '<' + d + '#':
+      this.mode = Template.modes.COMMENT;
+      break;
+    case '<' + d + d:
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace('<' + d + d, '<' + d) + '")' + '\n';
+      break;
+    case d + d + '>':
+      this.mode = Template.modes.LITERAL;
+      this.source += '    ; __append("' + line.replace(d + d + '>', d + '>') + '")' + '\n';
+      break;
+    case d + '>':
+    case '-' + d + '>':
+    case '_' + d + '>':
+      if (this.mode == Template.modes.LITERAL) {
+        _addOutput();
+      }
+
+      this.mode = null;
+      this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
+      break;
+    default:
+        // In script mode, depends on type of tag
+      if (this.mode) {
+          // If '//' is found without a line break, add a line break.
+        switch (this.mode) {
+        case Template.modes.EVAL:
+        case Template.modes.ESCAPED:
+        case Template.modes.RAW:
+          if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
+            line += '\n';
+          }
+        }
+        switch (this.mode) {
+            // Just executing code
+        case Template.modes.EVAL:
+          this.source += '    ; ' + line + '\n';
+          break;
+            // Exec, esc, and output
+        case Template.modes.ESCAPED:
+          this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
+          break;
+            // Exec and output
+        case Template.modes.RAW:
+          this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
+          break;
+        case Template.modes.COMMENT:
+              // Do nothing
+          break;
+            // Literal <%% mode, append as raw output
+        case Template.modes.LITERAL:
+          _addOutput();
+          break;
+        }
+      }
+        // In string mode, just add the output
+      else {
+        _addOutput();
+      }
+    }
+
+    if (self.opts.compileDebug && newLineCount) {
+      this.currentLine += newLineCount;
+      this.source += '    ; __line = ' + this.currentLine + '\n';
+    }
+  }
+};
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * This is simply an export of {@link module:utils.escapeXML}.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @public
+ * @func
+ * */
+exports.escapeXML = utils.escapeXML;
+
+/**
+ * Express.js support.
+ *
+ * This is an alias for {@link module:ejs.renderFile}, in order to support
+ * Express.js out-of-the-box.
+ *
+ * @func
+ */
+
+exports.__express = exports.renderFile;
+
+// Add require support
+/* istanbul ignore else */
+if (require.extensions) {
+  require.extensions['.ejs'] = function (module, flnm) {
+    var filename = flnm || /* istanbul ignore next */ module.filename;
+    var options = {
+      filename: filename,
+      client: true
+    };
+    var template = fileLoader(filename).toString();
+    var fn = exports.compile(template, options);
+    module._compile('module.exports = ' + fn.toString() + ';', filename);
+  };
+}
+
+/**
+ * Version of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.VERSION = _VERSION_STRING;
+
+/**
+ * Name for detection of EJS.
+ *
+ * @readonly
+ * @type {String}
+ * @public
+ */
+
+exports.name = _NAME;
+
+/* istanbul ignore if */
+if (typeof window != 'undefined') {
+  window.ejs = exports;
+}
diff --git a/register/npm/ejs/2.5.6/package/lib/utils.js b/register/npm/ejs/2.5.6/package/lib/utils.js
new file mode 100644
index 0000000..1b539da
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/lib/utils.js
@@ -0,0 +1,164 @@
+/*
+ * EJS Embedded JavaScript templates
+ * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+*/
+
+/**
+ * Private utility functions
+ * @module utils
+ * @private
+ */
+
+'use strict';
+
+var regExpChars = /[|\\{}()[\]^$+*?.]/g;
+
+/**
+ * Escape characters reserved in regular expressions.
+ *
+ * If `string` is `undefined` or `null`, the empty string is returned.
+ *
+ * @param {String} string Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+exports.escapeRegExpChars = function (string) {
+  // istanbul ignore if
+  if (!string) {
+    return '';
+  }
+  return String(string).replace(regExpChars, '\\$&');
+};
+
+var _ENCODE_HTML_RULES = {
+  '&': '&amp;',
+  '<': '&lt;',
+  '>': '&gt;',
+  '"': '&#34;',
+  "'": '&#39;'
+};
+var _MATCH_HTML = /[&<>\'"]/g;
+
+function encode_char(c) {
+  return _ENCODE_HTML_RULES[c] || c;
+}
+
+/**
+ * Stringified version of constants used by {@link module:utils.escapeXML}.
+ *
+ * It is used in the process of generating {@link ClientFunction}s.
+ *
+ * @readonly
+ * @type {String}
+ */
+
+var escapeFuncStr =
+  'var _ENCODE_HTML_RULES = {\n'
++ '      "&": "&amp;"\n'
++ '    , "<": "&lt;"\n'
++ '    , ">": "&gt;"\n'
++ '    , \'"\': "&#34;"\n'
++ '    , "\'": "&#39;"\n'
++ '    }\n'
++ '  , _MATCH_HTML = /[&<>\'"]/g;\n'
++ 'function encode_char(c) {\n'
++ '  return _ENCODE_HTML_RULES[c] || c;\n'
++ '};\n';
+
+/**
+ * Escape characters reserved in XML.
+ *
+ * If `markup` is `undefined` or `null`, the empty string is returned.
+ *
+ * @implements {EscapeCallback}
+ * @param {String} markup Input string
+ * @return {String} Escaped string
+ * @static
+ * @private
+ */
+
+exports.escapeXML = function (markup) {
+  return markup == undefined
+    ? ''
+    : String(markup)
+        .replace(_MATCH_HTML, encode_char);
+};
+exports.escapeXML.toString = function () {
+  return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
+};
+
+/**
+ * Naive copy of properties from one object to another.
+ * Does not recurse into non-scalar properties
+ * Does not check to see if the property has a value before copying
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopy = function (to, from) {
+  from = from || {};
+  for (var p in from) {
+    to[p] = from[p];
+  }
+  return to;
+};
+
+/**
+ * Naive copy of a list of key names, from one object to another.
+ * Only copies property if it is actually defined
+ * Does not recurse into non-scalar properties
+ *
+ * @param  {Object} to   Destination object
+ * @param  {Object} from Source object
+ * @param  {Array} list List of properties to copy
+ * @return {Object}      Destination object
+ * @static
+ * @private
+ */
+exports.shallowCopyFromList = function (to, from, list) {
+  for (var i = 0; i < list.length; i++) {
+    var p = list[i];
+    if (typeof from[p] != 'undefined') {
+      to[p] = from[p];
+    }
+  }
+  return to;
+};
+
+/**
+ * Simple in-process cache implementation. Does not implement limits of any
+ * sort.
+ *
+ * @implements Cache
+ * @static
+ * @private
+ */
+exports.cache = {
+  _data: {},
+  set: function (key, val) {
+    this._data[key] = val;
+  },
+  get: function (key) {
+    return this._data[key];
+  },
+  reset: function () {
+    this._data = {};
+  }
+};
diff --git a/register/npm/ejs/2.5.6/package/package.json b/register/npm/ejs/2.5.6/package/package.json
new file mode 100644
index 0000000..e6a89f3
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/package.json
@@ -0,0 +1 @@
+{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.5.6","author":{"name":"Matthew Eernisse","email":"mde@fleegix.org","url":"http://fleegix.org"},"contributors":[{"name":"Timothy Gu","email":"timothygu99@gmail.com","url":"https://timothygu.github.io"}],"license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":{"url":"https://github.com/mde/ejs/issues"},"homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.0.1","eslint":"^3.0.0","git-directory-deploy":"^1.5.1","istanbul":"~0.4.3","jake":"^8.0.0","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^3.0.2","uglify-js":"^2.6.2"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","lint":"eslint \"**/*.js\" Jakefile","coverage":"istanbul cover node_modules/mocha/bin/_mocha","doc":"jake doc","devdoc":"jake doc[dev]"},"readme":"# EJS\n\nEmbedded JavaScript templates\n\n[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)\n[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs?type=dev)\n\n## Installation\n\n```bash\n$ npm install ejs\n```\n\n## Features\n\n  * Control flow with `<% %>`\n  * Escaped output with `<%= %>` (escape function configurable)\n  * Unescaped raw output with `<%- %>`\n  * Newline-trim mode ('newline slurping') with `-%>` ending tag\n  * Whitespace-trim mode (slurp all whitespace) for control flow with `<%_ _%>`\n  * Custom delimiters (e.g., use `<? ?>` instead of `<% %>`)\n  * Includes\n  * Client-side support\n  * Static caching of intermediate JavaScript\n  * Static caching of templates\n  * Complies with the [Express](http://expressjs.com) view system\n\n## Example\n\n```html\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n```\n\nTry EJS online at: https://ionicabizau.github.io/ejs-playground/.\n\n## Usage\n\n```javascript\nvar template = ejs.compile(str, options);\ntemplate(data);\n// => Rendered HTML string\n\nejs.render(str, data, options);\n// => Rendered HTML string\n\nejs.renderFile(filename, data, options, function(err, str){\n    // str => Rendered HTML string\n});\n```\n\nIt is also possible to use `ejs.render(dataAndOptions);` where you pass\neverything in a single object. In that case, you'll end up with local variables\nfor all the passed options. However, be aware that your code could break if we\nadd an option with the same name as one of your data object's properties.\nTherefore, we do not recommend using this shortcut.\n\n## Options\n\n  - `cache`           Compiled functions are cached, requires `filename`\n  - `filename`        The name of the file being rendered. Not required if you\n    are using `renderFile()`. Used by `cache` to key caches, and for includes.\n  - `root`            Set project root for includes with an absolute path (/file.ejs).\n  - `context`         Function execution context\n  - `compileDebug`    When `false` no debug instrumentation is compiled\n  - `client`          When `true`, compiles a function that can be rendered\n    in the browser without needing to load the EJS Runtime\n    ([ejs.min.js](https://github.com/mde/ejs/releases/latest)).\n  - `delimiter`       Character to use with angle brackets for open/close\n  - `debug`           Output generated function body\n  - `strict`          When set to `true`, generated function is in strict mode\n  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object. Set to `false` in strict mode.\n  - `localsName`      Name to use for the object storing local variables when not using `with` Defaults to `locals`\n  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading\n    and trailing whitespace. It also enables a safer version of `-%>` line\n    slurping for all scriptlet tags (it does not strip new lines of tags in\n    the middle of a line).\n  - `escape`          The escaping function used with `<%=` construct. It is\n    used in rendering and is `.toString()`ed in the generation of client functions. (By default escapes XML).\n\nThis project uses [JSDoc](http://usejsdoc.org/). For the full public API\ndocumentation, clone the repository and run `npm run doc`. This will run JSDoc\nwith the proper options and output the documentation to `out/`. If you want\nthe both the public & private API docs, run `npm run devdoc` instead.\n\n## Tags\n\n  - `<%`              'Scriptlet' tag, for control-flow, no output\n  - `<%_`             'Whitespace Slurping' Scriptlet tag, strips all whitespace before it\n  - `<%=`             Outputs the value into the template (escaped)\n  - `<%-`             Outputs the unescaped value into the template\n  - `<%#`             Comment tag, no execution, no output\n  - `<%%`             Outputs a literal '<%'\n  - `%%>`             Outputs a literal '%>'\n  - `%>`              Plain ending tag\n  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline\n  - `_%>`             'Whitespace Slurping' ending tag, removes all whitespace after it\n\nFor the full syntax documentation, please see [docs/syntax.md](https://github.com/mde/ejs/blob/master/docs/syntax.md).\n\n## Includes\n\nIncludes either have to be an absolute path, or, if not, are assumed as\nrelative to the template with the `include` call. For example if you are\nincluding `./views/user/show.ejs` from `./views/users.ejs` you would\nuse `<%- include('user/show') %>`.\n\nYou must specify the `filename` option for the template with the `include`\ncall unless you are using `renderFile()`.\n\nYou'll likely want to use the raw output tag (`<%-`) with your include to avoid\ndouble-escaping the HTML output.\n\n```html\n<ul>\n  <% users.forEach(function(user){ %>\n    <%- include('user/show', {user: user}) %>\n  <% }); %>\n</ul>\n```\n\nIncludes are inserted at runtime, so you can use variables for the path in the\n`include` call (for example `<%- include(somePath) %>`). Variables in your\ntop-level data object are available to all your includes, but local variables\nneed to be passed down.\n\nNOTE: Include preprocessor directives (`<% include user/show %>`) are\nstill supported.\n\n## Custom delimiters\n\nCustom delimiters can be applied on a per-template basis, or globally:\n\n```javascript\nvar ejs = require('ejs'),\n    users = ['geddy', 'neil', 'alex'];\n\n// Just one template\nejs.render('<?= users.join(\" | \"); ?>', {users: users}, {delimiter: '?'});\n// => 'geddy | neil | alex'\n\n// Or globally\nejs.delimiter = '$';\nejs.render('<$= users.join(\" | \"); $>', {users: users});\n// => 'geddy | neil | alex'\n```\n\n## Caching\n\nEJS ships with a basic in-process cache for caching the intermediate JavaScript\nfunctions used to render templates. It's easy to plug in LRU caching using\nNode's `lru-cache` library:\n\n```javascript\nvar ejs = require('ejs')\n  , LRU = require('lru-cache');\nejs.cache = LRU(100); // LRU cache with 100-item limit\n```\n\nIf you want to clear the EJS cache, call `ejs.clearCache`. If you're using the\nLRU cache and need a different limit, simple reset `ejs.cache` to a new instance\nof the LRU.\n\n## Custom FileLoader\n\nThe default file loader is `fs.readFileSync`, if you want to customize it, you can set ejs.fileLoader.\n\n```javascript\nvar ejs = require('ejs');\nvar myFileLoad = function (filePath) {\n  return 'myFileLoad: ' + fs.readFileSync(filePath);\n};\n\nejs.fileLoader = myFileLoad;\n```\n\nWith this feature, you can preprocess the template before reading it.\n\n## Layouts\n\nEJS does not specifically support blocks, but layouts can be implemented by\nincluding headers and footers, like so:\n\n\n```html\n<%- include('header') -%>\n<h1>\n  Title\n</h1>\n<p>\n  My page\n</p>\n<%- include('footer') -%>\n```\n\n## Client-side support\n\nGo to the [Latest Release](https://github.com/mde/ejs/releases/latest), download\n`./ejs.js` or `./ejs.min.js`. Alternately, you can compile it yourself by cloning\nthe repository and running `jake build` (or `$(npm bin)/jake build` if jake is\nnot installed globally).\n\nInclude one of these files on your page, and `ejs` should be available globally.\n\n### Example\n\n```html\n<div id=\"output\"></div>\n<script src=\"ejs.min.js\"></script>\n<script>\n  var people = ['geddy', 'neil', 'alex'],\n      html = ejs.render('<%= people.join(\", \"); %>', {people: people});\n  // With jQuery:\n  $('#output').html(html);\n  // Vanilla JS:\n  document.getElementById('output').innerHTML = html;\n</script>\n```\n\n### Caveats\n\nMost of EJS will work as expected; however, there are a few things to note:\n\n1. Obviously, since you do not have access to the filesystem, `ejs.renderFile()` won't work.\n2. For the same reason, `include`s do not work unless you use an `IncludeCallback`. Here is an example:\n  ```javascript\n  var str = \"Hello <%= include('file', {person: 'John'}); %>\",\n      fn = ejs.compile(str, {client: true});\n\n  fn(data, null, function(path, d){ // IncludeCallback\n    // path -> 'file'\n    // d -> {person: 'John'}\n    // Put your code here\n    // Return the contents of file as a string\n  }); // returns rendered string\n  ```\n\n## Related projects\n\nThere are a number of implementations of EJS:\n\n * TJ's implementation, the v1 of this library: https://github.com/tj/ejs\n * Jupiter Consulting's EJS: http://www.embeddedjs.com/\n * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/\n * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs\n * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript\n\n## License\n\nLicensed under the Apache License, Version 2.0\n(<http://www.apache.org/licenses/LICENSE-2.0>)\n\n- - -\nEJS Embedded JavaScript templates copyright 2112\nmde@fleegix.org.\n","readmeFilename":"README.md","_id":"ejs@2.5.6","_shasum":"479636bfa3fe3b1debd52087f0acb204b4f19c88","_from":"ejs@^2.5.6","_resolved":"https://registry.npmjs.org/ejs/-/ejs-2.5.6.tgz"}
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/ejs.js b/register/npm/ejs/2.5.6/package/test/ejs.js
new file mode 100644
index 0000000..8960a1e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/ejs.js
@@ -0,0 +1,1039 @@
+/* jshint mocha: true */
+/* eslint-env node, mocha */
+
+/**
+ * Module dependencies.
+ */
+
+var ejs = require('..');
+var fs = require('fs');
+var read = fs.readFileSync;
+var assert = require('assert');
+var path = require('path');
+var LRU = require('lru-cache');
+
+try {
+  fs.mkdirSync(__dirname + '/tmp');
+} catch (ex) {
+  if (ex.code !== 'EEXIST') {
+    throw ex;
+  }
+}
+
+// From https://gist.github.com/pguillory/729616
+function hook_stdio(stream, callback) {
+  var old_write = stream.write;
+
+  stream.write = (function() {
+    return function(string, encoding, fd) {
+      callback(string, encoding, fd);
+    };
+  })(stream.write);
+
+  return function() {
+    stream.write = old_write;
+  };
+}
+
+/**
+ * Load fixture `name`.
+ */
+
+function fixture(name) {
+  return read('test/fixtures/' + name, 'utf8');
+}
+
+/**
+ * User fixtures.
+ */
+
+var users = [];
+users.push({name: 'geddy'});
+users.push({name: 'neil'});
+users.push({name: 'alex'});
+
+suite('ejs.compile(str, options)', function () {
+  test('compile to a function', function () {
+    var fn = ejs.compile('<p>yay</p>');
+    assert.equal(fn(), '<p>yay</p>');
+  });
+
+  test('empty input works', function () {
+    var fn = ejs.compile('');
+    assert.equal(fn(), '');
+  });
+
+  test('throw if there are syntax errors', function () {
+    try {
+      ejs.compile(fixture('fail.ejs'));
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('compiling ejs') > -1);
+
+      try {
+        ejs.compile(fixture('fail.ejs'), {filename: 'fail.ejs'});
+      }
+      catch (err) {
+        assert.ok(err.message.indexOf('fail.ejs') > -1);
+        return;
+      }
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('allow customizing delimiter local var', function () {
+    var fn;
+    fn = ejs.compile('<p><?= name ?></p>', {delimiter: '?'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><:= name :></p>', {delimiter: ':'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><$= name $></p>', {delimiter: '$'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+  });
+
+  test('default to using ejs.delimiter', function () {
+    var fn;
+    ejs.delimiter = '&';
+    fn = ejs.compile('<p><&= name &></p>');
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+
+    fn = ejs.compile('<p><|= name |></p>', {delimiter: '|'});
+    assert.equal(fn({name: 'geddy'}), '<p>geddy</p>');
+    delete ejs.delimiter;
+  });
+
+  test('support custom escape function', function () {
+    var customEscape;
+    var fn;
+    customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+    fn = ejs.compile('HELLO <%= name %>', {escape: customEscape});
+    assert.equal(fn({name: 'world'}), 'HELLO WORLD');
+  });
+
+  test('strict mode works', function () {
+    assert.equal(ejs.render(fixture('strict.ejs'), {}, {strict: true}), 'true');
+  });
+
+});
+
+suite('client mode', function () {
+
+  test('have a working client option', function () {
+    var fn;
+    var str;
+    var preFn;
+    fn = ejs.compile('<p><%= foo %></p>', {client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn({foo: 'bar'}), '<p>bar</p>');
+    }
+  });
+
+  test('support client mode without locals', function () {
+    var fn;
+    var str;
+    var preFn;
+    fn = ejs.compile('<p><%= "foo" %></p>', {client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn(), '<p>foo</p>');
+    }
+  });
+
+  test('not include rethrow() in client mode if compileDebug is false', function () {
+    var fn = ejs.compile('<p><%= "foo" %></p>', {
+      client: true,
+      compileDebug: false
+    });
+    // There could be a `rethrow` in the function declaration
+    assert((fn.toString().match(/rethrow/g) || []).length <= 1);
+  });
+
+  test('support custom escape function in client mode', function () {
+    var customEscape;
+    var fn;
+    var str;
+    customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+    fn = ejs.compile('HELLO <%= name %>', {escape: customEscape, client: true});
+    str = fn.toString();
+    if (!process.env.running_under_istanbul) {
+      eval('var preFn = ' + str);
+      assert.equal(preFn({name: 'world'}), 'HELLO WORLD'); // eslint-disable-line no-undef
+    }
+  });
+
+  test('escape filename in errors in client mode', function () {
+    assert.throws(function () {
+      var fn = ejs.compile('<% throw new Error("whoops"); %>', {client: true, filename: '<script>'});
+      fn();
+    }, /Error: &lt;script&gt;/);
+  });
+});
+
+/* Old API -- remove when this shim goes away */
+suite('ejs.render(str, dataAndOpts)', function () {
+  test('render the template with data/opts passed together', function () {
+    assert.equal(ejs.render('<p><?= foo ?></p>', {foo: 'yay', delimiter: '?'}),
+        '<p>yay</p>');
+  });
+
+  test('disallow unsafe opts passed along in data', function () {
+    assert.equal(ejs.render('<p><?= locals.foo ?></p>',
+        // localsName should not get reset because it's blacklisted
+        {_with: false, foo: 'yay', delimiter: '?', localsName: '_'}),
+        '<p>yay</p>');
+  });
+});
+
+suite('ejs.render(str, data, opts)', function () {
+  test('render the template', function () {
+    assert.equal(ejs.render('<p>yay</p>'), '<p>yay</p>');
+  });
+
+  test('empty input works', function () {
+    assert.equal(ejs.render(''), '');
+  });
+
+  test('undefined renders nothing escaped', function () {
+    assert.equal(ejs.render('<%= undefined %>'), '');
+  });
+
+  test('undefined renders nothing raw', function () {
+    assert.equal(ejs.render('<%- undefined %>'), '');
+  });
+
+  test('null renders nothing escaped', function () {
+    assert.equal(ejs.render('<%= null %>'), '');
+  });
+
+  test('null renders nothing raw', function () {
+    assert.equal(ejs.render('<%- null %>'), '');
+  });
+
+  test('zero-value data item renders something escaped', function () {
+    assert.equal(ejs.render('<%= 0 %>'), '0');
+  });
+
+  test('zero-value data object renders something raw', function () {
+    assert.equal(ejs.render('<%- 0 %>'), '0');
+  });
+
+  test('accept locals', function () {
+    assert.equal(ejs.render('<p><%= name %></p>', {name: 'geddy'}),
+        '<p>geddy</p>');
+  });
+
+  test('accept locals without using with() {}', function () {
+    assert.equal(ejs.render('<p><%= locals.name %></p>', {name: 'geddy'},
+                            {_with: false}),
+        '<p>geddy</p>');
+    assert.throws(function() {
+      ejs.render('<p><%= name %></p>', {name: 'geddy'},
+                 {_with: false});
+    }, /name is not defined/);
+  });
+
+  test('accept custom name for locals', function () {
+    ejs.localsName = 'it';
+    assert.equal(ejs.render('<p><%= it.name %></p>', {name: 'geddy'},
+                            {_with: false}),
+        '<p>geddy</p>');
+    assert.throws(function() {
+      ejs.render('<p><%= name %></p>', {name: 'geddy'},
+                 {_with: false});
+    }, /name is not defined/);
+    ejs.localsName = 'locals';
+  });
+
+  test('support caching', function () {
+    var file = __dirname + '/tmp/render.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render('<p>Old</p>', {}, options);
+    var expected = '<p>Old</p>';
+    assert.equal(out, expected);
+    // Assert no change, still in cache
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('support LRU caching', function () {
+    var oldCache = ejs.cache;
+    var file = __dirname + '/tmp/render.ejs';
+    var options = {cache: true, filename: file};
+    var out;
+    var expected = '<p>Old</p>';
+
+    // Switch to LRU
+    ejs.cache = LRU();
+
+    out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+    // Assert no change, still in cache
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+
+    // Restore system cache
+    ejs.cache = oldCache;
+  });
+
+  test('opts.context', function () {
+    var ctxt = {foo: 'FOO'};
+    var out = ejs.render('<%= this.foo %>', {}, {context: ctxt});
+    assert.equal(out, ctxt.foo);
+  });
+});
+
+suite('ejs.renderFile(path, [data], [options], fn)', function () {
+  test('render a file', function(done) {
+    ejs.renderFile('test/fixtures/para.ejs', function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, '<p>hey</p>\n');
+      done();
+    });
+  });
+
+  test('accept locals', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$'};
+    ejs.renderFile('test/fixtures/user.ejs', data, options, function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, '<h1>fonebone</h1>\n');
+      done();
+    });
+  });
+
+  test('accept locals without using with() {}', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$', _with: false};
+    var doneCount = 0;
+    ejs.renderFile('test/fixtures/user-no-with.ejs', data, options, function(err, html) {
+      if (err) {
+        if (doneCount === 2) {
+          return;
+        }
+        doneCount = 2;
+        return done(err);
+      }
+      assert.equal(html, '<h1>fonebone</h1>\n');
+      doneCount++;
+      if (doneCount === 2) {
+        done();
+      }
+    });
+    ejs.renderFile('test/fixtures/user.ejs', data, options, function(err) {
+      if (!err) {
+        if (doneCount === 2) {
+          return;
+        }
+        doneCount = 2;
+        return done(new Error('error not thrown'));
+      }
+      doneCount++;
+      if (doneCount === 2) {
+        done();
+      }
+    });
+  });
+
+  test('not catch err thrown by callback', function(done) {
+    var data =  {name: 'fonebone'};
+    var options = {delimiter: '$'};
+    var counter = 0;
+
+    var d = require('domain').create();
+    d.on('error', function (err) {
+      assert.equal(counter, 1);
+      assert.equal(err.message, 'Exception in callback');
+      done();
+    });
+    d.run(function () {
+      // process.nextTick() needed to work around mochajs/mocha#513
+      //
+      // tl;dr: mocha doesn't support synchronous exception throwing in
+      // domains. Have to make it async. Ticket closed because: "domains are
+      // deprecated :D"
+      process.nextTick(function () {
+        ejs.renderFile('test/fixtures/user.ejs', data, options, function(err) {
+          counter++;
+          if (err) {
+            assert.notEqual(err.message, 'Exception in callback');
+            return done(err);
+          }
+          throw new Error('Exception in callback');
+        });
+      });
+    });
+  });
+
+  test('support caching', function (done) {
+    var expected = '<p>Old</p>';
+    var file = __dirname + '/tmp/renderFile.ejs';
+    var options = {cache: true};
+    fs.writeFileSync(file, '<p>Old</p>');
+
+    ejs.renderFile(file, {}, options, function (err, out) {
+      if (err) {
+        done(err);
+      }
+      fs.writeFileSync(file, '<p>New</p>');
+      assert.equal(out, expected);
+
+      ejs.renderFile(file, {}, options, function (err, out) {
+        if (err) {
+          done(err);
+        }
+        // Assert no change, still in cache
+        assert.equal(out, expected);
+        done();
+      });
+    });
+  });
+
+  test('opts.context', function (done) {
+    var ctxt = {foo: 'FOO'};
+    ejs.renderFile('test/fixtures/with-context.ejs', {}, {context: ctxt}, function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, ctxt.foo + '\n');
+      done();
+    });
+
+  });
+});
+
+suite('cache specific', function () {
+  test('`clearCache` work properly', function () {
+    var expected = '<p>Old</p>';
+    var file = __dirname + '/tmp/clearCache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+
+    ejs.clearCache();
+
+    expected = '<p>New</p>';
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('`clearCache` work properly, LRU', function () {
+    var expected = '<p>Old</p>';
+    var oldCache = ejs.cache;
+    var file = __dirname + '/tmp/clearCache.ejs';
+    var options = {cache: true, filename: file};
+    var out;
+
+    ejs.cache = LRU();
+
+    out = ejs.render('<p>Old</p>', {}, options);
+    assert.equal(out, expected);
+    ejs.clearCache();
+    expected = '<p>New</p>';
+    out = ejs.render('<p>New</p>', {}, options);
+    assert.equal(out, expected);
+
+    ejs.cache = oldCache;
+  });
+
+  test('LRU with cache-size 1', function () {
+    var oldCache = ejs.cache;
+    var options;
+    var out;
+    var expected;
+    var file;
+
+    ejs.cache = LRU(1);
+
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>File1</p>', {}, options);
+    expected = '<p>File1</p>';
+    assert.equal(out, expected);
+
+    // Same filename, different template, but output
+    // should be the same because cache
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>ChangedFile1</p>', {}, options);
+    expected = '<p>File1</p>';
+    assert.equal(out, expected);
+
+    // Different filiename -- output should be different,
+    // and previous cache-entry should be evicted
+    file = __dirname + '/tmp/render2.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>File2</p>', {}, options);
+    expected = '<p>File2</p>';
+    assert.equal(out, expected);
+
+    // Entry with first filename should now be out of cache,
+    // results should be different
+    file = __dirname + '/tmp/render1.ejs';
+    options = {cache: true, filename: file};
+    out = ejs.render('<p>ChangedFile1</p>', {}, options);
+    expected = '<p>ChangedFile1</p>';
+    assert.equal(out, expected);
+
+    ejs.cache = oldCache;
+  });
+});
+
+suite('<%', function () {
+  test('without semicolons', function () {
+    assert.equal(ejs.render(fixture('no.semicolons.ejs')),
+        fixture('no.semicolons.html'));
+  });
+});
+
+suite('<%=', function () {
+  test('should not throw an error with a // comment on the final line', function () {
+    assert.equal(ejs.render('<%=\n// a comment\nname\n// another comment %>', {name: '&nbsp;<script>'}),
+      '&amp;nbsp;&lt;script&gt;');
+  });
+
+  test('escape &amp;<script>', function () {
+    assert.equal(ejs.render('<%= name %>', {name: '&nbsp;<script>'}),
+        '&amp;nbsp;&lt;script&gt;');
+  });
+
+  test('should escape \'', function () {
+    assert.equal(ejs.render('<%= name %>', {name: 'The Jones\'s'}),
+      'The Jones&#39;s');
+  });
+
+  test('should escape &foo_bar;', function () {
+    assert.equal(ejs.render('<%= name %>', {name: '&foo_bar;'}),
+      '&amp;foo_bar;');
+  });
+
+  test('should accept custom function', function() {
+
+    var customEscape = function customEscape(str) {
+      return !str ? '' : str.toUpperCase();
+    };
+
+    assert.equal(
+      ejs.render('<%= name %>', {name: 'The Jones\'s'}, {escape: customEscape}),
+      'THE JONES\'S'
+    );
+  });
+});
+
+suite('<%-', function () {
+  test('should not throw an error with a // comment on the final line', function () {
+    assert.equal(ejs.render('<%-\n// a comment\nname\n// another comment %>', {name: '&nbsp;<script>'}),
+        '&nbsp;<script>');
+  });
+
+  test('not escape', function () {
+    assert.equal(ejs.render('<%- name %>', {name: '<script>'}),
+        '<script>');
+  });
+
+  test('terminate gracefully if no close tag is found', function () {
+    try {
+      ejs.compile('<h1>oops</h1><%- name ->');
+      throw new Error('Expected parse failure');
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('Could not find matching close tag for') > -1);
+    }
+  });
+});
+
+suite('%>', function () {
+  test('produce newlines', function () {
+    assert.equal(ejs.render(fixture('newlines.ejs'), {users: users}),
+      fixture('newlines.html'));
+  });
+  test('works with `-%>` interspersed', function () {
+    assert.equal(ejs.render(fixture('newlines.mixed.ejs'), {users: users}),
+      fixture('newlines.mixed.html'));
+  });
+  test('consecutive tags work', function () {
+    assert.equal(ejs.render(fixture('consecutive-tags.ejs')),
+      fixture('consecutive-tags.html'));
+  });
+});
+
+suite('-%>', function () {
+  test('not produce newlines', function () {
+    assert.equal(ejs.render(fixture('no.newlines.ejs'), {users: users}),
+      fixture('no.newlines.html'));
+  });
+  test('stack traces work', function () {
+    try {
+      ejs.render(fixture('no.newlines.error.ejs'));
+    }
+    catch (e) {
+      if (e.message.indexOf('>> 4| <%= qdata %>') > -1) {
+        return;
+      }
+      throw e;
+    }
+    throw new Error('Expected ReferenceError');
+  });
+
+  test('works with unix style', function () {
+    var content = '<ul><% -%>\n'
+    + '<% users.forEach(function(user){ -%>\n'
+    + '<li><%= user.name -%></li>\n'
+    + '<% }) -%>\n'
+    + '</ul><% -%>\n';
+
+    var expectedResult = '<ul><li>geddy</li>\n<li>neil</li>\n<li>alex</li>\n</ul>';
+    var fn;
+    fn = ejs.compile(content);
+    assert.equal(fn({users: users}),
+      expectedResult);
+  });
+
+  test('works with windows style', function () {
+    var content = '<ul><% -%>\r\n'
+    + '<% users.forEach(function(user){ -%>\r\n'
+    + '<li><%= user.name -%></li>\r\n'
+    + '<% }) -%>\r\n'
+    + '</ul><% -%>\r\n';
+
+    var expectedResult = '<ul><li>geddy</li>\r\n<li>neil</li>\r\n<li>alex</li>\r\n</ul>';
+    var fn;
+    fn = ejs.compile(content);
+    assert.equal(fn({users: users}),
+      expectedResult);
+  });
+});
+
+suite('<%%', function () {
+  test('produce literals', function () {
+    assert.equal(ejs.render('<%%- "foo" %>'),
+      '<%- "foo" %>');
+  });
+  test('work without an end tag', function () {
+    assert.equal(ejs.render('<%%'), '<%');
+    assert.equal(ejs.render(fixture('literal.ejs'), {}, {delimiter: ' '}),
+      fixture('literal.html'));
+  });
+});
+
+suite('%%>', function () {
+  test('produce literal', function () {
+    assert.equal(ejs.render('%%>'),
+        '%>');
+    assert.equal(ejs.render('  >', {}, {delimiter: ' '}),
+        ' >');
+  });
+});
+
+suite('<%_ and _%>', function () {
+  test('slurps spaces and tabs', function () {
+    assert.equal(ejs.render(fixture('space-and-tab-slurp.ejs'), {users: users}),
+      fixture('space-and-tab-slurp.html'));
+  });
+});
+
+suite('single quotes', function () {
+  test('not mess up the constructed function', function () {
+    assert.equal(ejs.render(fixture('single-quote.ejs')),
+      fixture('single-quote.html'));
+  });
+});
+
+suite('double quotes', function () {
+  test('not mess up the constructed function', function () {
+    assert.equal(ejs.render(fixture('double-quote.ejs')),
+      fixture('double-quote.html'));
+  });
+});
+
+suite('backslashes', function () {
+  test('escape', function () {
+    assert.equal(ejs.render(fixture('backslash.ejs')),
+      fixture('backslash.html'));
+  });
+});
+
+suite('messed up whitespace', function () {
+  test('work', function () {
+    assert.equal(ejs.render(fixture('messed.ejs'), {users: users}),
+      fixture('messed.html'));
+  });
+});
+
+suite('exceptions', function () {
+  test('produce useful stack traces', function () {
+    try {
+      ejs.render(fixture('error.ejs'), {}, {filename: 'error.ejs'});
+    }
+    catch (err) {
+      assert.equal(err.path, 'error.ejs');
+      assert.equal(err.stack.split('\n').slice(0, 8).join('\n'), fixture('error.out'));
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('not include fancy stack info if compileDebug is false', function () {
+    try {
+      ejs.render(fixture('error.ejs'), {}, {
+        filename: 'error.ejs',
+        compileDebug: false
+      });
+    }
+    catch (err) {
+      assert.ok(!err.path);
+      assert.notEqual(err.stack.split('\n').slice(0, 8).join('\n'), fixture('error.out'));
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  var unhook = null;
+  test('log JS source when debug is set', function (done) {
+    var out = '';
+    var needToExit = false;
+    unhook = hook_stdio(process.stdout, function (str) {
+      out += str;
+      if (needToExit) {
+        return;
+      }
+      if (out.indexOf('__output')) {
+        needToExit = true;
+        unhook();
+        unhook = null;
+        return done();
+      }
+    });
+    ejs.render(fixture('hello-world.ejs'), {}, {debug: true});
+  });
+
+  test('escape filename in errors', function () {
+    assert.throws(function () {
+      ejs.render('<% throw new Error("whoops"); %>', {}, {filename: '<script>'});
+    }, /Error: &lt;script&gt;/);
+  });
+
+  test('filename in errors uses custom escape', function () {
+    assert.throws(function () {
+      ejs.render('<% throw new Error("whoops"); %>', {}, {
+        filename: '<script>',
+        escape: function () { return 'zooby'; }
+      });
+    }, /Error: zooby/);
+  });
+
+  teardown(function() {
+    if (!unhook) {
+      return;
+    }
+    unhook();
+    unhook = null;
+  });
+});
+
+suite('rmWhitespace', function () {
+  test('works', function () {
+    assert.equal(ejs.render(fixture('rmWhitespace.ejs'), {}, {rmWhitespace: true}),
+        fixture('rmWhitespace.html'));
+  });
+});
+
+suite('include()', function () {
+  test('include ejs', function () {
+    var file = 'test/fixtures/include-simple.ejs';
+    assert.equal(ejs.render(fixture('include-simple.ejs'), {}, {filename: file}),
+        fixture('include-simple.html'));
+  });
+
+  test('include ejs fails without `filename`', function () {
+    try {
+      ejs.render(fixture('include-simple.ejs'));
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('requires the \'filename\' option') > -1);
+      return;
+    }
+    throw new Error('expected inclusion error');
+  });
+
+  test('strips BOM', function () {
+    assert.equal(
+      ejs.render('<%- include("fixtures/includes/bom.ejs") %>',
+        {}, {filename: path.join(__dirname, 'f.ejs')}),
+      '<p>This is a file with BOM.</p>\n');
+  });
+
+  test('include ejs with locals', function () {
+    var file = 'test/fixtures/include.ejs';
+    assert.equal(ejs.render(fixture('include.ejs'), {pets: users}, {filename: file, delimiter: '@'}),
+        fixture('include.html'));
+  });
+
+  test('include ejs with absolute path and locals', function () {
+    var file = 'test/fixtures/include-abspath.ejs';
+    assert.equal(ejs.render(fixture('include-abspath.ejs'),
+      {dir: path.join(__dirname, 'fixtures'), pets: users, path: path},
+      {filename: file, delimiter: '@'}),
+        fixture('include.html'));
+  });
+
+  test('include ejs with set root path', function () {
+    var file = 'test/fixtures/include-root.ejs';
+    var viewsPath = path.join(__dirname, 'fixtures');
+    assert.equal(ejs.render(fixture('include-root.ejs'), {pets: users}, {filename: file, delimiter: '@',root:viewsPath}),
+      fixture('include.html'));
+  });
+
+  test('work when nested', function () {
+    var file = 'test/fixtures/menu.ejs';
+    assert.equal(ejs.render(fixture('menu.ejs'), {pets: users}, {filename: file}),
+        fixture('menu.html'));
+  });
+
+  test('work with a variable path', function () {
+    var file = 'test/fixtures/menu_var.ejs';
+    var includePath = 'includes/menu-item';
+    assert.equal(ejs.render(fixture('menu.ejs'), {pets: users, varPath:  includePath}, {filename: file}),
+      fixture('menu.html'));
+  });
+
+  test('include arbitrary files as-is', function () {
+    var file = 'test/fixtures/include.css.ejs';
+    assert.equal(ejs.render(fixture('include.css.ejs'), {pets: users}, {filename: file}),
+        fixture('include.css.html'));
+  });
+
+  test('pass compileDebug to include', function () {
+    var file = 'test/fixtures/include.ejs';
+    var fn;
+    fn = ejs.compile(fixture('include.ejs'), {
+      filename: file,
+      delimiter: '@',
+      compileDebug: false
+    });
+    try {
+      // Render without a required variable reference
+      fn({foo: 'asdf'});
+    }
+    catch(e) {
+      assert.equal(e.message, 'pets is not defined');
+      assert.ok(!e.path);
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('is dynamic', function () {
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_cache.ejs';
+    var options = {filename: file};
+    var out = ejs.compile(fixture('include_cache.ejs'), options);
+    assert.equal(out(), '<p>Old</p>\n');
+
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>New</p>');
+    assert.equal(out(), '<p>New</p>\n');
+  });
+
+  test('support caching', function () {
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_cache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    var expected = fixture('include_cache.html');
+    assert.equal(out, expected);
+    out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    // No change, still in cache
+    assert.equal(out, expected);
+    fs.writeFileSync(__dirname + '/tmp/include.ejs', '<p>New</p>');
+    out = ejs.render(fixture('include_cache.ejs'), {}, options);
+    assert.equal(out, expected);
+  });
+
+});
+
+suite('preprocessor include', function () {
+  test('work', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    assert.equal(ejs.render(fixture('include_preprocessor.ejs'), {pets: users}, {filename: file, delimiter: '@'}),
+        fixture('include_preprocessor.html'));
+  });
+
+  test('no false positives', function () {
+    assert.equal(ejs.render('<% %> include foo <% %>'), ' include foo ');
+  });
+
+  test('fails without `filename`', function () {
+    try {
+      ejs.render(fixture('include_preprocessor.ejs'), {pets: users}, {delimiter: '@'});
+    }
+    catch (err) {
+      assert.ok(err.message.indexOf('requires the \'filename\' option') > -1);
+      return;
+    }
+    throw new Error('expected inclusion error');
+  });
+
+  test('strips BOM', function () {
+    assert.equal(
+      ejs.render('<% include fixtures/includes/bom.ejs %>',
+        {}, {filename: path.join(__dirname, 'f.ejs')}),
+      '<p>This is a file with BOM.</p>\n');
+  });
+
+  test('work when nested', function () {
+    var file = 'test/fixtures/menu_preprocessor.ejs';
+    assert.equal(ejs.render(fixture('menu_preprocessor.ejs'), {pets: users}, {filename: file}),
+        fixture('menu_preprocessor.html'));
+  });
+
+  test('tracks dependency correctly', function () {
+    var file = 'test/fixtures/menu_preprocessor.ejs';
+    var fn = ejs.compile(fixture('menu_preprocessor.ejs'), {filename: file});
+    assert(fn.dependencies.length);
+  });
+
+  test('include arbitrary files as-is', function () {
+    var file = 'test/fixtures/include_preprocessor.css.ejs';
+    assert.equal(ejs.render(fixture('include_preprocessor.css.ejs'), {pets: users}, {filename: file}),
+        fixture('include_preprocessor.css.html'));
+  });
+
+  test('pass compileDebug to include', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    var fn;
+    fn = ejs.compile(fixture('include_preprocessor.ejs'), {
+      filename: file,
+      delimiter: '@',
+      compileDebug: false
+    });
+    try {
+      // Render without a required variable reference
+      fn({foo: 'asdf'});
+    }
+    catch(e) {
+      assert.equal(e.message, 'pets is not defined');
+      assert.ok(!e.path);
+      return;
+    }
+    throw new Error('no error reported when there should be');
+  });
+
+  test('is static', function () {
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_preprocessor_cache.ejs';
+    var options = {filename: file};
+    var out = ejs.compile(fixture('include_preprocessor_cache.ejs'), options);
+    assert.equal(out(), '<p>Old</p>\n');
+
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>New</p>');
+    assert.equal(out(), '<p>Old</p>\n');
+  });
+
+  test('support caching', function () {
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>Old</p>');
+    var file = 'test/fixtures/include_preprocessor_cache.ejs';
+    var options = {cache: true, filename: file};
+    var out = ejs.render(fixture('include_preprocessor_cache.ejs'), {}, options);
+    var expected = fixture('include_preprocessor_cache.html');
+    assert.equal(out, expected);
+    fs.writeFileSync(__dirname + '/tmp/include_preprocessor.ejs', '<p>New</p>');
+    out = ejs.render(fixture('include_preprocessor_cache.ejs'), {}, options);
+    assert.equal(out, expected);
+  });
+
+  test('whitespace slurp and rmWhitespace work', function() {
+    var file = 'test/fixtures/include_preprocessor_line_slurp.ejs';
+    var template = fixture('include_preprocessor_line_slurp.ejs');
+    var expected = fixture('include_preprocessor_line_slurp.html');
+    var options = {rmWhitespace: true, filename: file};
+    assert.equal(ejs.render(template, {}, options),
+        expected);
+  });
+
+});
+
+suite('comments', function () {
+  test('fully render with comments removed', function () {
+    assert.equal(ejs.render(fixture('comments.ejs')),
+        fixture('comments.html'));
+  });
+});
+
+suite('require', function () {
+
+  // Only works with inline/preprocessor includes
+  test('allow ejs templates to be required as node modules', function () {
+    var file = 'test/fixtures/include_preprocessor.ejs';
+    var template = require(__dirname + '/fixtures/menu_preprocessor.ejs');
+    if (!process.env.running_under_istanbul) {
+      assert.equal(template({filename: file, pets: users}),
+          fixture('menu_preprocessor.html'));
+    }
+  });
+});
+
+suite('test fileloader', function () {
+
+  var myFileLoad = function (filePath) {
+    return 'myFileLoad: ' + fs.readFileSync(filePath);
+  };
+
+  test('test custom fileload', function (done) {
+    ejs.fileLoader = myFileLoad;
+    ejs.renderFile('test/fixtures/para.ejs', function(err, html) {
+      if (err) {
+        return done(err);
+      }
+      assert.equal(html, 'myFileLoad: <p>hey</p>\n');
+      done();
+    });
+
+  });
+});
+
+suite('examples', function () {
+  function noop () {}
+  fs.readdirSync('examples').forEach(function (f) {
+    if (!/\.js$/.test(f)) {
+      return;
+    }
+    suite(f, function () {
+      test('doesn\'t throw any errors', function () {
+        var stderr = hook_stdio(process.stderr, noop);
+        var stdout = hook_stdio(process.stdout, noop);
+        try {
+          require('../examples/' + f);
+        }
+        catch (ex) {
+          stdout();
+          stderr();
+          throw ex;
+        }
+        stdout();
+        stderr();
+      });
+    });
+  });
+});
+
+suite('meta information', function () {
+  test('has a version', function () {
+    assert.strictEqual(ejs.VERSION, require('../package.json').version);
+  });
+
+  test('had a name', function () {
+    assert.strictEqual(ejs.name, 'ejs');
+  });
+});
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/backslash.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/backslash.ejs
new file mode 100644
index 0000000..2de78ae
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/backslash.ejs
@@ -0,0 +1 @@
+\foo
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/backslash.html b/register/npm/ejs/2.5.6/package/test/fixtures/backslash.html
new file mode 100644
index 0000000..2de78ae
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/backslash.html
@@ -0,0 +1 @@
+\foo
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/comments.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/comments.ejs
new file mode 100644
index 0000000..48ece70
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/comments.ejs
@@ -0,0 +1,7 @@
+<li><a href="foo"><% // double-slash comment %>foo</li>
+<li><a href="bar"><% /* C-style comment */ %>bar</li>
+<li><a href="baz"><% // double-slash comment with newline
+    %>baz</li>
+<li><a href="qux"><% var x = 'qux'; // double-slash comment @ end of line %><%= x %></li>
+<li><a href="fee"><%# ERB style comment %>fee</li>
+<li><a href="bah"><%= 'not a ' + '//' + ' comment' %></a></li>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/comments.html b/register/npm/ejs/2.5.6/package/test/fixtures/comments.html
new file mode 100644
index 0000000..63fcd25
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/comments.html
@@ -0,0 +1,6 @@
+<li><a href="foo">foo</li>
+<li><a href="bar">bar</li>
+<li><a href="baz">baz</li>
+<li><a href="qux">qux</li>
+<li><a href="fee">fee</li>
+<li><a href="bah">not a // comment</a></li>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.ejs
new file mode 100644
index 0000000..175f5c3
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.ejs
@@ -0,0 +1 @@
+<% var a = 'foo' %><% var b = 'bar' %><%= a %>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.html b/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.html
new file mode 100644
index 0000000..257cc56
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/consecutive-tags.html
@@ -0,0 +1 @@
+foo
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.ejs
new file mode 100644
index 0000000..e341be9
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.ejs
@@ -0,0 +1 @@
+<p><%= "lo" + 'ki' %>'s "wheelchair"</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.html b/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.html
new file mode 100644
index 0000000..9d94873
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/double-quote.html
@@ -0,0 +1 @@
+<p>loki's "wheelchair"</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/error.out b/register/npm/ejs/2.5.6/package/test/fixtures/error.out
new file mode 100644
index 0000000..a2c9108
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/error.out
@@ -0,0 +1,8 @@
+ReferenceError: error.ejs:2
+    1| <ul>
+ >> 2|   <% if (users) { %>
+    3|     <p>Has users</p>
+    4|   <% } %>
+    5| </ul>
+
+users is not defined
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/fail.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/fail.ejs
new file mode 100644
index 0000000..9dfb1f6
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/fail.ejs
@@ -0,0 +1 @@
+<% function foo() return 'foo'; %>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/hello-world.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/hello-world.ejs
new file mode 100644
index 0000000..e2e353e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/hello-world.ejs
@@ -0,0 +1 @@
+<p>Hello world!</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include-abspath.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include-abspath.ejs
new file mode 100644
index 0000000..26b0522
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include-abspath.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@- include(path.join(dir, 'pet'), {pet: pet}); @>
+  <@ }); @>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include-root.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include-root.ejs
new file mode 100644
index 0000000..395d6a1
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include-root.ejs
@@ -0,0 +1 @@
+<@- include('/include'); @>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.ejs
new file mode 100644
index 0000000..a874878
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.ejs
@@ -0,0 +1,3 @@
+<ul>
+  <%- include('hello-world'); %>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.html b/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.html
new file mode 100644
index 0000000..f4522c0
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include-simple.html
@@ -0,0 +1,4 @@
+<ul>
+  <p>Hello world!</p>
+
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include.css.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include.css.ejs
new file mode 100644
index 0000000..cd184b4
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include.css.ejs
@@ -0,0 +1 @@
+<style><%- include('style.css', {value: 'bar'}); %></style>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include.css.html b/register/npm/ejs/2.5.6/package/test/fixtures/include.css.html
new file mode 100644
index 0000000..9e6e33e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include.css.html
@@ -0,0 +1,4 @@
+<style>body {
+  foo: 'bar';
+}
+</style>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include.ejs
new file mode 100644
index 0000000..f2295ee
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@- include('pet', {pet: pet}); @>
+  <@ }); @>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include.html b/register/npm/ejs/2.5.6/package/test/fixtures/include.html
new file mode 100644
index 0000000..5431d7c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include.html
@@ -0,0 +1,12 @@
+<ul>
+  
+    <li>geddy</li>
+
+  
+    <li>neil</li>
+
+  
+    <li>alex</li>
+
+  
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.ejs
new file mode 100644
index 0000000..439193c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.ejs
@@ -0,0 +1 @@
+<%- include('../tmp/include') %>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.html b/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.html
new file mode 100644
index 0000000..63bf29c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_cache.html
@@ -0,0 +1 @@
+<p>Old</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.ejs
new file mode 100644
index 0000000..2535b6c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.ejs
@@ -0,0 +1 @@
+<style><% var value = 'bar' %><% include style.css %></style>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.html b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.html
new file mode 100644
index 0000000..9e6e33e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.css.html
@@ -0,0 +1,4 @@
+<style>body {
+  foo: 'bar';
+}
+</style>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.ejs
new file mode 100644
index 0000000..f2728c5
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <@ pets.forEach(function(pet){ @>
+    <@ include pet @>
+  <@ }) @>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.html b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.html
new file mode 100644
index 0000000..5431d7c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor.html
@@ -0,0 +1,12 @@
+<ul>
+  
+    <li>geddy</li>
+
+  
+    <li>neil</li>
+
+  
+    <li>alex</li>
+
+  
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.ejs
new file mode 100644
index 0000000..ae60923
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.ejs
@@ -0,0 +1 @@
+<%- include ../tmp/include_preprocessor %>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.html b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.html
new file mode 100644
index 0000000..63bf29c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_cache.html
@@ -0,0 +1 @@
+<p>Old</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.ejs
new file mode 100644
index 0000000..fd1765c
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.ejs
@@ -0,0 +1 @@
+<% include include_preprocessor_line_slurp_child %>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.html b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.html
new file mode 100644
index 0000000..7ab7998
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp.html
@@ -0,0 +1,5 @@
+<div>
+12
+3
+45
+</div>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp_child.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp_child.ejs
new file mode 100644
index 0000000..1c4a7c6
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/include_preprocessor_line_slurp_child.ejs
@@ -0,0 +1,5 @@
+<div>
+1   <%_ if (true) { _%> 2
+        3
+4   <%_ } _%> 5
+</div>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/includes/bom.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/includes/bom.ejs
new file mode 100644
index 0000000..cc198ba
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/includes/bom.ejs
@@ -0,0 +1 @@
+﻿<p>This is a file with BOM.</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu-item.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu-item.ejs
new file mode 100644
index 0000000..5a1e2ef
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu-item.ejs
@@ -0,0 +1 @@
+<li><% include menu/item %></li>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu/item.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu/item.ejs
new file mode 100644
index 0000000..cd85b3d
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/includes/menu/item.ejs
@@ -0,0 +1 @@
+<a href="/<%= url %>"><%= title %></a>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/literal.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/literal.ejs
new file mode 100644
index 0000000..9f6bf81
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/literal.ejs
@@ -0,0 +1,3 @@
+<pre>There should be a space followed by a less-than sign and then two more
+spaces in the next line:
+ <   .</pre>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/literal.html b/register/npm/ejs/2.5.6/package/test/fixtures/literal.html
new file mode 100644
index 0000000..95acd44
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/literal.html
@@ -0,0 +1,3 @@
+<pre>There should be a space followed by a less-than sign and then two more
+spaces in the next line:
+ <  .</pre>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/menu.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/menu.ejs
new file mode 100644
index 0000000..0309990
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/menu.ejs
@@ -0,0 +1,15 @@
+<%- include('includes/menu-item', {
+  url: '/foo'
+, title: 'Foo'
+}); -%>
+
+<%- include('includes/menu-item', {
+  url: '/bar'
+, title: 'Bar'
+}); -%>
+
+<%- include('includes/menu-item', {
+  url: '/baz'
+, title: 'Baz'
+}); -%>
+
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/menu.html b/register/npm/ejs/2.5.6/package/test/fixtures/menu.html
new file mode 100644
index 0000000..eef5777
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/menu.html
@@ -0,0 +1,9 @@
+<li><a href="//foo">Foo</a>
+</li>
+
+<li><a href="//bar">Bar</a>
+</li>
+
+<li><a href="//baz">Baz</a>
+</li>
+
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.ejs
new file mode 100644
index 0000000..cca1d02
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.ejs
@@ -0,0 +1,11 @@
+<% var url = '/foo' -%>
+<% var title = 'Foo' -%>
+<% include includes/menu-item -%>
+
+<% var url = '/bar' -%>
+<% var title = 'Bar' -%>
+<% include includes/menu-item -%>
+
+<% var url = '/baz' -%>
+<% var title = 'Baz' -%>
+<% include includes/menu-item -%>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.html b/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.html
new file mode 100644
index 0000000..651b60e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/menu_preprocessor.html
@@ -0,0 +1,8 @@
+<li><a href="//foo">Foo</a>
+</li>
+
+<li><a href="//bar">Bar</a>
+</li>
+
+<li><a href="//baz">Baz</a>
+</li>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/menu_var.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/menu_var.ejs
new file mode 100644
index 0000000..a421dcb
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/menu_var.ejs
@@ -0,0 +1,15 @@
+<%- include(varPath, {
+  url: '/foo'
+, title: 'Foo'
+}); -%>
+
+<%- include(varPath, {
+  url: '/bar'
+, title: 'Bar'
+}); -%>
+
+<%- include(varPath, {
+  url: '/baz'
+, title: 'Baz'
+}); -%>
+
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/messed.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/messed.ejs
new file mode 100644
index 0000000..37aca11
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/messed.ejs
@@ -0,0 +1 @@
+<ul><%users.forEach(function(user){%><li><%=user.name%></li><%})%></ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/messed.html b/register/npm/ejs/2.5.6/package/test/fixtures/messed.html
new file mode 100644
index 0000000..52d3562
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/messed.html
@@ -0,0 +1 @@
+<ul><li>geddy</li><li>neil</li><li>alex</li></ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/newlines.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.ejs
new file mode 100644
index 0000000..83ffe98
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <% users.forEach(function(user){ %>
+    <li><%= user.name %></li>
+  <% }) %>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/newlines.html b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.html
new file mode 100644
index 0000000..4557edb
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.html
@@ -0,0 +1,9 @@
+<ul>
+  
+    <li>geddy</li>
+  
+    <li>neil</li>
+  
+    <li>alex</li>
+  
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.ejs
new file mode 100644
index 0000000..5895057
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.ejs
@@ -0,0 +1,6 @@
+<ul>
+  <% var unused1 = 'blah' -%>
+  <% var unused2 = 'bleh'  %>
+  <% var unused3 = 'bloh' -%>
+  <% var unused4 = 'bluh'  %>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.html b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.html
new file mode 100644
index 0000000..cd88a97
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/newlines.mixed.html
@@ -0,0 +1,4 @@
+<ul>
+    
+    
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.ejs
new file mode 100644
index 0000000..c7a6dc9
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.ejs
@@ -0,0 +1,5 @@
+<ul>
+  <% users.forEach(function(user){ -%>
+  <li><%= user.name %></li>
+  <% }) -%>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.error.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.error.ejs
new file mode 100644
index 0000000..bf1d71e
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.error.ejs
@@ -0,0 +1,5 @@
+AAA
+<% var data = "test"; -%>
+BBB
+<%= qdata %>
+CCC
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.html b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.html
new file mode 100644
index 0000000..2285700
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/no.newlines.html
@@ -0,0 +1,5 @@
+<ul>
+    <li>geddy</li>
+    <li>neil</li>
+    <li>alex</li>
+  </ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.ejs
new file mode 100644
index 0000000..d583134
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.ejs
@@ -0,0 +1,8 @@
+This document does not use semicolons in scriptlets.
+<%
+  var a = 'b'
+  var b = 'c'
+  var c
+  c = b
+%>
+The value of c is: <%= c %>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.html b/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.html
new file mode 100644
index 0000000..524f8c6
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/no.semicolons.html
@@ -0,0 +1,3 @@
+This document does not use semicolons in scriptlets.
+
+The value of c is: c
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/para.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/para.ejs
new file mode 100644
index 0000000..28f5df8
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/para.ejs
@@ -0,0 +1 @@
+<p>hey</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/pet.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/pet.ejs
new file mode 100644
index 0000000..09dd230
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/pet.ejs
@@ -0,0 +1 @@
+<li><@= pet.name @></li>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.ejs
new file mode 100644
index 0000000..5da0d89
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.ejs
@@ -0,0 +1,14 @@
+   <tag1>  
+<tag2>  
+A very long piece of text very long piece of text very long piece of
+text very long piece <% var f = 'f' %>of text very long piece of
+text very long piece of<% %>text very long 
+adsffadsfadsfad<%= f %>   
+   
+piece of text.
+<% var a = 'a' %>  
+Text again.
+<% var b = 'b' %>
+<% var c = 'c'
+var d = 'd' %>
+Another text. <%= c %>  
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.html b/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.html
new file mode 100644
index 0000000..4beb5fa
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/rmWhitespace.html
@@ -0,0 +1,8 @@
+<tag1>
+<tag2>
+A very long piece of text very long piece of text very long piece of
+text very long piece of text very long piece of
+text very long piece oftext very long
+adsffadsfadsfadfpiece of text.
+Text again.
+Another text. c
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.ejs
new file mode 100644
index 0000000..b520c84
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.ejs
@@ -0,0 +1 @@
+<p><%= 'loki' %>'s wheelchair</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.html b/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.html
new file mode 100644
index 0000000..d642750
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/single-quote.html
@@ -0,0 +1 @@
+<p>loki's wheelchair</p>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.ejs
new file mode 100644
index 0000000..7622457
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.ejs
@@ -0,0 +1,5 @@
+<ul>
+	 <%_ users.forEach(function(user){ _%>	 
+    <li><%= user.name %></li>
+ 	<%_ }) _%> 	
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.html b/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.html
new file mode 100644
index 0000000..cfb6582
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/space-and-tab-slurp.html
@@ -0,0 +1,5 @@
+<ul>
+    <li>geddy</li>
+    <li>neil</li>
+    <li>alex</li>
+</ul>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/strict.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/strict.ejs
new file mode 100644
index 0000000..408ebcf
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/strict.ejs
@@ -0,0 +1,5 @@
+<%
+// Unspecified execution context should be `undefined` in strict mode
+var isReallyStrict = !((function () { return this; })())
+-%>
+<%= isReallyStrict -%>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/style.css b/register/npm/ejs/2.5.6/package/test/fixtures/style.css
new file mode 100644
index 0000000..f9c16e6
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/style.css
@@ -0,0 +1,3 @@
+body {
+  foo: '<%= value %>';
+}
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/user-no-with.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/user-no-with.ejs
new file mode 100644
index 0000000..1822e24
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/user-no-with.ejs
@@ -0,0 +1 @@
+<h1><$= locals.name $></h1>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/user.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/user.ejs
new file mode 100644
index 0000000..66f9adc
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/user.ejs
@@ -0,0 +1 @@
+<h1><$= name $></h1>
diff --git a/register/npm/ejs/2.5.6/package/test/fixtures/with-context.ejs b/register/npm/ejs/2.5.6/package/test/fixtures/with-context.ejs
new file mode 100644
index 0000000..412a9be
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/fixtures/with-context.ejs
@@ -0,0 +1 @@
+<%= this.foo %>
diff --git a/register/npm/ejs/2.5.6/package/test/mocha.opts b/register/npm/ejs/2.5.6/package/test/mocha.opts
new file mode 100644
index 0000000..e30264f
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/mocha.opts
@@ -0,0 +1,3 @@
+--ui tdd
+--reporter spec
+--check-leaks
diff --git a/register/npm/ejs/2.5.6/package/test/tmp/include.ejs b/register/npm/ejs/2.5.6/package/test/tmp/include.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/tmp/include.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/tmp/include_preprocessor.ejs b/register/npm/ejs/2.5.6/package/test/tmp/include_preprocessor.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/tmp/include_preprocessor.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/npm/ejs/2.5.6/package/test/tmp/renderFile.ejs b/register/npm/ejs/2.5.6/package/test/tmp/renderFile.ejs
new file mode 100644
index 0000000..595b6c0
--- /dev/null
+++ b/register/npm/ejs/2.5.6/package/test/tmp/renderFile.ejs
@@ -0,0 +1 @@
+<p>New</p>
\ No newline at end of file
diff --git a/register/package.json b/register/package.json
index 307440f..34160a6 100644
--- a/register/package.json
+++ b/register/package.json
@@ -6,11 +6,13 @@
   "dependencies": {
     "body-parser": "^1.17.2",
     "consolidate": "^0.14.5",
+    "cookie-parser": "^1.4.3",
     "crypto": "0.0.3",
+    "ejs": "^2.5.6",
     "express": "^4.15.3",
     "mongoose": "^4.10.4",
     "supervisor": "^0.12.0",
-    "swig": "^1.4.2",
+    "swig": "^1.4.2"
   },
   "devDependencies": {},
   "scripts": {
diff --git a/register/public/my.js b/register/public/my.js
index 3146558..c0feb41 100644
--- a/register/public/my.js
+++ b/register/public/my.js
@@ -18,7 +18,7 @@ $(function() {
                 } else {
                     msgChange($('#div-login-msg'), $('#icon-login-msg'), $('#text-login-msg'), "success", "glyphicon-ok", "Login OK");
                 }
-                return false;
+                return true;
                 break;
             case "lost-form":
                 var $ls_email=$('#lost_email').val();
@@ -46,6 +46,13 @@ $(function() {
           // return false; by hyunjoon
     });
 
+    function callBackLogin(status){
+      if(status == 'login'){
+        alert('로그인');
+        $("#login-modal").toggle();
+      }
+    }
+
     $('#login_register_btn').click( function () { modalAnimate($formLogin, $formRegister); });
     $('#register_login_btn').click( function () { modalAnimate($formRegister, $formLogin); });
     $('#login_lost_btn').click( function () { modalAnimate($formLogin, $formLost); });
diff --git a/register/views/board.html b/register/views/board.html
index c6c4431..b6c94b8 100644
--- a/register/views/board.html
+++ b/register/views/board.html
@@ -47,9 +47,9 @@
                                   <div id="icon-login-msg" class="glyphicon glyphicon-chevron-right"></div>
                                   <span id="text-login-msg">Type your username and password.</span>
                               </div>
-  				    		<input id="login_username" class="form-control" type="text" placeholder="Username (type ERROR for error effect)" required>
+  				    		<input id="login_username" class="form-control" type="text" placeholder="Username ()" required>
   				    		<input id="login_password" class="form-control" type="password" placeholder="Password" required>
-                              <div class="checkbox">
+                              <div class="checkbox" id="login_checkbox">
                                   <label>
                                       <input type="checkbox"> Remember me
                                   </label>
@@ -208,6 +208,6 @@
 
 
 
-</script> 
+</script>
   </body>
 </html>
diff --git a/register/views/index.html b/register/views/index.html
index 9284871..35fc203 100644
--- a/register/views/index.html
+++ b/register/views/index.html
@@ -16,15 +16,22 @@
 
   </head>
   <body>
-    <div class="panel panel-primary" style="
-    margin-bottom: 0px;">
+    <div class="panel panel-primary" style="margin-bottom: 0px;">
         <div class="panel-heading clearfix">
           <h4 class="panel-title pull-left" style="padding-top: 7.5px;">TEAM Sillicon Valley</h4>
           <div class="btn-group pull-right">
             <a href="#" class="btn btn-default btn-sm">HOME</a>
             <a href="board.html" class="btn btn-default btn-sm">BOARD</a>
-            <a href="#" data-toggle="modal" data-target="#login-modal" class="btn btn-default btn-sm">LOGIN</a>
-          </div>
+
+          <%    if(loginId == null){       %>
+            <a href="#" id='loginBtn' name='loginBtn' data-toggle="modal" data-target="#login-modal" class="btn btn-default btn-sm">LOGIN<%=loginId%></a>
+          <%       } else {    %>
+            <a href="/logout" id='logoutBtn' name='logoutBtn'  class="btn btn-default btn-sm">LOGOUT</a>
+
+          <%        }   %>
+
+
+            </div>
         </div>
     </div>
 
@@ -43,29 +50,35 @@
                   <div id="div-forms">
 
                       <!-- Begin # Login Form -->
-                      <form id="login-form">
+                      <form id="login-form" action="/login" method="post" >
   		                <div class="modal-body">
-  				    		<div id="div-login-msg">
-                                  <div id="icon-login-msg" class="glyphicon glyphicon-chevron-right"></div>
-                                  <span id="text-login-msg">Type your username and password.</span>
-                              </div>
-  				    		<input id="login_username" class="form-control" type="text" placeholder="Username (type ERROR for error effect)" required>
-  				    		<input id="login_password" class="form-control" type="password" placeholder="Password" required>
-                              <div class="checkbox">
-                                  <label>
-                                      <input type="checkbox"> Remember me
-                                  </label>
-                              </div>
-          		    	</div>
-  				        <div class="modal-footer">
-                              <div>
-                                  <button type="submit" class="btn btn-primary btn-lg btn-block">Login</button>
-                              </div>
-  				    	    <div>
-                                  <button id="login_lost_btn" type="button" class="btn btn-link">Lost Password?</button>
-                                  <button id="login_register_btn" type="button" class="btn btn-link">Register</button>
-                              </div>
-  				        </div>
+        				    		<div id="div-login-msg">
+                                        <div id="icon-login-msg" class="glyphicon glyphicon-chevron-right"></div>
+                                        <span id="text-login-msg"><%=msg%></span>
+                                    </div>
+        				    		<input id="login_username" name='login_username' class="form-control" type="text" value='<%=cookieId%>' placeholder="Username (./index.html)" required>
+        				    		<input id="login_password" name='login_password' class="form-control" type="password" placeholder="Password" required>
+                                    <div class="checkbox" >
+                                        <label>
+                                            <% if(cookieId != null) { %>
+                                              <input type="checkbox" id='login_checkbox' checked='true' name='login_checkbox' value='true'> Remember me
+
+                                            <%  } else {   %>
+                                              <input type="checkbox" id='login_checkbox' name='login_checkbox' value='true'> Remember me
+
+                                            <%  }    %>
+                                            </label>
+                                    </div>
+                		    	</div>
+        				        <div class="modal-footer">
+                                    <div>
+                                        <button type="submit" onclick="" class="btn btn-primary btn-lg btn-block">로그인</button>
+                                    </div>
+        				    	    <div>
+                                        <button id="login_lost_btn" type="button" class="btn btn-link">Lost Password?</button>
+                                        <button id="login_register_btn" type="button" class="btn btn-link">Register</button>
+                                    </div>
+        				        </div>
                       </form>
                       <!-- End # Login Form -->
 
@@ -198,7 +211,6 @@
           </div>
         </div>
       </div>
-
     </div>
 
 
diff --git a/views/board.html b/views/board.html
index 350e9f3..ecda0fe 100644
--- a/views/board.html
+++ b/views/board.html
@@ -47,7 +47,7 @@
                                   <div id="icon-login-msg" class="glyphicon glyphicon-chevron-right"></div>
                                   <span id="text-login-msg">Type your username and password.</span>
                               </div>
-  				    		<input id="login_username" class="form-control" type="text" placeholder="Username (type ERROR for error effect)" required>
+  				    		<input id="login_username" class="form-control" type="text" placeholder="Username (2)" required>
   				    		<input id="login_password" class="form-control" type="password" placeholder="Password" required>
                               <div class="checkbox">
                                   <label>
diff --git a/views/my.js b/views/my.js
index df180c8..54c92c0 100644
--- a/views/my.js
+++ b/views/my.js
@@ -83,4 +83,5 @@ $(function() {
             $iconTag.removeClass($iconClass + " " + $divClass);
   		}, $msgShowTime);
     }
+
 });
